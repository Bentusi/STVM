IEC61131 结构化文本编译器和虚拟机 v1.0
支持：变量声明、赋值、IF/FOR/WHILE/CASE控制结构、表达式运算

编译文件: example/mathlib.st
Debug: 创建变量声明 input_val, 类型 4
Debug: 添加变量 input_val
Debug: 解析到变量声明段
Debug: 创建变量声明 input_val, 类型 5
Debug: 添加变量 input_val
Debug: 解析到变量声明段
Debug: 创建变量声明 val1, 类型 4
Debug: 添加变量 val1
Debug: 创建变量声明 val2, 类型 4
Debug: 添加变量 val2 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 val1, 类型 4
Debug: 添加变量 val1
Debug: 创建变量声明 val2, 类型 4
Debug: 添加变量 val2 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 val1, 类型 5
Debug: 添加变量 val1
Debug: 创建变量声明 val2, 类型 5
Debug: 添加变量 val2 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 val1, 类型 5
Debug: 添加变量 val1
Debug: 创建变量声明 val2, 类型 5
Debug: 添加变量 val2 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 input_val, 类型 5
Debug: 添加变量 input_val
Debug: 解析到变量声明段
Debug: 创建变量声明 base, 类型 5
Debug: 添加变量 base
Debug: 创建变量声明 exponent, 类型 4
Debug: 添加变量 exponent 到列表
Debug: 创建变量声明 result, 类型 5
Debug: 添加变量 result 到列表
Debug: 创建变量声明 temp_exp, 类型 4
Debug: 添加变量 temp_exp 到列表
Debug: 创建变量声明 i, 类型 4
Debug: 添加变量 i 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 input_val, 类型 5
Debug: 添加变量 input_val
Debug: 创建变量声明 result, 类型 5
Debug: 添加变量 result 到列表
Debug: 创建变量声明 precision, 类型 5
Debug: 添加变量 precision 到列表
Debug: 创建变量声明 old_result, 类型 5
Debug: 添加变量 old_result 到列表
Debug: 创建变量声明 iteration_count, 类型 4
Debug: 添加变量 iteration_count 到列表
Debug: 创建变量声明 diff_val, 类型 5
Debug: 添加变量 diff_val 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 input_val, 类型 5
Debug: 添加变量 input_val
Debug: 创建变量声明 result, 类型 5
Debug: 添加变量 result 到列表
Debug: 创建变量声明 precision, 类型 5
Debug: 添加变量 precision 到列表
Debug: 创建变量声明 old_result, 类型 5
Debug: 添加变量 old_result 到列表
Debug: 创建变量声明 iteration_count, 类型 4
Debug: 添加变量 iteration_count 到列表
Debug: 创建变量声明 sign_val, 类型 4
Debug: 添加变量 sign_val 到列表
Debug: 创建变量声明 abs_input, 类型 5
Debug: 添加变量 abs_input 到列表
Debug: 创建变量声明 temp1, 类型 5
Debug: 添加变量 temp1 到列表
Debug: 创建变量声明 temp2, 类型 5
Debug: 添加变量 temp2 到列表
Debug: 创建变量声明 diff_val, 类型 5
Debug: 添加变量 diff_val 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 x, 类型 5
Debug: 添加变量 x
Debug: 创建变量声明 result, 类型 5
Debug: 添加变量 result 到列表
Debug: 创建变量声明 term, 类型 5
Debug: 添加变量 term 到列表
Debug: 创建变量声明 factorial_val, 类型 5
Debug: 添加变量 factorial_val 到列表
Debug: 创建变量声明 i, 类型 4
Debug: 添加变量 i 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 x, 类型 5
Debug: 添加变量 x
Debug: 创建变量声明 result, 类型 5
Debug: 添加变量 result 到列表
Debug: 创建变量声明 y, 类型 5
Debug: 添加变量 y 到列表
Debug: 创建变量声明 term, 类型 5
Debug: 添加变量 term 到列表
Debug: 创建变量声明 power, 类型 5
Debug: 添加变量 power 到列表
Debug: 创建变量声明 i, 类型 4
Debug: 添加变量 i 到列表
Debug: 创建变量声明 temp1, 类型 5
Debug: 添加变量 temp1 到列表
Debug: 创建变量声明 temp2, 类型 5
Debug: 添加变量 temp2 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 x, 类型 5
Debug: 添加变量 x
Debug: 创建变量声明 ln_10, 类型 5
Debug: 添加变量 ln_10 到列表
Debug: 创建变量声明 ln_x, 类型 5
Debug: 添加变量 ln_x 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 x, 类型 5
Debug: 添加变量 x
Debug: 创建变量声明 ln_2, 类型 5
Debug: 添加变量 ln_2 到列表
Debug: 创建变量声明 ln_x, 类型 5
Debug: 添加变量 ln_x 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 base, 类型 5
Debug: 添加变量 base
Debug: 创建变量声明 exponent, 类型 5
Debug: 添加变量 exponent 到列表
Debug: 创建变量声明 ln_base, 类型 5
Debug: 添加变量 ln_base 到列表
Debug: 创建变量声明 exp_val, 类型 5
Debug: 添加变量 exp_val 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 set_input, 类型 3
Debug: 添加变量 set_input
Debug: 创建变量声明 reset_input, 类型 3
Debug: 添加变量 reset_input 到列表
Debug: 创建变量声明 last_output, 类型 3
Debug: 添加变量 last_output 到列表
Debug: 创建变量声明 output, 类型 3
Debug: 添加变量 output 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 set_input, 类型 3
Debug: 添加变量 set_input
Debug: 创建变量声明 reset_input, 类型 3
Debug: 添加变量 reset_input 到列表
Debug: 创建变量声明 last_output, 类型 3
Debug: 添加变量 last_output 到列表
Debug: 创建变量声明 output, 类型 3
Debug: 添加变量 output 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 input1, 类型 3
Debug: 添加变量 input1
Debug: 创建变量声明 input2, 类型 3
Debug: 添加变量 input2 到列表
Debug: 创建变量声明 input3, 类型 3
Debug: 添加变量 input3 到列表
Debug: 创建变量声明 count, 类型 4
Debug: 添加变量 count 到列表
Debug: 创建变量声明 result, 类型 3
Debug: 添加变量 result 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 input1, 类型 3
Debug: 添加变量 input1
Debug: 创建变量声明 input2, 类型 3
Debug: 添加变量 input2 到列表
Debug: 创建变量声明 input3, 类型 3
Debug: 添加变量 input3 到列表
Debug: 创建变量声明 input4, 类型 3
Debug: 添加变量 input4 到列表
Debug: 创建变量声明 count, 类型 4
Debug: 添加变量 count 到列表
Debug: 创建变量声明 result, 类型 3
Debug: 添加变量 result 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 input_val, 类型 5
Debug: 添加变量 input_val
Debug: 创建变量声明 filter_const, 类型 5
Debug: 添加变量 filter_const 到列表
Debug: 创建变量声明 last_output, 类型 5
Debug: 添加变量 last_output 到列表
Debug: 创建变量声明 output, 类型 5
Debug: 添加变量 output 到列表
Debug: 创建变量声明 temp1, 类型 5
Debug: 添加变量 temp1 到列表
Debug: 创建变量声明 temp2, 类型 5
Debug: 添加变量 temp2 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 val1, 类型 5
Debug: 添加变量 val1
Debug: 创建变量声明 val2, 类型 5
Debug: 添加变量 val2 到列表
Debug: 创建变量声明 val3, 类型 5
Debug: 添加变量 val3 到列表
Debug: 创建变量声明 val4, 类型 5
Debug: 添加变量 val4 到列表
Debug: 创建变量声明 val5, 类型 5
Debug: 添加变量 val5 到列表
Debug: 创建变量声明 sum, 类型 5
Debug: 添加变量 sum 到列表
Debug: 创建变量声明 result, 类型 5
Debug: 添加变量 result 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 input_val, 类型 5
Debug: 添加变量 input_val
Debug: 创建变量声明 min_limit, 类型 5
Debug: 添加变量 min_limit 到列表
Debug: 创建变量声明 max_limit, 类型 5
Debug: 添加变量 max_limit 到列表
Debug: 创建变量声明 output, 类型 5
Debug: 添加变量 output 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 input_val, 类型 5
Debug: 添加变量 input_val
Debug: 创建变量声明 dead_band, 类型 5
Debug: 添加变量 dead_band 到列表
Debug: 创建变量声明 output, 类型 5
Debug: 添加变量 output 到列表
Debug: 创建变量声明 abs_input, 类型 5
Debug: 添加变量 abs_input 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 input_val, 类型 5
Debug: 添加变量 input_val
Debug: 创建变量声明 upper_limit, 类型 5
Debug: 添加变量 upper_limit 到列表
Debug: 创建变量声明 lower_limit, 类型 5
Debug: 添加变量 lower_limit 到列表
Debug: 创建变量声明 last_output, 类型 3
Debug: 添加变量 last_output 到列表
Debug: 创建变量声明 output, 类型 3
Debug: 添加变量 output 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 setpoint, 类型 5
Debug: 添加变量 setpoint
Debug: 创建变量声明 process_var, 类型 5
Debug: 添加变量 process_var 到列表
Debug: 创建变量声明 kp, 类型 5
Debug: 添加变量 kp 到列表
Debug: 创建变量声明 ki, 类型 5
Debug: 添加变量 ki 到列表
Debug: 创建变量声明 kd, 类型 5
Debug: 添加变量 kd 到列表
Debug: 创建变量声明 last_error, 类型 5
Debug: 添加变量 last_error 到列表
Debug: 创建变量声明 integral, 类型 5
Debug: 添加变量 integral 到列表
Debug: 创建变量声明 dt, 类型 5
Debug: 添加变量 dt 到列表
Debug: 创建变量声明 error, 类型 5
Debug: 添加变量 error 到列表
Debug: 创建变量声明 derivative, 类型 5
Debug: 添加变量 derivative 到列表
Debug: 创建变量声明 output, 类型 5
Debug: 添加变量 output 到列表
Debug: 创建变量声明 prop_term, 类型 5
Debug: 添加变量 prop_term 到列表
Debug: 创建变量声明 int_term, 类型 5
Debug: 添加变量 int_term 到列表
Debug: 创建变量声明 der_term, 类型 5
Debug: 添加变量 der_term 到列表
Debug: 解析到变量声明段
Debug: 创建变量声明 test_int1, 类型 4
Debug: 添加变量 test_int1
Debug: 创建变量声明 test_int2, 类型 4
Debug: 添加变量 test_int2 到列表
Debug: 创建变量声明 test_real1, 类型 5
Debug: 添加变量 test_real1 到列表
Debug: 创建变量声明 test_real2, 类型 5
Debug: 添加变量 test_real2 到列表
Debug: 创建变量声明 test_bool1, 类型 3
Debug: 添加变量 test_bool1 到列表
Debug: 创建变量声明 test_bool2, 类型 3
Debug: 添加变量 test_bool2 到列表
Debug: 创建变量声明 test_bool3, 类型 3
Debug: 添加变量 test_bool3 到列表
Debug: 创建变量声明 test_bool4, 类型 3
Debug: 添加变量 test_bool4 到列表
Debug: 创建变量声明 test_result_int, 类型 4
Debug: 添加变量 test_result_int 到列表
Debug: 创建变量声明 test_result_real, 类型 5
Debug: 添加变量 test_result_real 到列表
Debug: 创建变量声明 test_result_bool, 类型 3
Debug: 添加变量 test_result_bool 到列表
Debug: 创建变量声明 PI_CONST, 类型 5
Debug: 添加变量 PI_CONST 到列表
Debug: 创建变量声明 E_CONST, 类型 5
Debug: 添加变量 E_CONST 到列表
Debug: 创建变量声明 test_counter, 类型 4
Debug: 添加变量 test_counter 到列表
Debug: 创建变量声明 pass_counter, 类型 4
Debug: 添加变量 pass_counter 到列表
Debug: 创建变量声明 fail_counter, 类型 4
Debug: 添加变量 fail_counter 到列表
Debug: 创建变量声明 i, 类型 4
Debug: 添加变量 i 到列表
Debug: 创建变量声明 j, 类型 4
Debug: 添加变量 j 到列表
Debug: 创建变量声明 temp_val, 类型 5
Debug: 添加变量 temp_val 到列表
Debug: 创建变量声明 temp_int, 类型 4
Debug: 添加变量 temp_int 到列表
Debug: 创建变量声明 temp_bool, 类型 3
Debug: 添加变量 temp_bool 到列表
Debug: 创建变量声明 temp1, 类型 5
Debug: 添加变量 temp1 到列表
Debug: 创建变量声明 temp2, 类型 5
Debug: 添加变量 temp2 到列表
Debug: 创建变量声明 temp3, 类型 5
Debug: 添加变量 temp3 到列表
Debug: 创建变量声明 temp4, 类型 5
Debug: 添加变量 temp4 到列表
Debug: 创建变量声明 temp5, 类型 5
Debug: 添加变量 temp5 到列表
Debug: 创建变量声明 rs_output, 类型 3
Debug: 添加变量 rs_output 到列表
Debug: 创建变量声明 sr_output, 类型 3
Debug: 添加变量 sr_output 到列表
Debug: 创建变量声明 vote_2oo3_output, 类型 3
Debug: 添加变量 vote_2oo3_output 到列表
Debug: 创建变量声明 vote_2oo4_output, 类型 3
Debug: 添加变量 vote_2oo4_output 到列表
Debug: 创建变量声明 filter_output, 类型 5
Debug: 添加变量 filter_output 到列表
Debug: 创建变量声明 avg_output, 类型 5
Debug: 添加变量 avg_output 到列表
Debug: 创建变量声明 limit_output, 类型 5
Debug: 添加变量 limit_output 到列表
Debug: 创建变量声明 dead_output, 类型 5
Debug: 添加变量 dead_output 到列表
Debug: 创建变量声明 hyst_output, 类型 3
Debug: 添加变量 hyst_output 到列表
Debug: 创建变量声明 pid_output, 类型 5
Debug: 添加变量 pid_output 到列表
Debug: 创建变量声明 abs_result, 类型 5
Debug: 添加变量 abs_result 到列表
Debug: 创建变量声明 max_result, 类型 5
Debug: 添加变量 max_result 到列表
Debug: 创建变量声明 min_result, 类型 5
Debug: 添加变量 min_result 到列表
Debug: 创建变量声明 sign_result, 类型 4
Debug: 添加变量 sign_result 到列表
Debug: 创建变量声明 power_result, 类型 5
Debug: 添加变量 power_result 到列表
Debug: 创建变量声明 sqrt_result, 类型 5
Debug: 添加变量 sqrt_result 到列表
Debug: 创建变量声明 cbrt_result, 类型 5
Debug: 添加变量 cbrt_result 到列表
Debug: 创建变量声明 exp_result, 类型 5
Debug: 添加变量 exp_result 到列表
Debug: 创建变量声明 ln_result, 类型 5
Debug: 添加变量 ln_result 到列表
Debug: 创建变量声明 log10_result, 类型 5
Debug: 添加变量 log10_result 到列表
Debug: 创建变量声明 log2_result, 类型 5
Debug: 添加变量 log2_result 到列表
Debug: 创建变量声明 filter_last, 类型 5
Debug: 添加变量 filter_last 到列表
Debug: 创建变量声明 hyst_last, 类型 3
Debug: 添加变量 hyst_last 到列表
Debug: 创建变量声明 pid_error_last, 类型 5
Debug: 添加变量 pid_error_last 到列表
Debug: 创建变量声明 pid_integral, 类型 5
Debug: 添加变量 pid_integral 到列表
Debug: 创建变量声明 success_rate, 类型 5
Debug: 添加变量 success_rate 到列表
Debug: 解析到变量声明段
编译成功！

=== 编译阶段全局变量 ===
=== AST全局变量列表 ===
变量[0]: test_int1 (类型: 4)
变量[1]: setpoint (类型: 5)
变量[2]: upper_limit (类型: 5)
变量[3]: dead_band (类型: 5)
变量[4]: min_limit (类型: 5)
变量[5]: val3 (类型: 5)
变量[6]: filter_const (类型: 5)
变量[7]: input4 (类型: 3)
变量[8]: input1 (类型: 3)
变量[9]: set_input (类型: 3)
变量[10]: ln_base (类型: 5)
变量[11]: ln_2 (类型: 5)
变量[12]: ln_10 (类型: 5)
变量[13]: y (类型: 5)
变量[14]: x (类型: 5)
变量[15]: sign_val (类型: 4)
变量[16]: precision (类型: 5)
变量[17]: base (类型: 5)
变量[18]: val1 (类型: 4)
变量[19]: input_val (类型: 4)
变量[20]: val2 (类型: 4)
变量[21]: exponent (类型: 4)
变量[22]: result (类型: 5)
变量[23]: temp_exp (类型: 4)
变量[24]: i (类型: 4)
变量[25]: old_result (类型: 5)
变量[26]: iteration_count (类型: 4)
变量[27]: diff_val (类型: 5)
变量[28]: abs_input (类型: 5)
变量[29]: temp1 (类型: 5)
变量[30]: temp2 (类型: 5)
变量[31]: diff_val (类型: 5)
变量[32]: result (类型: 5)
变量[33]: term (类型: 5)
变量[34]: factorial_val (类型: 5)
变量[35]: i (类型: 4)
变量[36]: term (类型: 5)
变量[37]: power (类型: 5)
变量[38]: i (类型: 4)
变量[39]: temp1 (类型: 5)
变量[40]: temp2 (类型: 5)
变量[41]: ln_x (类型: 5)
变量[42]: ln_x (类型: 5)
变量[43]: exp_val (类型: 5)
变量[44]: reset_input (类型: 3)
变量[45]: last_output (类型: 3)
变量[46]: output (类型: 3)
变量[47]: input2 (类型: 3)
变量[48]: input3 (类型: 3)
变量[49]: count (类型: 4)
变量[50]: result (类型: 3)
变量[51]: count (类型: 4)
变量[52]: result (类型: 3)
变量[53]: last_output (类型: 5)
变量[54]: output (类型: 5)
变量[55]: temp1 (类型: 5)
变量[56]: temp2 (类型: 5)
变量[57]: val4 (类型: 5)
变量[58]: val5 (类型: 5)
变量[59]: sum (类型: 5)
变量[60]: result (类型: 5)
变量[61]: max_limit (类型: 5)
变量[62]: output (类型: 5)
变量[63]: output (类型: 5)
变量[64]: abs_input (类型: 5)
变量[65]: lower_limit (类型: 5)
变量[66]: last_output (类型: 3)
变量[67]: output (类型: 3)
变量[68]: process_var (类型: 5)
变量[69]: kp (类型: 5)
变量[70]: ki (类型: 5)
变量[71]: kd (类型: 5)
变量[72]: last_error (类型: 5)
变量[73]: integral (类型: 5)
变量[74]: dt (类型: 5)
变量[75]: error (类型: 5)
变量[76]: derivative (类型: 5)
变量[77]: output (类型: 5)
变量[78]: prop_term (类型: 5)
变量[79]: int_term (类型: 5)
变量[80]: der_term (类型: 5)
变量[81]: test_int2 (类型: 4)
变量[82]: test_real1 (类型: 5)
变量[83]: test_real2 (类型: 5)
变量[84]: test_bool1 (类型: 3)
变量[85]: test_bool2 (类型: 3)
变量[86]: test_bool3 (类型: 3)
变量[87]: test_bool4 (类型: 3)
变量[88]: test_result_int (类型: 4)
变量[89]: test_result_real (类型: 5)
变量[90]: test_result_bool (类型: 3)
变量[91]: PI_CONST (类型: 5)
变量[92]: E_CONST (类型: 5)
变量[93]: test_counter (类型: 4)
变量[94]: pass_counter (类型: 4)
变量[95]: fail_counter (类型: 4)
变量[96]: i (类型: 4)
变量[97]: j (类型: 4)
变量[98]: temp_val (类型: 5)
变量[99]: temp_int (类型: 4)
变量[100]: temp_bool (类型: 3)
变量[101]: temp1 (类型: 5)
变量[102]: temp2 (类型: 5)
变量[103]: temp3 (类型: 5)
变量[104]: temp4 (类型: 5)
变量[105]: temp5 (类型: 5)
变量[106]: rs_output (类型: 3)
变量[107]: sr_output (类型: 3)
变量[108]: vote_2oo3_output (类型: 3)
变量[109]: vote_2oo4_output (类型: 3)
变量[110]: filter_output (类型: 5)
变量[111]: avg_output (类型: 5)
变量[112]: limit_output (类型: 5)
变量[113]: dead_output (类型: 5)
变量[114]: hyst_output (类型: 3)
变量[115]: pid_output (类型: 5)
变量[116]: abs_result (类型: 5)
变量[117]: max_result (类型: 5)
变量[118]: min_result (类型: 5)
变量[119]: sign_result (类型: 4)
变量[120]: power_result (类型: 5)
变量[121]: sqrt_result (类型: 5)
变量[122]: cbrt_result (类型: 5)
变量[123]: exp_result (类型: 5)
变量[124]: ln_result (类型: 5)
变量[125]: log10_result (类型: 5)
变量[126]: log2_result (类型: 5)
变量[127]: filter_last (类型: 5)
变量[128]: hyst_last (类型: 3)
变量[129]: pid_error_last (类型: 5)
变量[130]: pid_integral (类型: 5)
变量[131]: success_rate (类型: 5)
总共 132 个全局变量
======================

=== 抽象语法树 ===
编译单元
  函数列表:
    函数: ABS_INT
      语句列表
        IF语句
          二元操作: 11
            标识符: input_val
            整数: 0
          语句列表
            赋值: ABS_INT
              标识符: input_val
        ELSE
          语句列表
            赋值: ABS_INT
              未知节点类型
    函数: ABS_REAL
      语句列表
        IF语句
          二元操作: 11
            标识符: input_val
            实数: 0.000000
          语句列表
            赋值: ABS_REAL
              标识符: input_val
        ELSE
          语句列表
            赋值: ABS_REAL
              未知节点类型
    函数: MAX_INT
      语句列表
        IF语句
          二元操作: 10
            标识符: val1
            标识符: val2
          语句列表
            赋值: MAX_INT
              标识符: val1
        ELSE
          语句列表
            赋值: MAX_INT
              标识符: val2
    函数: MIN_INT
      语句列表
        IF语句
          二元操作: 8
            标识符: val1
            标识符: val2
          语句列表
            赋值: MIN_INT
              标识符: val1
        ELSE
          语句列表
            赋值: MIN_INT
              标识符: val2
    函数: MAX_REAL
      语句列表
        IF语句
          二元操作: 10
            标识符: val1
            标识符: val2
          语句列表
            赋值: MAX_REAL
              标识符: val1
        ELSE
          语句列表
            赋值: MAX_REAL
              标识符: val2
    函数: MIN_REAL
      语句列表
        IF语句
          二元操作: 8
            标识符: val1
            标识符: val2
          语句列表
            赋值: MIN_REAL
              标识符: val1
        ELSE
          语句列表
            赋值: MIN_REAL
              标识符: val2
    函数: SIGN
      语句列表
        IF语句
          二元操作: 10
            标识符: input_val
            实数: 0.000000
          语句列表
            赋值: SIGN
              整数: 1
        ELSE
          语句列表
            赋值: SIGN
              整数: 0
    函数: POWER_INT
      语句列表
        赋值: result
          实数: 1.000000
      语句列表
        赋值: temp_exp
          函数调用: ABS_INT(exponent)
      语句列表
        未知节点类型
      语句列表
        IF语句
          二元操作: 8
            标识符: exponent
            整数: 0
          语句列表
            赋值: result
              二元操作: 4
                实数: 1.000000
                标识符: result
      语句列表
        赋值: POWER_INT
          标识符: result
    函数: SQRT
      语句列表
        IF语句
          二元操作: 8
            标识符: input_val
            实数: 0.000000
          语句列表
            赋值: SQRT
              实数: 0.000000
          语句列表
            返回值
      语句列表
        IF语句
          二元操作: 6
            标识符: input_val
            实数: 0.000000
          语句列表
            赋值: SQRT
              实数: 0.000000
          语句列表
            返回值
      语句列表
        赋值: result
          二元操作: 4
            标识符: input_val
            实数: 2.000000
      语句列表
        赋值: precision
          实数: 0.000001
      语句列表
        赋值: iteration_count
          整数: 0
      语句列表
        未知节点类型
      语句列表
        赋值: SQRT
          标识符: result
    函数: CBRT
      语句列表
        赋值: sign_val
          函数调用: SIGN(input_val)
      语句列表
        赋值: abs_input
          函数调用: ABS_REAL(input_val)
      语句列表
        IF语句
          二元操作: 6
            标识符: abs_input
            实数: 0.000000
          语句列表
            赋值: CBRT
              实数: 0.000000
          语句列表
            返回值
      语句列表
        赋值: result
          二元操作: 4
            标识符: abs_input
            实数: 3.000000
      语句列表
        赋值: precision
          实数: 0.000001
      语句列表
        赋值: iteration_count
          整数: 0
      语句列表
        未知节点类型
      语句列表
        赋值: CBRT
          二元操作: 3
            标识符: result
            标识符: sign_val
    函数: EXP
      语句列表
        赋值: result
          实数: 1.000000
      语句列表
        赋值: term
          实数: 1.000000
      语句列表
        赋值: factorial_val
          实数: 1.000000
      语句列表
        未知节点类型
      语句列表
        赋值: EXP
          标识符: result
    函数: LN
      语句列表
        IF语句
          二元操作: 9
            标识符: x
            实数: 0.000000
          语句列表
            赋值: LN
              实数: 0.000000
          语句列表
            返回值
      语句列表
        IF语句
          二元操作: 6
            标识符: x
            实数: 1.000000
          语句列表
            赋值: LN
              实数: 0.000000
          语句列表
            返回值
      语句列表
        赋值: temp1
          二元操作: 2
            标识符: x
            实数: 1.000000
      语句列表
        赋值: temp2
          二元操作: 1
            标识符: x
            实数: 1.000000
      语句列表
        赋值: y
          二元操作: 4
            标识符: temp1
            标识符: temp2
      语句列表
        赋值: result
          实数: 0.000000
      语句列表
        赋值: term
          标识符: y
      语句列表
        赋值: power
          标识符: y
      语句列表
        未知节点类型
      语句列表
        赋值: LN
          二元操作: 3
            实数: 2.000000
            标识符: result
    函数: LOG10
      语句列表
        赋值: ln_10
          实数: 2.302585
      语句列表
        赋值: ln_x
          函数调用: LN(x)
      语句列表
        赋值: LOG10
          二元操作: 4
            标识符: ln_x
            标识符: ln_10
    函数: LOG2
      语句列表
        赋值: ln_2
          实数: 0.693147
      语句列表
        赋值: ln_x
          函数调用: LN(x)
      语句列表
        赋值: LOG2
          二元操作: 4
            标识符: ln_x
            标识符: ln_2
    函数: POWER
      语句列表
        IF语句
          二元操作: 9
            标识符: base
            实数: 0.000000
          语句列表
            赋值: POWER
              实数: 0.000000
        ELSE
          语句列表
            赋值: ln_base
              函数调用: LN(base)
          语句列表
            赋值: exp_val
              二元操作: 3
                标识符: exponent
                标识符: ln_base
          语句列表
            赋值: POWER
              函数调用: EXP(exp_val)
    函数: RS_FLIP_FLOP
      语句列表
        IF语句
          二元操作: 6
            标识符: set_input
            布尔: TRUE
          语句列表
            IF语句
              二元操作: 6
                标识符: reset_input
                布尔: FALSE
              语句列表
                赋值: output
                  布尔: TRUE
            ELSE
              语句列表
                赋值: output
                  布尔: FALSE
        ELSE
          语句列表
            赋值: output
              标识符: last_output
      语句列表
        赋值: RS_FLIP_FLOP
          标识符: output
    函数: SR_FLIP_FLOP
      语句列表
        IF语句
          二元操作: 6
            标识符: reset_input
            布尔: TRUE
          语句列表
            IF语句
              二元操作: 6
                标识符: set_input
                布尔: FALSE
              语句列表
                赋值: output
                  布尔: FALSE
            ELSE
              语句列表
                赋值: output
                  布尔: TRUE
        ELSE
          语句列表
            赋值: output
              标识符: last_output
      语句列表
        赋值: SR_FLIP_FLOP
          标识符: output
    函数: VOTE_2oo3
      语句列表
        赋值: count
          整数: 0
      语句列表
        IF语句
          二元操作: 6
            标识符: input1
            布尔: TRUE
          语句列表
            赋值: count
              二元操作: 1
                标识符: count
                整数: 1
      语句列表
        IF语句
          二元操作: 6
            标识符: input2
            布尔: TRUE
          语句列表
            赋值: count
              二元操作: 1
                标识符: count
                整数: 1
      语句列表
        IF语句
          二元操作: 6
            标识符: input3
            布尔: TRUE
          语句列表
            赋值: count
              二元操作: 1
                标识符: count
                整数: 1
      语句列表
        IF语句
          二元操作: 11
            标识符: count
            整数: 2
          语句列表
            赋值: result
              布尔: TRUE
        ELSE
          语句列表
            赋值: result
              布尔: FALSE
      语句列表
        赋值: VOTE_2oo3
          标识符: result
    函数: VOTE_2oo4
      语句列表
        赋值: count
          整数: 0
      语句列表
        IF语句
          二元操作: 6
            标识符: input1
            布尔: TRUE
          语句列表
            赋值: count
              二元操作: 1
                标识符: count
                整数: 1
      语句列表
        IF语句
          二元操作: 6
            标识符: input2
            布尔: TRUE
          语句列表
            赋值: count
              二元操作: 1
                标识符: count
                整数: 1
      语句列表
        IF语句
          二元操作: 6
            标识符: input3
            布尔: TRUE
          语句列表
            赋值: count
              二元操作: 1
                标识符: count
                整数: 1
      语句列表
        IF语句
          二元操作: 6
            标识符: input4
            布尔: TRUE
          语句列表
            赋值: count
              二元操作: 1
                标识符: count
                整数: 1
      语句列表
        IF语句
          二元操作: 11
            标识符: count
            整数: 2
          语句列表
            赋值: result
              布尔: TRUE
        ELSE
          语句列表
            赋值: result
              布尔: FALSE
      语句列表
        赋值: VOTE_2oo4
          标识符: result
    函数: LOW_PASS_FILTER
      语句列表
        赋值: temp1
          二元操作: 2
            实数: 1.000000
            标识符: filter_const
      语句列表
        赋值: temp2
          二元操作: 3
            标识符: temp1
            标识符: last_output
      语句列表
        赋值: output
          二元操作: 1
            二元操作: 3
              标识符: filter_const
              标识符: input_val
            标识符: temp2
      语句列表
        赋值: LOW_PASS_FILTER
          标识符: output
    函数: MOVING_AVG_5
      语句列表
        赋值: sum
          二元操作: 1
            标识符: val1
            标识符: val2
      语句列表
        赋值: sum
          二元操作: 1
            标识符: sum
            标识符: val3
      语句列表
        赋值: sum
          二元操作: 1
            标识符: sum
            标识符: val4
      语句列表
        赋值: sum
          二元操作: 1
            标识符: sum
            标识符: val5
      语句列表
        赋值: result
          二元操作: 4
            标识符: sum
            实数: 5.000000
      语句列表
        赋值: MOVING_AVG_5
          标识符: result
    函数: LIMITER
      语句列表
        IF语句
          二元操作: 8
            标识符: input_val
            标识符: min_limit
          语句列表
            赋值: output
              标识符: min_limit
        ELSE
          语句列表
            赋值: output
              标识符: input_val
      语句列表
        赋值: LIMITER
          标识符: output
    函数: DEAD_ZONE
      语句列表
        赋值: abs_input
          函数调用: ABS_REAL(input_val)
      语句列表
        IF语句
          二元操作: 9
            标识符: abs_input
            标识符: dead_band
          语句列表
            赋值: output
              实数: 0.000000
        ELSE
          语句列表
            IF语句
              二元操作: 10
                标识符: input_val
                实数: 0.000000
              语句列表
                赋值: output
                  二元操作: 2
                    标识符: input_val
                    标识符: dead_band
            ELSE
              语句列表
                赋值: output
                  二元操作: 1
                    标识符: input_val
                    标识符: dead_band
      语句列表
        赋值: DEAD_ZONE
          标识符: output
    函数: HYSTERESIS
      语句列表
        IF语句
          二元操作: 6
            标识符: last_output
            布尔: FALSE
          语句列表
            IF语句
              二元操作: 11
                标识符: input_val
                标识符: upper_limit
              语句列表
                赋值: output
                  布尔: TRUE
            ELSE
              语句列表
                赋值: output
                  布尔: FALSE
        ELSE
          语句列表
            IF语句
              二元操作: 9
                标识符: input_val
                标识符: lower_limit
              语句列表
                赋值: output
                  布尔: FALSE
            ELSE
              语句列表
                赋值: output
                  布尔: TRUE
      语句列表
        赋值: HYSTERESIS
          标识符: output
    函数: PID_SIMPLE
      语句列表
        赋值: error
          二元操作: 2
            标识符: setpoint
            标识符: process_var
      语句列表
        赋值: prop_term
          二元操作: 3
            标识符: kp
            标识符: error
      语句列表
        赋值: integral
          二元操作: 1
            标识符: integral
            二元操作: 3
              标识符: error
              标识符: dt
      语句列表
        赋值: int_term
          二元操作: 3
            标识符: ki
            标识符: integral
      语句列表
        赋值: derivative
          二元操作: 2
            标识符: error
            标识符: last_error
      语句列表
        赋值: derivative
          二元操作: 4
            标识符: derivative
            标识符: dt
      语句列表
        赋值: der_term
          二元操作: 3
            标识符: kd
            标识符: derivative
      语句列表
        赋值: output
          二元操作: 1
            标识符: prop_term
            标识符: int_term
      语句列表
        赋值: output
          二元操作: 1
            标识符: output
            标识符: der_term
      语句列表
        返回值
          标识符: output
  程序: test_mathlib
    语句列表
      赋值: test_counter
        整数: 0
    语句列表
      赋值: pass_counter
        整数: 0
    语句列表
      赋值: fail_counter
        整数: 0
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_int1
        整数: -25
    语句列表
      赋值: test_result_int
        函数调用: ABS_INT(test_int1)
    语句列表
      IF语句
        二元操作: 6
          标识符: test_result_int
          整数: 25
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: -15.700000
    语句列表
      赋值: abs_result
        函数调用: ABS_REAL(test_real1)
    语句列表
      IF语句
        二元操作: 6
          标识符: abs_result
          实数: 15.700000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_int1
        整数: 42
    语句列表
      赋值: test_int2
        整数: 37
    语句列表
      赋值: test_result_int
        函数调用: MAX_INT(test_int1, test_int2)
    语句列表
      IF语句
        二元操作: 6
          标识符: test_result_int
          整数: 42
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_result_int
        函数调用: MIN_INT(test_int1, test_int2)
    语句列表
      IF语句
        二元操作: 6
          标识符: test_result_int
          整数: 37
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 23.800000
    语句列表
      赋值: test_real2
        实数: 19.400000
    语句列表
      赋值: max_result
        函数调用: MAX_REAL(test_real1, test_real2)
    语句列表
      IF语句
        二元操作: 6
          标识符: max_result
          实数: 23.800000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: min_result
        函数调用: MIN_REAL(test_real1, test_real2)
    语句列表
      IF语句
        二元操作: 6
          标识符: min_result
          实数: 19.400000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 18.500000
    语句列表
      赋值: sign_result
        函数调用: SIGN(test_real1)
    语句列表
      IF语句
        二元操作: 6
          标识符: sign_result
          整数: 1
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: -12.300000
    语句列表
      赋值: sign_result
        函数调用: SIGN(test_real1)
    语句列表
      IF语句
        二元操作: 6
          标识符: sign_result
          整数: -1
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 0.000000
    语句列表
      赋值: sign_result
        函数调用: SIGN(test_real1)
    语句列表
      IF语句
        二元操作: 6
          标识符: sign_result
          整数: 0
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 3.000000
    语句列表
      赋值: test_int1
        整数: 4
    语句列表
      赋值: power_result
        二元操作: 2
          函数调用: POWER_INT(test_real1, test_int1)
          实数: 81.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(power_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 2.000000
    语句列表
      赋值: test_int1
        整数: 0
    语句列表
      赋值: power_result
        二元操作: 2
          函数调用: POWER_INT(test_real1, test_int1)
          实数: 1.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(power_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 49.000000
    语句列表
      赋值: sqrt_result
        二元操作: 2
          函数调用: SQRT(test_real1)
          实数: 7.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(sqrt_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 2.000000
    语句列表
      赋值: sqrt_result
        二元操作: 2
          函数调用: SQRT(test_real1)
          实数: 1.414213
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(sqrt_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 125.000000
    语句列表
      赋值: cbrt_result
        二元操作: 2
          函数调用: CBRT(test_real1)
          实数: 5.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(cbrt_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: -27.000000
    语句列表
      赋值: cbrt_result
        二元操作: 2
          函数调用: CBRT(test_real1)
          实数: -3.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(cbrt_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 0.000000
    语句列表
      赋值: exp_result
        二元操作: 2
          函数调用: EXP(test_real1)
          实数: 1.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(exp_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 1.000000
    语句列表
      赋值: exp_result
        二元操作: 2
          函数调用: EXP(test_real1)
          标识符: E_CONST
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(exp_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 1.000000
    语句列表
      赋值: ln_result
        函数调用: LN(test_real1)
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(ln_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        标识符: E_CONST
    语句列表
      赋值: ln_result
        二元操作: 2
          函数调用: LN(test_real1)
          实数: 1.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(ln_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 10.000000
    语句列表
      赋值: log10_result
        二元操作: 2
          函数调用: LOG10(test_real1)
          实数: 1.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(log10_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 100.000000
    语句列表
      赋值: log10_result
        二元操作: 2
          函数调用: LOG10(test_real1)
          实数: 2.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(log10_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 2.000000
    语句列表
      赋值: log2_result
        二元操作: 2
          函数调用: LOG2(test_real1)
          实数: 1.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(log2_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 16.000000
    语句列表
      赋值: log2_result
        二元操作: 2
          函数调用: LOG2(test_real1)
          实数: 4.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(log2_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 4.000000
    语句列表
      赋值: test_real2
        实数: 0.500000
    语句列表
      赋值: power_result
        二元操作: 2
          函数调用: POWER(test_real1, test_real2)
          实数: 2.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(power_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 8.000000
    语句列表
      赋值: test_real2
        实数: 3.000000
    语句列表
      赋值: power_result
        二元操作: 2
          函数调用: POWER(test_real1, test_real2)
          实数: 512.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(power_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.100000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_bool1
        布尔: TRUE
    语句列表
      赋值: test_bool2
        布尔: FALSE
    语句列表
      赋值: temp_bool
        布尔: FALSE
    语句列表
      赋值: rs_output
        函数调用: RS_FLIP_FLOP(test_bool1, test_bool2, temp_bool)
    语句列表
      IF语句
        二元操作: 6
          标识符: rs_output
          布尔: TRUE
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_bool1
        布尔: FALSE
    语句列表
      赋值: test_bool2
        布尔: TRUE
    语句列表
      赋值: temp_bool
        布尔: TRUE
    语句列表
      赋值: rs_output
        函数调用: RS_FLIP_FLOP(test_bool1, test_bool2, temp_bool)
    语句列表
      IF语句
        二元操作: 6
          标识符: rs_output
          布尔: FALSE
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_bool1
        布尔: FALSE
    语句列表
      赋值: test_bool2
        布尔: FALSE
    语句列表
      赋值: temp_bool
        布尔: TRUE
    语句列表
      赋值: rs_output
        函数调用: RS_FLIP_FLOP(test_bool1, test_bool2, temp_bool)
    语句列表
      IF语句
        二元操作: 6
          标识符: rs_output
          布尔: TRUE
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_bool1
        布尔: TRUE
    语句列表
      赋值: test_bool2
        布尔: FALSE
    语句列表
      赋值: temp_bool
        布尔: FALSE
    语句列表
      赋值: sr_output
        函数调用: SR_FLIP_FLOP(test_bool1, test_bool2, temp_bool)
    语句列表
      IF语句
        二元操作: 6
          标识符: sr_output
          布尔: TRUE
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_bool1
        布尔: FALSE
    语句列表
      赋值: test_bool2
        布尔: TRUE
    语句列表
      赋值: temp_bool
        布尔: TRUE
    语句列表
      赋值: sr_output
        函数调用: SR_FLIP_FLOP(test_bool1, test_bool2, temp_bool)
    语句列表
      IF语句
        二元操作: 6
          标识符: sr_output
          布尔: FALSE
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_bool1
        布尔: TRUE
    语句列表
      赋值: test_bool2
        布尔: TRUE
    语句列表
      赋值: test_bool3
        布尔: FALSE
    语句列表
      赋值: vote_2oo3_output
        函数调用: VOTE_2oo3(test_bool1, test_bool2, test_bool3)
    语句列表
      IF语句
        二元操作: 6
          标识符: vote_2oo3_output
          布尔: TRUE
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_bool1
        布尔: TRUE
    语句列表
      赋值: test_bool2
        布尔: FALSE
    语句列表
      赋值: test_bool3
        布尔: FALSE
    语句列表
      赋值: vote_2oo3_output
        函数调用: VOTE_2oo3(test_bool1, test_bool2, test_bool3)
    语句列表
      IF语句
        二元操作: 6
          标识符: vote_2oo3_output
          布尔: FALSE
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_bool1
        布尔: TRUE
    语句列表
      赋值: test_bool2
        布尔: TRUE
    语句列表
      赋值: test_bool3
        布尔: TRUE
    语句列表
      赋值: vote_2oo3_output
        函数调用: VOTE_2oo3(test_bool1, test_bool2, test_bool3)
    语句列表
      IF语句
        二元操作: 6
          标识符: vote_2oo3_output
          布尔: TRUE
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_bool1
        布尔: TRUE
    语句列表
      赋值: test_bool2
        布尔: TRUE
    语句列表
      赋值: test_bool3
        布尔: FALSE
    语句列表
      赋值: test_bool4
        布尔: FALSE
    语句列表
      赋值: vote_2oo4_output
        函数调用: VOTE_2oo4(test_bool1, test_bool2, test_bool3, test_bool4)
    语句列表
      IF语句
        二元操作: 6
          标识符: vote_2oo4_output
          布尔: TRUE
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_bool1
        布尔: TRUE
    语句列表
      赋值: test_bool2
        布尔: FALSE
    语句列表
      赋值: test_bool3
        布尔: FALSE
    语句列表
      赋值: test_bool4
        布尔: FALSE
    语句列表
      赋值: vote_2oo4_output
        函数调用: VOTE_2oo4(test_bool1, test_bool2, test_bool3, test_bool4)
    语句列表
      IF语句
        二元操作: 6
          标识符: vote_2oo4_output
          布尔: FALSE
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_bool1
        布尔: TRUE
    语句列表
      赋值: test_bool2
        布尔: TRUE
    语句列表
      赋值: test_bool3
        布尔: TRUE
    语句列表
      赋值: test_bool4
        布尔: TRUE
    语句列表
      赋值: vote_2oo4_output
        函数调用: VOTE_2oo4(test_bool1, test_bool2, test_bool3, test_bool4)
    语句列表
      IF语句
        二元操作: 6
          标识符: vote_2oo4_output
          布尔: TRUE
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 10.000000
    语句列表
      赋值: test_real2
        实数: 0.300000
    语句列表
      赋值: filter_last
        实数: 5.000000
    语句列表
      赋值: filter_output
        二元操作: 2
          函数调用: LOW_PASS_FILTER(test_real1, test_real2, filter_last)
          实数: 6.500000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(filter_output)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: temp1
        实数: 1.000000
    语句列表
      赋值: temp2
        实数: 2.000000
    语句列表
      赋值: temp3
        实数: 3.000000
    语句列表
      赋值: temp4
        实数: 4.000000
    语句列表
      赋值: temp5
        实数: 5.000000
    语句列表
      赋值: avg_output
        二元操作: 2
          函数调用: MOVING_AVG_5(temp1, temp2, temp3, temp4, temp5)
          实数: 3.000000
    语句列表
      赋值: temp_val
        函数调用: ABS_REAL(avg_output)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp_val
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: temp1
        实数: 10.000000
    语句列表
      赋值: temp2
        实数: 20.000000
    语句列表
      赋值: temp3
        实数: 30.000000
    语句列表
      赋值: temp4
        实数: 40.000000
    语句列表
      赋值: temp5
        实数: 50.000000
    语句列表
      赋值: avg_output
        二元操作: 2
          函数调用: MOVING_AVG_5(temp1, temp2, temp3, temp4, temp5)
          实数: 30.000000
    语句列表
      赋值: temp_val
        函数调用: ABS_REAL(avg_output)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp_val
          实数: 0.010000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 15.000000
    语句列表
      赋值: temp1
        实数: 0.000000
    语句列表
      赋值: temp2
        实数: 10.000000
    语句列表
      赋值: limit_output
        函数调用: LIMITER(test_real1, temp1, temp2)
    语句列表
      IF语句
        二元操作: 6
          标识符: limit_output
          实数: 10.000000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: -5.000000
    语句列表
      赋值: temp1
        实数: 0.000000
    语句列表
      赋值: temp2
        实数: 10.000000
    语句列表
      赋值: limit_output
        函数调用: LIMITER(test_real1, temp1, temp2)
    语句列表
      IF语句
        二元操作: 6
          标识符: limit_output
          实数: 0.000000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 7.500000
    语句列表
      赋值: temp1
        实数: 0.000000
    语句列表
      赋值: temp2
        实数: 10.000000
    语句列表
      赋值: limit_output
        函数调用: LIMITER(test_real1, temp1, temp2)
    语句列表
      IF语句
        二元操作: 6
          标识符: limit_output
          实数: 7.500000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 5.000000
    语句列表
      赋值: test_real2
        实数: 2.000000
    语句列表
      赋值: dead_output
        函数调用: DEAD_ZONE(test_real1, test_real2)
    语句列表
      IF语句
        二元操作: 6
          标识符: dead_output
          实数: 3.000000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: -7.000000
    语句列表
      赋值: test_real2
        实数: 2.000000
    语句列表
      赋值: dead_output
        函数调用: DEAD_ZONE(test_real1, test_real2)
    语句列表
      IF语句
        二元操作: 6
          标识符: dead_output
          实数: -5.000000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 1.500000
    语句列表
      赋值: test_real2
        实数: 2.000000
    语句列表
      赋值: dead_output
        函数调用: DEAD_ZONE(test_real1, test_real2)
    语句列表
      IF语句
        二元操作: 6
          标识符: dead_output
          实数: 0.000000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 12.000000
    语句列表
      赋值: temp1
        实数: 10.000000
    语句列表
      赋值: temp2
        实数: 5.000000
    语句列表
      赋值: hyst_last
        布尔: FALSE
    语句列表
      赋值: hyst_output
        函数调用: HYSTERESIS(test_real1, temp1, temp2, hyst_last)
    语句列表
      IF语句
        二元操作: 6
          标识符: hyst_output
          布尔: TRUE
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 7.000000
    语句列表
      赋值: temp1
        实数: 10.000000
    语句列表
      赋值: temp2
        实数: 5.000000
    语句列表
      赋值: hyst_last
        布尔: TRUE
    语句列表
      赋值: hyst_output
        函数调用: HYSTERESIS(test_real1, temp1, temp2, hyst_last)
    语句列表
      IF语句
        二元操作: 6
          标识符: hyst_output
          布尔: TRUE
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 3.000000
    语句列表
      赋值: temp1
        实数: 10.000000
    语句列表
      赋值: temp2
        实数: 5.000000
    语句列表
      赋值: hyst_last
        布尔: TRUE
    语句列表
      赋值: hyst_output
        函数调用: HYSTERESIS(test_real1, temp1, temp2, hyst_last)
    语句列表
      IF语句
        二元操作: 6
          标识符: hyst_output
          布尔: FALSE
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 25.000000
    语句列表
      赋值: test_real2
        实数: 0.400000
    语句列表
      赋值: filter_last
        实数: 10.000000
    语句列表
      赋值: temp_val
        函数调用: LOW_PASS_FILTER(test_real1, test_real2, filter_last)
    语句列表
      赋值: temp1
        实数: 0.000000
    语句列表
      赋值: temp2
        实数: 20.000000
    语句列表
      赋值: limit_output
        二元操作: 2
          函数调用: LIMITER(temp_val, temp1, temp2)
          实数: 16.000000
    语句列表
      赋值: temp3
        函数调用: ABS_REAL(limit_output)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp3
          实数: 0.100000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 4.000000
    语句列表
      赋值: sqrt_result
        函数调用: SQRT(test_real1)
    语句列表
      赋值: test_int1
        整数: 3
    语句列表
      赋值: power_result
        二元操作: 2
          函数调用: POWER_INT(sqrt_result, test_int1)
          实数: 8.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(power_result)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 0.100000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_bool1
        布尔: TRUE
    语句列表
      赋值: test_bool2
        布尔: TRUE
    语句列表
      赋值: test_bool3
        布尔: FALSE
    语句列表
      赋值: vote_2oo3_output
        函数调用: VOTE_2oo3(test_bool1, test_bool2, test_bool3)
    语句列表
      IF语句
        二元操作: 6
          标识符: vote_2oo3_output
          布尔: TRUE
        语句列表
          赋值: temp_val
            实数: 10.000000
      ELSE
        语句列表
          赋值: temp_val
            实数: 0.000000
    语句列表
      赋值: temp1
        实数: 5.000000
    语句列表
      赋值: temp2
        实数: 0.500000
    语句列表
      赋值: filter_output
        二元操作: 2
          函数调用: LOW_PASS_FILTER(temp_val, temp2, temp1)
          实数: 7.500000
    语句列表
      赋值: temp3
        函数调用: ABS_REAL(filter_output)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp3
          实数: 0.100000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: temp_val
        实数: 0.000000
    语句列表
      未知节点类型
    语句列表
      IF语句
        二元操作: 6
          标识符: temp_val
          实数: 55.000000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: temp_int
        整数: 1
    语句列表
      赋值: temp_val
        实数: 1.000000
    语句列表
      未知节点类型
    语句列表
      IF语句
        二元操作: 6
          标识符: temp_val
          实数: 120.000000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: temp_val
        实数: 0.000000
    语句列表
      未知节点类型
    语句列表
      IF语句
        二元操作: 6
          标识符: temp_val
          实数: 15.000000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 0.000000
    语句列表
      赋值: sqrt_result
        函数调用: SQRT(test_real1)
    语句列表
      IF语句
        二元操作: 6
          标识符: sqrt_result
          实数: 0.000000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 0.000000
    语句列表
      赋值: cbrt_result
        函数调用: CBRT(test_real1)
    语句列表
      IF语句
        二元操作: 6
          标识符: cbrt_result
          实数: 0.000000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: 1000.000000
    语句列表
      赋值: test_real2
        实数: 10.000000
    语句列表
      赋值: max_result
        函数调用: MAX_REAL(test_real1, test_real2)
    语句列表
      IF语句
        二元操作: 6
          标识符: max_result
          实数: 1000.000000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: test_real1
        实数: -100.000000
    语句列表
      赋值: abs_result
        函数调用: ABS_REAL(test_real1)
    语句列表
      IF语句
        二元操作: 6
          标识符: abs_result
          实数: 100.000000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: temp_val
        实数: 0.000000
    语句列表
      未知节点类型
    语句列表
      IF语句
        二元操作: 10
          标识符: temp_val
          实数: 200.000000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: test_counter
        二元操作: 1
          标识符: test_counter
          整数: 1
    语句列表
      赋值: filter_last
        实数: 0.000000
    语句列表
      未知节点类型
    语句列表
      赋值: filter_last
        二元操作: 2
          标识符: filter_last
          实数: 10.000000
    语句列表
      赋值: temp1
        函数调用: ABS_REAL(filter_last)
    语句列表
      IF语句
        二元操作: 8
          标识符: temp1
          实数: 1.000000
        语句列表
          赋值: pass_counter
            二元操作: 1
              标识符: pass_counter
              整数: 1
      ELSE
        语句列表
          赋值: fail_counter
            二元操作: 1
              标识符: fail_counter
              整数: 1
    语句列表
      赋值: temp_val
        标识符: pass_counter
    语句列表
      赋值: temp1
        标识符: test_counter
    语句列表
      赋值: success_rate
        二元操作: 3
          二元操作: 4
            标识符: temp_val
            标识符: temp1
          实数: 100.000000
    语句列表
      赋值: test_real1
        标识符: pass_counter
    语句列表
      赋值: test_real2
        标识符: fail_counter
    语句列表
      赋值: temp_val
        标识符: success_rate
==================

生成字节码...
初始化全局变量...
  创建新变量: test_int1
  初始化全局变量: test_int1 (类型: 4)
  创建新变量: setpoint
  初始化全局变量: setpoint (类型: 5)
  创建新变量: upper_limit
  初始化全局变量: upper_limit (类型: 5)
  创建新变量: dead_band
  初始化全局变量: dead_band (类型: 5)
  创建新变量: min_limit
  初始化全局变量: min_limit (类型: 5)
  创建新变量: val3
  初始化全局变量: val3 (类型: 5)
  创建新变量: filter_const
  初始化全局变量: filter_const (类型: 5)
  创建新变量: input4
  初始化全局变量: input4 (类型: 3)
  创建新变量: input1
  初始化全局变量: input1 (类型: 3)
  创建新变量: set_input
  初始化全局变量: set_input (类型: 3)
  创建新变量: ln_base
  初始化全局变量: ln_base (类型: 5)
  创建新变量: ln_2
  初始化全局变量: ln_2 (类型: 5)
  创建新变量: ln_10
  初始化全局变量: ln_10 (类型: 5)
  创建新变量: y
  初始化全局变量: y (类型: 5)
  创建新变量: x
  初始化全局变量: x (类型: 5)
  创建新变量: sign_val
  初始化全局变量: sign_val (类型: 4)
  创建新变量: precision
  初始化全局变量: precision (类型: 5)
  创建新变量: base
  初始化全局变量: base (类型: 5)
  创建新变量: val1
  初始化全局变量: val1 (类型: 4)
  创建新变量: input_val
  初始化全局变量: input_val (类型: 4)
  创建新变量: val2
  初始化全局变量: val2 (类型: 4)
  创建新变量: exponent
  初始化全局变量: exponent (类型: 4)
  创建新变量: result
  初始化全局变量: result (类型: 5)
  创建新变量: temp_exp
  初始化全局变量: temp_exp (类型: 4)
  创建新变量: i
  初始化全局变量: i (类型: 4)
  创建新变量: old_result
  初始化全局变量: old_result (类型: 5)
  创建新变量: iteration_count
  初始化全局变量: iteration_count (类型: 4)
  创建新变量: diff_val
  初始化全局变量: diff_val (类型: 5)
  创建新变量: abs_input
  初始化全局变量: abs_input (类型: 5)
  创建新变量: temp1
  初始化全局变量: temp1 (类型: 5)
  创建新变量: temp2
  初始化全局变量: temp2 (类型: 5)
  更新变量: diff_val
  初始化全局变量: diff_val (类型: 5)
  更新变量: result
  初始化全局变量: result (类型: 5)
  创建新变量: term
  初始化全局变量: term (类型: 5)
  创建新变量: factorial_val
  初始化全局变量: factorial_val (类型: 5)
  更新变量: i
  初始化全局变量: i (类型: 4)
  更新变量: term
  初始化全局变量: term (类型: 5)
  创建新变量: power
  初始化全局变量: power (类型: 5)
  更新变量: i
  初始化全局变量: i (类型: 4)
  更新变量: temp1
  初始化全局变量: temp1 (类型: 5)
  更新变量: temp2
  初始化全局变量: temp2 (类型: 5)
  创建新变量: ln_x
  初始化全局变量: ln_x (类型: 5)
  更新变量: ln_x
  初始化全局变量: ln_x (类型: 5)
  创建新变量: exp_val
  初始化全局变量: exp_val (类型: 5)
  创建新变量: reset_input
  初始化全局变量: reset_input (类型: 3)
  创建新变量: last_output
  初始化全局变量: last_output (类型: 3)
  创建新变量: output
  初始化全局变量: output (类型: 3)
  创建新变量: input2
  初始化全局变量: input2 (类型: 3)
  创建新变量: input3
  初始化全局变量: input3 (类型: 3)
  创建新变量: count
  初始化全局变量: count (类型: 4)
  更新变量: result
  初始化全局变量: result (类型: 3)
  更新变量: count
  初始化全局变量: count (类型: 4)
  更新变量: result
  初始化全局变量: result (类型: 3)
  更新变量: last_output
  初始化全局变量: last_output (类型: 5)
  更新变量: output
  初始化全局变量: output (类型: 5)
  更新变量: temp1
  初始化全局变量: temp1 (类型: 5)
  更新变量: temp2
  初始化全局变量: temp2 (类型: 5)
  创建新变量: val4
  初始化全局变量: val4 (类型: 5)
  创建新变量: val5
  初始化全局变量: val5 (类型: 5)
  创建新变量: sum
  初始化全局变量: sum (类型: 5)
  更新变量: result
  初始化全局变量: result (类型: 5)
  创建新变量: max_limit
  初始化全局变量: max_limit (类型: 5)
  更新变量: output
  初始化全局变量: output (类型: 5)
  更新变量: output
  初始化全局变量: output (类型: 5)
  更新变量: abs_input
  初始化全局变量: abs_input (类型: 5)
  创建新变量: lower_limit
  初始化全局变量: lower_limit (类型: 5)
  更新变量: last_output
  初始化全局变量: last_output (类型: 3)
  更新变量: output
  初始化全局变量: output (类型: 3)
  创建新变量: process_var
  初始化全局变量: process_var (类型: 5)
  创建新变量: kp
  初始化全局变量: kp (类型: 5)
  创建新变量: ki
  初始化全局变量: ki (类型: 5)
  创建新变量: kd
  初始化全局变量: kd (类型: 5)
  创建新变量: last_error
  初始化全局变量: last_error (类型: 5)
  创建新变量: integral
  初始化全局变量: integral (类型: 5)
  创建新变量: dt
  初始化全局变量: dt (类型: 5)
  创建新变量: error
  初始化全局变量: error (类型: 5)
  创建新变量: derivative
  初始化全局变量: derivative (类型: 5)
  更新变量: output
  初始化全局变量: output (类型: 5)
  创建新变量: prop_term
  初始化全局变量: prop_term (类型: 5)
  创建新变量: int_term
  初始化全局变量: int_term (类型: 5)
  创建新变量: der_term
  初始化全局变量: der_term (类型: 5)
  创建新变量: test_int2
  初始化全局变量: test_int2 (类型: 4)
  创建新变量: test_real1
  初始化全局变量: test_real1 (类型: 5)
  创建新变量: test_real2
  初始化全局变量: test_real2 (类型: 5)
  创建新变量: test_bool1
  初始化全局变量: test_bool1 (类型: 3)
  创建新变量: test_bool2
  初始化全局变量: test_bool2 (类型: 3)
  创建新变量: test_bool3
  初始化全局变量: test_bool3 (类型: 3)
  创建新变量: test_bool4
  初始化全局变量: test_bool4 (类型: 3)
  创建新变量: test_result_int
  初始化全局变量: test_result_int (类型: 4)
  创建新变量: test_result_real
  初始化全局变量: test_result_real (类型: 5)
  创建新变量: test_result_bool
  初始化全局变量: test_result_bool (类型: 3)
  创建新变量: PI_CONST
  初始化全局变量: PI_CONST (类型: 5)
  创建新变量: E_CONST
  初始化全局变量: E_CONST (类型: 5)
  创建新变量: test_counter
  初始化全局变量: test_counter (类型: 4)
  创建新变量: pass_counter
  初始化全局变量: pass_counter (类型: 4)
  创建新变量: fail_counter
  初始化全局变量: fail_counter (类型: 4)
  更新变量: i
  初始化全局变量: i (类型: 4)
  创建新变量: j
  初始化全局变量: j (类型: 4)
  创建新变量: temp_val
  初始化全局变量: temp_val (类型: 5)
  创建新变量: temp_int
  初始化全局变量: temp_int (类型: 4)
  创建新变量: temp_bool
  初始化全局变量: temp_bool (类型: 3)
  更新变量: temp1
  初始化全局变量: temp1 (类型: 5)
  更新变量: temp2
  初始化全局变量: temp2 (类型: 5)
  创建新变量: temp3
  初始化全局变量: temp3 (类型: 5)
  创建新变量: temp4
  初始化全局变量: temp4 (类型: 5)
  创建新变量: temp5
  初始化全局变量: temp5 (类型: 5)
  创建新变量: rs_output
  初始化全局变量: rs_output (类型: 3)
  创建新变量: sr_output
  初始化全局变量: sr_output (类型: 3)
  创建新变量: vote_2oo3_output
  初始化全局变量: vote_2oo3_output (类型: 3)
  创建新变量: vote_2oo4_output
  初始化全局变量: vote_2oo4_output (类型: 3)
  创建新变量: filter_output
  初始化全局变量: filter_output (类型: 5)
  创建新变量: avg_output
  初始化全局变量: avg_output (类型: 5)
  创建新变量: limit_output
  初始化全局变量: limit_output (类型: 5)
  创建新变量: dead_output
  初始化全局变量: dead_output (类型: 5)
  创建新变量: hyst_output
  初始化全局变量: hyst_output (类型: 3)
  创建新变量: pid_output
  初始化全局变量: pid_output (类型: 5)
  创建新变量: abs_result
  初始化全局变量: abs_result (类型: 5)
  创建新变量: max_result
  初始化全局变量: max_result (类型: 5)
  创建新变量: min_result
  初始化全局变量: min_result (类型: 5)
  创建新变量: sign_result
  初始化全局变量: sign_result (类型: 4)
  创建新变量: power_result
  初始化全局变量: power_result (类型: 5)
  创建新变量: sqrt_result
  初始化全局变量: sqrt_result (类型: 5)
  创建新变量: cbrt_result
  初始化全局变量: cbrt_result (类型: 5)
  创建新变量: exp_result
  初始化全局变量: exp_result (类型: 5)
  创建新变量: ln_result
  初始化全局变量: ln_result (类型: 5)
  创建新变量: log10_result
  初始化全局变量: log10_result (类型: 5)
  创建新变量: log2_result
  初始化全局变量: log2_result (类型: 5)
  创建新变量: filter_last
  初始化全局变量: filter_last (类型: 5)
  创建新变量: hyst_last
  初始化全局变量: hyst_last (类型: 3)
  创建新变量: pid_error_last
  初始化全局变量: pid_error_last (类型: 5)
  创建新变量: pid_integral
  初始化全局变量: pid_integral (类型: 5)
  创建新变量: success_rate
  初始化全局变量: success_rate (类型: 5)
编译函数列表...
处理第 1 个函数: ABS_INT
编译函数: ABS_INT (参数个数: 0, 地址: 0x0000)
  注册新函数: __func_ABS_INT__, 地址: 0x0000
  函数 __func_ABS_INT__ 注册完成
处理第 2 个函数: ABS_REAL
编译函数: ABS_REAL (参数个数: 0, 地址: 0x000c)
  注册新函数: __func_ABS_REAL__, 地址: 0x000c
  函数 __func_ABS_REAL__ 注册完成
处理第 3 个函数: MAX_INT
编译函数: MAX_INT (参数个数: 0, 地址: 0x0018)
  注册新函数: __func_MAX_INT__, 地址: 0x0018
  函数 __func_MAX_INT__ 注册完成
处理第 4 个函数: MIN_INT
编译函数: MIN_INT (参数个数: 0, 地址: 0x0023)
  注册新函数: __func_MIN_INT__, 地址: 0x0023
  函数 __func_MIN_INT__ 注册完成
处理第 5 个函数: MAX_REAL
编译函数: MAX_REAL (参数个数: 0, 地址: 0x002e)
  注册新函数: __func_MAX_REAL__, 地址: 0x002e
  函数 __func_MAX_REAL__ 注册完成
处理第 6 个函数: MIN_REAL
编译函数: MIN_REAL (参数个数: 0, 地址: 0x0039)
  注册新函数: __func_MIN_REAL__, 地址: 0x0039
  函数 __func_MIN_REAL__ 注册完成
处理第 7 个函数: SIGN
编译函数: SIGN (参数个数: 0, 地址: 0x0044)
  注册新函数: __func_SIGN__, 地址: 0x0044
  函数 __func_SIGN__ 注册完成
处理第 8 个函数: POWER_INT
编译函数: POWER_INT (参数个数: 0, 地址: 0x004f)
编译函数调用: ABS_INT
  生成指令: LOAD_VAR exponent
  生成调用指令: __func_ABS_INT__@0x0000 (参数个数: 1)
  注册新函数: __func_POWER_INT__, 地址: 0x004f
  函数 __func_POWER_INT__ 注册完成
处理第 9 个函数: SQRT
编译函数: SQRT (参数个数: 0, 地址: 0x0070)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR diff_val
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
  注册新函数: __func_SQRT__, 地址: 0x0070
  函数 __func_SQRT__ 注册完成
处理第 10 个函数: CBRT
编译函数: CBRT (参数个数: 0, 地址: 0x00b1)
编译函数调用: SIGN
  生成指令: LOAD_VAR input_val
  生成调用指令: __func_SIGN__@0x0044 (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR input_val
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR diff_val
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
  注册新函数: __func_CBRT__, 地址: 0x00b1
  函数 __func_CBRT__ 注册完成
处理第 11 个函数: EXP
编译函数: EXP (参数个数: 0, 地址: 0x00fe)
  注册新函数: __func_EXP__, 地址: 0x00fe
  函数 __func_EXP__ 注册完成
处理第 12 个函数: LN
编译函数: LN (参数个数: 0, 地址: 0x0121)
  注册新函数: __func_LN__, 地址: 0x0121
  函数 __func_LN__ 注册完成
处理第 13 个函数: LOG10
编译函数: LOG10 (参数个数: 0, 地址: 0x0168)
编译函数调用: LN
  生成指令: LOAD_VAR x
  生成调用指令: __func_LN__@0x0121 (参数个数: 1)
  注册新函数: __func_LOG10__, 地址: 0x0168
  函数 __func_LOG10__ 注册完成
处理第 14 个函数: LOG2
编译函数: LOG2 (参数个数: 0, 地址: 0x0174)
编译函数调用: LN
  生成指令: LOAD_VAR x
  生成调用指令: __func_LN__@0x0121 (参数个数: 1)
  注册新函数: __func_LOG2__, 地址: 0x0174
  函数 __func_LOG2__ 注册完成
处理第 15 个函数: POWER
编译函数: POWER (参数个数: 0, 地址: 0x0180)
编译函数调用: LN
  生成指令: LOAD_VAR base
  生成调用指令: __func_LN__@0x0121 (参数个数: 1)
编译函数调用: EXP
  生成指令: LOAD_VAR exp_val
  生成调用指令: __func_EXP__@0x00fe (参数个数: 1)
  注册新函数: __func_POWER__, 地址: 0x0180
  函数 __func_POWER__ 注册完成
处理第 16 个函数: RS_FLIP_FLOP
编译函数: RS_FLIP_FLOP (参数个数: 0, 地址: 0x0195)
  注册新函数: __func_RS_FLIP_FLOP__, 地址: 0x0195
  函数 __func_RS_FLIP_FLOP__ 注册完成
处理第 17 个函数: SR_FLIP_FLOP
编译函数: SR_FLIP_FLOP (参数个数: 0, 地址: 0x01a9)
  注册新函数: __func_SR_FLIP_FLOP__, 地址: 0x01a9
  函数 __func_SR_FLIP_FLOP__ 注册完成
处理第 18 个函数: VOTE_2oo3
编译函数: VOTE_2oo3 (参数个数: 0, 地址: 0x01bd)
  注册新函数: __func_VOTE_2oo3__, 地址: 0x01bd
  函数 __func_VOTE_2oo3__ 注册完成
处理第 19 个函数: VOTE_2oo4
编译函数: VOTE_2oo4 (参数个数: 0, 地址: 0x01e4)
  注册新函数: __func_VOTE_2oo4__, 地址: 0x01e4
  函数 __func_VOTE_2oo4__ 注册完成
处理第 20 个函数: LOW_PASS_FILTER
编译函数: LOW_PASS_FILTER (参数个数: 0, 地址: 0x0213)
  注册新函数: __func_LOW_PASS_FILTER__, 地址: 0x0213
  函数 __func_LOW_PASS_FILTER__ 注册完成
处理第 21 个函数: MOVING_AVG_5
编译函数: MOVING_AVG_5 (参数个数: 0, 地址: 0x0225)
  注册新函数: __func_MOVING_AVG_5__, 地址: 0x0225
  函数 __func_MOVING_AVG_5__ 注册完成
处理第 22 个函数: LIMITER
编译函数: LIMITER (参数个数: 0, 地址: 0x023d)
  注册新函数: __func_LIMITER__, 地址: 0x023d
  函数 __func_LIMITER__ 注册完成
处理第 23 个函数: DEAD_ZONE
编译函数: DEAD_ZONE (参数个数: 0, 地址: 0x024a)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR input_val
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
  注册新函数: __func_DEAD_ZONE__, 地址: 0x024a
  函数 __func_DEAD_ZONE__ 注册完成
处理第 24 个函数: HYSTERESIS
编译函数: HYSTERESIS (参数个数: 0, 地址: 0x0266)
  注册新函数: __func_HYSTERESIS__, 地址: 0x0266
  函数 __func_HYSTERESIS__ 注册完成
处理第 25 个函数: PID_SIMPLE
编译函数: PID_SIMPLE (参数个数: 0, 地址: 0x0281)
  注册新函数: __func_PID_SIMPLE__, 地址: 0x0281
  函数 __func_PID_SIMPLE__ 注册完成
总共处理了 25 个函数
主程序入口点: 0x02a9
编译主程序...
编译函数调用: ABS_INT
  生成指令: LOAD_VAR test_int1
  生成调用指令: __func_ABS_INT__@0x0000 (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: MAX_INT
  生成指令: LOAD_VAR test_int1
  生成指令: LOAD_VAR test_int2
  生成调用指令: __func_MAX_INT__@0x0018 (参数个数: 2)
编译函数调用: MIN_INT
  生成指令: LOAD_VAR test_int1
  生成指令: LOAD_VAR test_int2
  生成调用指令: __func_MIN_INT__@0x0023 (参数个数: 2)
编译函数调用: MAX_REAL
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR test_real2
  生成调用指令: __func_MAX_REAL__@0x002e (参数个数: 2)
编译函数调用: MIN_REAL
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR test_real2
  生成调用指令: __func_MIN_REAL__@0x0039 (参数个数: 2)
编译函数调用: SIGN
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_SIGN__@0x0044 (参数个数: 1)
编译函数调用: SIGN
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_SIGN__@0x0044 (参数个数: 1)
编译函数调用: SIGN
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_SIGN__@0x0044 (参数个数: 1)
编译函数调用: POWER_INT
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR test_int1
  生成调用指令: __func_POWER_INT__@0x004f (参数个数: 2)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR power_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: POWER_INT
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR test_int1
  生成调用指令: __func_POWER_INT__@0x004f (参数个数: 2)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR power_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: SQRT
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_SQRT__@0x0070 (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR sqrt_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: SQRT
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_SQRT__@0x0070 (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR sqrt_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: CBRT
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_CBRT__@0x00b1 (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR cbrt_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: CBRT
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_CBRT__@0x00b1 (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR cbrt_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: EXP
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_EXP__@0x00fe (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR exp_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: EXP
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_EXP__@0x00fe (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR exp_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: LN
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_LN__@0x0121 (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR ln_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: LN
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_LN__@0x0121 (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR ln_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: LOG10
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_LOG10__@0x0168 (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR log10_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: LOG10
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_LOG10__@0x0168 (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR log10_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: LOG2
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_LOG2__@0x0174 (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR log2_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: LOG2
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_LOG2__@0x0174 (参数个数: 1)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR log2_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: POWER
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR test_real2
  生成调用指令: __func_POWER__@0x0180 (参数个数: 2)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR power_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: POWER
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR test_real2
  生成调用指令: __func_POWER__@0x0180 (参数个数: 2)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR power_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: RS_FLIP_FLOP
  生成指令: LOAD_VAR test_bool1
  生成指令: LOAD_VAR test_bool2
  生成指令: LOAD_VAR temp_bool
  生成调用指令: __func_RS_FLIP_FLOP__@0x0195 (参数个数: 3)
编译函数调用: RS_FLIP_FLOP
  生成指令: LOAD_VAR test_bool1
  生成指令: LOAD_VAR test_bool2
  生成指令: LOAD_VAR temp_bool
  生成调用指令: __func_RS_FLIP_FLOP__@0x0195 (参数个数: 3)
编译函数调用: RS_FLIP_FLOP
  生成指令: LOAD_VAR test_bool1
  生成指令: LOAD_VAR test_bool2
  生成指令: LOAD_VAR temp_bool
  生成调用指令: __func_RS_FLIP_FLOP__@0x0195 (参数个数: 3)
编译函数调用: SR_FLIP_FLOP
  生成指令: LOAD_VAR test_bool1
  生成指令: LOAD_VAR test_bool2
  生成指令: LOAD_VAR temp_bool
  生成调用指令: __func_SR_FLIP_FLOP__@0x01a9 (参数个数: 3)
编译函数调用: SR_FLIP_FLOP
  生成指令: LOAD_VAR test_bool1
  生成指令: LOAD_VAR test_bool2
  生成指令: LOAD_VAR temp_bool
  生成调用指令: __func_SR_FLIP_FLOP__@0x01a9 (参数个数: 3)
编译函数调用: VOTE_2oo3
  生成指令: LOAD_VAR test_bool1
  生成指令: LOAD_VAR test_bool2
  生成指令: LOAD_VAR test_bool3
  生成调用指令: __func_VOTE_2oo3__@0x01bd (参数个数: 3)
编译函数调用: VOTE_2oo3
  生成指令: LOAD_VAR test_bool1
  生成指令: LOAD_VAR test_bool2
  生成指令: LOAD_VAR test_bool3
  生成调用指令: __func_VOTE_2oo3__@0x01bd (参数个数: 3)
编译函数调用: VOTE_2oo3
  生成指令: LOAD_VAR test_bool1
  生成指令: LOAD_VAR test_bool2
  生成指令: LOAD_VAR test_bool3
  生成调用指令: __func_VOTE_2oo3__@0x01bd (参数个数: 3)
编译函数调用: VOTE_2oo4
  生成指令: LOAD_VAR test_bool1
  生成指令: LOAD_VAR test_bool2
  生成指令: LOAD_VAR test_bool3
  生成指令: LOAD_VAR test_bool4
  生成调用指令: __func_VOTE_2oo4__@0x01e4 (参数个数: 4)
编译函数调用: VOTE_2oo4
  生成指令: LOAD_VAR test_bool1
  生成指令: LOAD_VAR test_bool2
  生成指令: LOAD_VAR test_bool3
  生成指令: LOAD_VAR test_bool4
  生成调用指令: __func_VOTE_2oo4__@0x01e4 (参数个数: 4)
编译函数调用: VOTE_2oo4
  生成指令: LOAD_VAR test_bool1
  生成指令: LOAD_VAR test_bool2
  生成指令: LOAD_VAR test_bool3
  生成指令: LOAD_VAR test_bool4
  生成调用指令: __func_VOTE_2oo4__@0x01e4 (参数个数: 4)
编译函数调用: LOW_PASS_FILTER
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR test_real2
  生成指令: LOAD_VAR filter_last
  生成调用指令: __func_LOW_PASS_FILTER__@0x0213 (参数个数: 3)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR filter_output
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: MOVING_AVG_5
  生成指令: LOAD_VAR temp1
  生成指令: LOAD_VAR temp2
  生成指令: LOAD_VAR temp3
  生成指令: LOAD_VAR temp4
  生成指令: LOAD_VAR temp5
  生成调用指令: __func_MOVING_AVG_5__@0x0225 (参数个数: 5)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR avg_output
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: MOVING_AVG_5
  生成指令: LOAD_VAR temp1
  生成指令: LOAD_VAR temp2
  生成指令: LOAD_VAR temp3
  生成指令: LOAD_VAR temp4
  生成指令: LOAD_VAR temp5
  生成调用指令: __func_MOVING_AVG_5__@0x0225 (参数个数: 5)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR avg_output
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: LIMITER
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR temp1
  生成指令: LOAD_VAR temp2
  生成调用指令: __func_LIMITER__@0x023d (参数个数: 3)
编译函数调用: LIMITER
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR temp1
  生成指令: LOAD_VAR temp2
  生成调用指令: __func_LIMITER__@0x023d (参数个数: 3)
编译函数调用: LIMITER
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR temp1
  生成指令: LOAD_VAR temp2
  生成调用指令: __func_LIMITER__@0x023d (参数个数: 3)
编译函数调用: DEAD_ZONE
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR test_real2
  生成调用指令: __func_DEAD_ZONE__@0x024a (参数个数: 2)
编译函数调用: DEAD_ZONE
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR test_real2
  生成调用指令: __func_DEAD_ZONE__@0x024a (参数个数: 2)
编译函数调用: DEAD_ZONE
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR test_real2
  生成调用指令: __func_DEAD_ZONE__@0x024a (参数个数: 2)
编译函数调用: HYSTERESIS
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR temp1
  生成指令: LOAD_VAR temp2
  生成指令: LOAD_VAR hyst_last
  生成调用指令: __func_HYSTERESIS__@0x0266 (参数个数: 4)
编译函数调用: HYSTERESIS
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR temp1
  生成指令: LOAD_VAR temp2
  生成指令: LOAD_VAR hyst_last
  生成调用指令: __func_HYSTERESIS__@0x0266 (参数个数: 4)
编译函数调用: HYSTERESIS
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR temp1
  生成指令: LOAD_VAR temp2
  生成指令: LOAD_VAR hyst_last
  生成调用指令: __func_HYSTERESIS__@0x0266 (参数个数: 4)
编译函数调用: LOW_PASS_FILTER
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR test_real2
  生成指令: LOAD_VAR filter_last
  生成调用指令: __func_LOW_PASS_FILTER__@0x0213 (参数个数: 3)
编译函数调用: LIMITER
  生成指令: LOAD_VAR temp_val
  生成指令: LOAD_VAR temp1
  生成指令: LOAD_VAR temp2
  生成调用指令: __func_LIMITER__@0x023d (参数个数: 3)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR limit_output
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: SQRT
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_SQRT__@0x0070 (参数个数: 1)
编译函数调用: POWER_INT
  生成指令: LOAD_VAR sqrt_result
  生成指令: LOAD_VAR test_int1
  生成调用指令: __func_POWER_INT__@0x004f (参数个数: 2)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR power_result
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: VOTE_2oo3
  生成指令: LOAD_VAR test_bool1
  生成指令: LOAD_VAR test_bool2
  生成指令: LOAD_VAR test_bool3
  生成调用指令: __func_VOTE_2oo3__@0x01bd (参数个数: 3)
编译函数调用: LOW_PASS_FILTER
  生成指令: LOAD_VAR temp_val
  生成指令: LOAD_VAR temp2
  生成指令: LOAD_VAR temp1
  生成调用指令: __func_LOW_PASS_FILTER__@0x0213 (参数个数: 3)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR filter_output
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: SQRT
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_SQRT__@0x0070 (参数个数: 1)
编译函数调用: CBRT
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_CBRT__@0x00b1 (参数个数: 1)
编译函数调用: MAX_REAL
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR test_real2
  生成调用指令: __func_MAX_REAL__@0x002e (参数个数: 2)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
编译函数调用: SQRT
  生成指令: LOAD_VAR test_real1
  生成调用指令: __func_SQRT__@0x0070 (参数个数: 1)
编译函数调用: LOW_PASS_FILTER
  生成指令: LOAD_VAR test_real1
  生成指令: LOAD_VAR test_real2
  生成指令: LOAD_VAR filter_last
  生成调用指令: __func_LOW_PASS_FILTER__@0x0213 (参数个数: 3)
编译函数调用: ABS_REAL
  生成指令: LOAD_VAR filter_last
  生成调用指令: __func_ABS_REAL__@0x000c (参数个数: 1)
字节码生成完成！

=== 生成的字节码 ===
=== 字节码 ===
0x0000: LOAD_VAR input_val
0x0001: LOAD_INT 0
0x0002: GE
0x0003: JZ 0x0007
0x0004: LOAD_VAR input_val
0x0005: STORE_VAR ABS_INT
0x0006: JMP 0x000a
0x0007: LOAD_VAR input_val
0x0008: NEG
0x0009: STORE_VAR ABS_INT
0x000a: LOAD_INT 0
0x000b: RET
0x000c: LOAD_VAR input_val
0x000d: LOAD_REAL 0.000000
0x000e: GE
0x000f: JZ 0x0013
0x0010: LOAD_VAR input_val
0x0011: STORE_VAR ABS_REAL
0x0012: JMP 0x0016
0x0013: LOAD_VAR input_val
0x0014: NEG
0x0015: STORE_VAR ABS_REAL
0x0016: LOAD_INT 0
0x0017: RET
0x0018: LOAD_VAR val1
0x0019: LOAD_VAR val2
0x001a: GT
0x001b: JZ 0x001f
0x001c: LOAD_VAR val1
0x001d: STORE_VAR MAX_INT
0x001e: JMP 0x0021
0x001f: LOAD_VAR val2
0x0020: STORE_VAR MAX_INT
0x0021: LOAD_INT 0
0x0022: RET
0x0023: LOAD_VAR val1
0x0024: LOAD_VAR val2
0x0025: LT
0x0026: JZ 0x002a
0x0027: LOAD_VAR val1
0x0028: STORE_VAR MIN_INT
0x0029: JMP 0x002c
0x002a: LOAD_VAR val2
0x002b: STORE_VAR MIN_INT
0x002c: LOAD_INT 0
0x002d: RET
0x002e: LOAD_VAR val1
0x002f: LOAD_VAR val2
0x0030: GT
0x0031: JZ 0x0035
0x0032: LOAD_VAR val1
0x0033: STORE_VAR MAX_REAL
0x0034: JMP 0x0037
0x0035: LOAD_VAR val2
0x0036: STORE_VAR MAX_REAL
0x0037: LOAD_INT 0
0x0038: RET
0x0039: LOAD_VAR val1
0x003a: LOAD_VAR val2
0x003b: LT
0x003c: JZ 0x0040
0x003d: LOAD_VAR val1
0x003e: STORE_VAR MIN_REAL
0x003f: JMP 0x0042
0x0040: LOAD_VAR val2
0x0041: STORE_VAR MIN_REAL
0x0042: LOAD_INT 0
0x0043: RET
0x0044: LOAD_VAR input_val
0x0045: LOAD_REAL 0.000000
0x0046: GT
0x0047: JZ 0x004b
0x0048: LOAD_INT 1
0x0049: STORE_VAR SIGN
0x004a: JMP 0x004d
0x004b: LOAD_INT 0
0x004c: STORE_VAR SIGN
0x004d: LOAD_INT 0
0x004e: RET
0x004f: LOAD_REAL 1.000000
0x0050: STORE_VAR result
0x0051: LOAD_VAR exponent
0x0052: PUSH_ARGS 1
0x0053: CALL 0x0000
0x0054: STORE_VAR temp_exp
0x0055: LOAD_INT 1
0x0056: STORE_VAR i
0x0057: LOAD_VAR i
0x0058: LOAD_VAR temp_exp
0x0059: LE
0x005a: JZ 0x0064
0x005b: LOAD_VAR result
0x005c: LOAD_VAR base
0x005d: MUL
0x005e: STORE_VAR result
0x005f: LOAD_VAR i
0x0060: LOAD_INT 1
0x0061: ADD
0x0062: STORE_VAR i
0x0063: JMP 0x0057
0x0064: LOAD_VAR exponent
0x0065: LOAD_INT 0
0x0066: LT
0x0067: JZ 0x006c
0x0068: LOAD_REAL 1.000000
0x0069: LOAD_VAR result
0x006a: DIV
0x006b: STORE_VAR result
0x006c: LOAD_VAR result
0x006d: STORE_VAR POWER_INT
0x006e: LOAD_INT 0
0x006f: RET
0x0070: LOAD_VAR input_val
0x0071: LOAD_REAL 0.000000
0x0072: LT
0x0073: JZ 0x0078
0x0074: LOAD_REAL 0.000000
0x0075: STORE_VAR SQRT
0x0076: LOAD_INT 0
0x0077: RET
0x0078: LOAD_VAR input_val
0x0079: LOAD_REAL 0.000000
0x007a: EQ
0x007b: JZ 0x0080
0x007c: LOAD_REAL 0.000000
0x007d: STORE_VAR SQRT
0x007e: LOAD_INT 0
0x007f: RET
0x0080: LOAD_VAR input_val
0x0081: LOAD_REAL 2.000000
0x0082: DIV
0x0083: STORE_VAR result
0x0084: LOAD_REAL 0.000001
0x0085: STORE_VAR precision
0x0086: LOAD_INT 0
0x0087: STORE_VAR iteration_count
0x0088: LOAD_VAR iteration_count
0x0089: LOAD_INT 100
0x008a: LT
0x008b: JZ 0x00ad
0x008c: LOAD_VAR result
0x008d: STORE_VAR old_result
0x008e: LOAD_VAR result
0x008f: LOAD_VAR input_val
0x0090: LOAD_VAR result
0x0091: DIV
0x0092: ADD
0x0093: STORE_VAR result
0x0094: LOAD_VAR result
0x0095: LOAD_REAL 2.000000
0x0096: DIV
0x0097: STORE_VAR result
0x0098: LOAD_VAR result
0x0099: LOAD_VAR old_result
0x009a: SUB
0x009b: STORE_VAR diff_val
0x009c: LOAD_VAR diff_val
0x009d: PUSH_ARGS 1
0x009e: CALL 0x000c
0x009f: STORE_VAR diff_val
0x00a0: LOAD_VAR diff_val
0x00a1: LOAD_VAR precision
0x00a2: LT
0x00a3: JZ 0x00a8
0x00a4: LOAD_VAR result
0x00a5: STORE_VAR SQRT
0x00a6: LOAD_INT 0
0x00a7: RET
0x00a8: LOAD_VAR iteration_count
0x00a9: LOAD_INT 1
0x00aa: ADD
0x00ab: STORE_VAR iteration_count
0x00ac: JMP 0x0088
0x00ad: LOAD_VAR result
0x00ae: STORE_VAR SQRT
0x00af: LOAD_INT 0
0x00b0: RET
0x00b1: LOAD_VAR input_val
0x00b2: PUSH_ARGS 1
0x00b3: CALL 0x0044
0x00b4: STORE_VAR sign_val
0x00b5: LOAD_VAR input_val
0x00b6: PUSH_ARGS 1
0x00b7: CALL 0x000c
0x00b8: STORE_VAR abs_input
0x00b9: LOAD_VAR abs_input
0x00ba: LOAD_REAL 0.000000
0x00bb: EQ
0x00bc: JZ 0x00c1
0x00bd: LOAD_REAL 0.000000
0x00be: STORE_VAR CBRT
0x00bf: LOAD_INT 0
0x00c0: RET
0x00c1: LOAD_VAR abs_input
0x00c2: LOAD_REAL 3.000000
0x00c3: DIV
0x00c4: STORE_VAR result
0x00c5: LOAD_REAL 0.000001
0x00c6: STORE_VAR precision
0x00c7: LOAD_INT 0
0x00c8: STORE_VAR iteration_count
0x00c9: LOAD_VAR iteration_count
0x00ca: LOAD_INT 100
0x00cb: LT
0x00cc: JZ 0x00f8
0x00cd: LOAD_VAR result
0x00ce: STORE_VAR old_result
0x00cf: LOAD_VAR result
0x00d0: LOAD_VAR result
0x00d1: MUL
0x00d2: STORE_VAR temp1
0x00d3: LOAD_VAR abs_input
0x00d4: LOAD_VAR temp1
0x00d5: DIV
0x00d6: STORE_VAR temp2
0x00d7: LOAD_REAL 2.000000
0x00d8: LOAD_VAR result
0x00d9: MUL
0x00da: LOAD_VAR temp2
0x00db: ADD
0x00dc: STORE_VAR result
0x00dd: LOAD_VAR result
0x00de: LOAD_REAL 3.000000
0x00df: DIV
0x00e0: STORE_VAR result
0x00e1: LOAD_VAR result
0x00e2: LOAD_VAR old_result
0x00e3: SUB
0x00e4: STORE_VAR diff_val
0x00e5: LOAD_VAR diff_val
0x00e6: PUSH_ARGS 1
0x00e7: CALL 0x000c
0x00e8: STORE_VAR diff_val
0x00e9: LOAD_VAR diff_val
0x00ea: LOAD_VAR precision
0x00eb: LT
0x00ec: JZ 0x00f3
0x00ed: LOAD_VAR result
0x00ee: LOAD_VAR sign_val
0x00ef: MUL
0x00f0: STORE_VAR CBRT
0x00f1: LOAD_INT 0
0x00f2: RET
0x00f3: LOAD_VAR iteration_count
0x00f4: LOAD_INT 1
0x00f5: ADD
0x00f6: STORE_VAR iteration_count
0x00f7: JMP 0x00c9
0x00f8: LOAD_VAR result
0x00f9: LOAD_VAR sign_val
0x00fa: MUL
0x00fb: STORE_VAR CBRT
0x00fc: LOAD_INT 0
0x00fd: RET
0x00fe: LOAD_REAL 1.000000
0x00ff: STORE_VAR result
0x0100: LOAD_REAL 1.000000
0x0101: STORE_VAR term
0x0102: LOAD_REAL 1.000000
0x0103: STORE_VAR factorial_val
0x0104: LOAD_INT 1
0x0105: STORE_VAR i
0x0106: LOAD_VAR i
0x0107: LOAD_INT 20
0x0108: LE
0x0109: JZ 0x011d
0x010a: LOAD_VAR factorial_val
0x010b: LOAD_VAR i
0x010c: MUL
0x010d: STORE_VAR factorial_val
0x010e: LOAD_VAR term
0x010f: LOAD_VAR x
0x0110: MUL
0x0111: STORE_VAR term
0x0112: LOAD_VAR result
0x0113: LOAD_VAR term
0x0114: LOAD_VAR factorial_val
0x0115: DIV
0x0116: ADD
0x0117: STORE_VAR result
0x0118: LOAD_VAR i
0x0119: LOAD_INT 1
0x011a: ADD
0x011b: STORE_VAR i
0x011c: JMP 0x0106
0x011d: LOAD_VAR result
0x011e: STORE_VAR EXP
0x011f: LOAD_INT 0
0x0120: RET
0x0121: LOAD_VAR x
0x0122: LOAD_REAL 0.000000
0x0123: LE
0x0124: JZ 0x0129
0x0125: LOAD_REAL 0.000000
0x0126: STORE_VAR LN
0x0127: LOAD_INT 0
0x0128: RET
0x0129: LOAD_VAR x
0x012a: LOAD_REAL 1.000000
0x012b: EQ
0x012c: JZ 0x0131
0x012d: LOAD_REAL 0.000000
0x012e: STORE_VAR LN
0x012f: LOAD_INT 0
0x0130: RET
0x0131: LOAD_VAR x
0x0132: LOAD_REAL 1.000000
0x0133: SUB
0x0134: STORE_VAR temp1
0x0135: LOAD_VAR x
0x0136: LOAD_REAL 1.000000
0x0137: ADD
0x0138: STORE_VAR temp2
0x0139: LOAD_VAR temp1
0x013a: LOAD_VAR temp2
0x013b: DIV
0x013c: STORE_VAR y
0x013d: LOAD_REAL 0.000000
0x013e: STORE_VAR result
0x013f: LOAD_VAR y
0x0140: STORE_VAR term
0x0141: LOAD_VAR y
0x0142: STORE_VAR power
0x0143: LOAD_INT 1
0x0144: STORE_VAR i
0x0145: LOAD_VAR i
0x0146: LOAD_INT 20
0x0147: LE
0x0148: JZ 0x0162
0x0149: LOAD_INT 2
0x014a: LOAD_VAR i
0x014b: MUL
0x014c: LOAD_INT 1
0x014d: SUB
0x014e: STORE_VAR temp1
0x014f: LOAD_VAR result
0x0150: LOAD_VAR term
0x0151: LOAD_VAR temp1
0x0152: DIV
0x0153: ADD
0x0154: STORE_VAR result
0x0155: LOAD_VAR power
0x0156: LOAD_VAR y
0x0157: MUL
0x0158: LOAD_VAR y
0x0159: MUL
0x015a: STORE_VAR power
0x015b: LOAD_VAR power
0x015c: STORE_VAR term
0x015d: LOAD_VAR i
0x015e: LOAD_INT 1
0x015f: ADD
0x0160: STORE_VAR i
0x0161: JMP 0x0145
0x0162: LOAD_REAL 2.000000
0x0163: LOAD_VAR result
0x0164: MUL
0x0165: STORE_VAR LN
0x0166: LOAD_INT 0
0x0167: RET
0x0168: LOAD_REAL 2.302585
0x0169: STORE_VAR ln_10
0x016a: LOAD_VAR x
0x016b: PUSH_ARGS 1
0x016c: CALL 0x0121
0x016d: STORE_VAR ln_x
0x016e: LOAD_VAR ln_x
0x016f: LOAD_VAR ln_10
0x0170: DIV
0x0171: STORE_VAR LOG10
0x0172: LOAD_INT 0
0x0173: RET
0x0174: LOAD_REAL 0.693147
0x0175: STORE_VAR ln_2
0x0176: LOAD_VAR x
0x0177: PUSH_ARGS 1
0x0178: CALL 0x0121
0x0179: STORE_VAR ln_x
0x017a: LOAD_VAR ln_x
0x017b: LOAD_VAR ln_2
0x017c: DIV
0x017d: STORE_VAR LOG2
0x017e: LOAD_INT 0
0x017f: RET
0x0180: LOAD_VAR base
0x0181: LOAD_REAL 0.000000
0x0182: LE
0x0183: JZ 0x0187
0x0184: LOAD_REAL 0.000000
0x0185: STORE_VAR POWER
0x0186: JMP 0x0193
0x0187: LOAD_VAR base
0x0188: PUSH_ARGS 1
0x0189: CALL 0x0121
0x018a: STORE_VAR ln_base
0x018b: LOAD_VAR exponent
0x018c: LOAD_VAR ln_base
0x018d: MUL
0x018e: STORE_VAR exp_val
0x018f: LOAD_VAR exp_val
0x0190: PUSH_ARGS 1
0x0191: CALL 0x00fe
0x0192: STORE_VAR POWER
0x0193: LOAD_INT 0
0x0194: RET
0x0195: LOAD_VAR set_input
0x0196: LOAD_BOOL TRUE
0x0197: EQ
0x0198: JZ 0x01a3
0x0199: LOAD_VAR reset_input
0x019a: LOAD_BOOL FALSE
0x019b: EQ
0x019c: JZ 0x01a0
0x019d: LOAD_BOOL TRUE
0x019e: STORE_VAR output
0x019f: JMP 0x01a2
0x01a0: LOAD_BOOL FALSE
0x01a1: STORE_VAR output
0x01a2: JMP 0x01a5
0x01a3: LOAD_VAR last_output
0x01a4: STORE_VAR output
0x01a5: LOAD_VAR output
0x01a6: STORE_VAR RS_FLIP_FLOP
0x01a7: LOAD_INT 0
0x01a8: RET
0x01a9: LOAD_VAR reset_input
0x01aa: LOAD_BOOL TRUE
0x01ab: EQ
0x01ac: JZ 0x01b7
0x01ad: LOAD_VAR set_input
0x01ae: LOAD_BOOL FALSE
0x01af: EQ
0x01b0: JZ 0x01b4
0x01b1: LOAD_BOOL FALSE
0x01b2: STORE_VAR output
0x01b3: JMP 0x01b6
0x01b4: LOAD_BOOL TRUE
0x01b5: STORE_VAR output
0x01b6: JMP 0x01b9
0x01b7: LOAD_VAR last_output
0x01b8: STORE_VAR output
0x01b9: LOAD_VAR output
0x01ba: STORE_VAR SR_FLIP_FLOP
0x01bb: LOAD_INT 0
0x01bc: RET
0x01bd: LOAD_INT 0
0x01be: STORE_VAR count
0x01bf: LOAD_VAR input1
0x01c0: LOAD_BOOL TRUE
0x01c1: EQ
0x01c2: JZ 0x01c7
0x01c3: LOAD_VAR count
0x01c4: LOAD_INT 1
0x01c5: ADD
0x01c6: STORE_VAR count
0x01c7: LOAD_VAR input2
0x01c8: LOAD_BOOL TRUE
0x01c9: EQ
0x01ca: JZ 0x01cf
0x01cb: LOAD_VAR count
0x01cc: LOAD_INT 1
0x01cd: ADD
0x01ce: STORE_VAR count
0x01cf: LOAD_VAR input3
0x01d0: LOAD_BOOL TRUE
0x01d1: EQ
0x01d2: JZ 0x01d7
0x01d3: LOAD_VAR count
0x01d4: LOAD_INT 1
0x01d5: ADD
0x01d6: STORE_VAR count
0x01d7: LOAD_VAR count
0x01d8: LOAD_INT 2
0x01d9: GE
0x01da: JZ 0x01de
0x01db: LOAD_BOOL TRUE
0x01dc: STORE_VAR result
0x01dd: JMP 0x01e0
0x01de: LOAD_BOOL FALSE
0x01df: STORE_VAR result
0x01e0: LOAD_VAR result
0x01e1: STORE_VAR VOTE_2oo3
0x01e2: LOAD_INT 0
0x01e3: RET
0x01e4: LOAD_INT 0
0x01e5: STORE_VAR count
0x01e6: LOAD_VAR input1
0x01e7: LOAD_BOOL TRUE
0x01e8: EQ
0x01e9: JZ 0x01ee
0x01ea: LOAD_VAR count
0x01eb: LOAD_INT 1
0x01ec: ADD
0x01ed: STORE_VAR count
0x01ee: LOAD_VAR input2
0x01ef: LOAD_BOOL TRUE
0x01f0: EQ
0x01f1: JZ 0x01f6
0x01f2: LOAD_VAR count
0x01f3: LOAD_INT 1
0x01f4: ADD
0x01f5: STORE_VAR count
0x01f6: LOAD_VAR input3
0x01f7: LOAD_BOOL TRUE
0x01f8: EQ
0x01f9: JZ 0x01fe
0x01fa: LOAD_VAR count
0x01fb: LOAD_INT 1
0x01fc: ADD
0x01fd: STORE_VAR count
0x01fe: LOAD_VAR input4
0x01ff: LOAD_BOOL TRUE
0x0200: EQ
0x0201: JZ 0x0206
0x0202: LOAD_VAR count
0x0203: LOAD_INT 1
0x0204: ADD
0x0205: STORE_VAR count
0x0206: LOAD_VAR count
0x0207: LOAD_INT 2
0x0208: GE
0x0209: JZ 0x020d
0x020a: LOAD_BOOL TRUE
0x020b: STORE_VAR result
0x020c: JMP 0x020f
0x020d: LOAD_BOOL FALSE
0x020e: STORE_VAR result
0x020f: LOAD_VAR result
0x0210: STORE_VAR VOTE_2oo4
0x0211: LOAD_INT 0
0x0212: RET
0x0213: LOAD_REAL 1.000000
0x0214: LOAD_VAR filter_const
0x0215: SUB
0x0216: STORE_VAR temp1
0x0217: LOAD_VAR temp1
0x0218: LOAD_VAR last_output
0x0219: MUL
0x021a: STORE_VAR temp2
0x021b: LOAD_VAR filter_const
0x021c: LOAD_VAR input_val
0x021d: MUL
0x021e: LOAD_VAR temp2
0x021f: ADD
0x0220: STORE_VAR output
0x0221: LOAD_VAR output
0x0222: STORE_VAR LOW_PASS_FILTER
0x0223: LOAD_INT 0
0x0224: RET
0x0225: LOAD_VAR val1
0x0226: LOAD_VAR val2
0x0227: ADD
0x0228: STORE_VAR sum
0x0229: LOAD_VAR sum
0x022a: LOAD_VAR val3
0x022b: ADD
0x022c: STORE_VAR sum
0x022d: LOAD_VAR sum
0x022e: LOAD_VAR val4
0x022f: ADD
0x0230: STORE_VAR sum
0x0231: LOAD_VAR sum
0x0232: LOAD_VAR val5
0x0233: ADD
0x0234: STORE_VAR sum
0x0235: LOAD_VAR sum
0x0236: LOAD_REAL 5.000000
0x0237: DIV
0x0238: STORE_VAR result
0x0239: LOAD_VAR result
0x023a: STORE_VAR MOVING_AVG_5
0x023b: LOAD_INT 0
0x023c: RET
0x023d: LOAD_VAR input_val
0x023e: LOAD_VAR min_limit
0x023f: LT
0x0240: JZ 0x0244
0x0241: LOAD_VAR min_limit
0x0242: STORE_VAR output
0x0243: JMP 0x0246
0x0244: LOAD_VAR input_val
0x0245: STORE_VAR output
0x0246: LOAD_VAR output
0x0247: STORE_VAR LIMITER
0x0248: LOAD_INT 0
0x0249: RET
0x024a: LOAD_VAR input_val
0x024b: PUSH_ARGS 1
0x024c: CALL 0x000c
0x024d: STORE_VAR abs_input
0x024e: LOAD_VAR abs_input
0x024f: LOAD_VAR dead_band
0x0250: LE
0x0251: JZ 0x0255
0x0252: LOAD_REAL 0.000000
0x0253: STORE_VAR output
0x0254: JMP 0x0262
0x0255: LOAD_VAR input_val
0x0256: LOAD_REAL 0.000000
0x0257: GT
0x0258: JZ 0x025e
0x0259: LOAD_VAR input_val
0x025a: LOAD_VAR dead_band
0x025b: SUB
0x025c: STORE_VAR output
0x025d: JMP 0x0262
0x025e: LOAD_VAR input_val
0x025f: LOAD_VAR dead_band
0x0260: ADD
0x0261: STORE_VAR output
0x0262: LOAD_VAR output
0x0263: STORE_VAR DEAD_ZONE
0x0264: LOAD_INT 0
0x0265: RET
0x0266: LOAD_VAR last_output
0x0267: LOAD_BOOL FALSE
0x0268: EQ
0x0269: JZ 0x0274
0x026a: LOAD_VAR input_val
0x026b: LOAD_VAR upper_limit
0x026c: GE
0x026d: JZ 0x0271
0x026e: LOAD_BOOL TRUE
0x026f: STORE_VAR output
0x0270: JMP 0x0273
0x0271: LOAD_BOOL FALSE
0x0272: STORE_VAR output
0x0273: JMP 0x027d
0x0274: LOAD_VAR input_val
0x0275: LOAD_VAR lower_limit
0x0276: LE
0x0277: JZ 0x027b
0x0278: LOAD_BOOL FALSE
0x0279: STORE_VAR output
0x027a: JMP 0x027d
0x027b: LOAD_BOOL TRUE
0x027c: STORE_VAR output
0x027d: LOAD_VAR output
0x027e: STORE_VAR HYSTERESIS
0x027f: LOAD_INT 0
0x0280: RET
0x0281: LOAD_VAR setpoint
0x0282: LOAD_VAR process_var
0x0283: SUB
0x0284: STORE_VAR error
0x0285: LOAD_VAR kp
0x0286: LOAD_VAR error
0x0287: MUL
0x0288: STORE_VAR prop_term
0x0289: LOAD_VAR integral
0x028a: LOAD_VAR error
0x028b: LOAD_VAR dt
0x028c: MUL
0x028d: ADD
0x028e: STORE_VAR integral
0x028f: LOAD_VAR ki
0x0290: LOAD_VAR integral
0x0291: MUL
0x0292: STORE_VAR int_term
0x0293: LOAD_VAR error
0x0294: LOAD_VAR last_error
0x0295: SUB
0x0296: STORE_VAR derivative
0x0297: LOAD_VAR derivative
0x0298: LOAD_VAR dt
0x0299: DIV
0x029a: STORE_VAR derivative
0x029b: LOAD_VAR kd
0x029c: LOAD_VAR derivative
0x029d: MUL
0x029e: STORE_VAR der_term
0x029f: LOAD_VAR prop_term
0x02a0: LOAD_VAR int_term
0x02a1: ADD
0x02a2: STORE_VAR output
0x02a3: LOAD_VAR output
0x02a4: LOAD_VAR der_term
0x02a5: ADD
0x02a6: STORE_VAR output
0x02a7: LOAD_VAR output
0x02a8: RET
0x02a9: LOAD_INT 0
0x02aa: STORE_VAR test_counter
0x02ab: LOAD_INT 0
0x02ac: STORE_VAR pass_counter
0x02ad: LOAD_INT 0
0x02ae: STORE_VAR fail_counter
0x02af: LOAD_VAR test_counter
0x02b0: LOAD_INT 1
0x02b1: ADD
0x02b2: STORE_VAR test_counter
0x02b3: LOAD_INT -25
0x02b4: STORE_VAR test_int1
0x02b5: LOAD_VAR test_int1
0x02b6: PUSH_ARGS 1
0x02b7: CALL 0x0000
0x02b8: STORE_VAR test_result_int
0x02b9: LOAD_VAR test_result_int
0x02ba: LOAD_INT 25
0x02bb: EQ
0x02bc: JZ 0x02c2
0x02bd: LOAD_VAR pass_counter
0x02be: LOAD_INT 1
0x02bf: ADD
0x02c0: STORE_VAR pass_counter
0x02c1: JMP 0x02c6
0x02c2: LOAD_VAR fail_counter
0x02c3: LOAD_INT 1
0x02c4: ADD
0x02c5: STORE_VAR fail_counter
0x02c6: LOAD_VAR test_counter
0x02c7: LOAD_INT 1
0x02c8: ADD
0x02c9: STORE_VAR test_counter
0x02ca: LOAD_REAL -15.700000
0x02cb: STORE_VAR test_real1
0x02cc: LOAD_VAR test_real1
0x02cd: PUSH_ARGS 1
0x02ce: CALL 0x000c
0x02cf: STORE_VAR abs_result
0x02d0: LOAD_VAR abs_result
0x02d1: LOAD_REAL 15.700000
0x02d2: EQ
0x02d3: JZ 0x02d9
0x02d4: LOAD_VAR pass_counter
0x02d5: LOAD_INT 1
0x02d6: ADD
0x02d7: STORE_VAR pass_counter
0x02d8: JMP 0x02dd
0x02d9: LOAD_VAR fail_counter
0x02da: LOAD_INT 1
0x02db: ADD
0x02dc: STORE_VAR fail_counter
0x02dd: LOAD_VAR test_counter
0x02de: LOAD_INT 1
0x02df: ADD
0x02e0: STORE_VAR test_counter
0x02e1: LOAD_INT 42
0x02e2: STORE_VAR test_int1
0x02e3: LOAD_INT 37
0x02e4: STORE_VAR test_int2
0x02e5: LOAD_VAR test_int1
0x02e6: LOAD_VAR test_int2
0x02e7: PUSH_ARGS 2
0x02e8: CALL 0x0018
0x02e9: STORE_VAR test_result_int
0x02ea: LOAD_VAR test_result_int
0x02eb: LOAD_INT 42
0x02ec: EQ
0x02ed: JZ 0x02f3
0x02ee: LOAD_VAR pass_counter
0x02ef: LOAD_INT 1
0x02f0: ADD
0x02f1: STORE_VAR pass_counter
0x02f2: JMP 0x02f7
0x02f3: LOAD_VAR fail_counter
0x02f4: LOAD_INT 1
0x02f5: ADD
0x02f6: STORE_VAR fail_counter
0x02f7: LOAD_VAR test_counter
0x02f8: LOAD_INT 1
0x02f9: ADD
0x02fa: STORE_VAR test_counter
0x02fb: LOAD_VAR test_int1
0x02fc: LOAD_VAR test_int2
0x02fd: PUSH_ARGS 2
0x02fe: CALL 0x0023
0x02ff: STORE_VAR test_result_int
0x0300: LOAD_VAR test_result_int
0x0301: LOAD_INT 37
0x0302: EQ
0x0303: JZ 0x0309
0x0304: LOAD_VAR pass_counter
0x0305: LOAD_INT 1
0x0306: ADD
0x0307: STORE_VAR pass_counter
0x0308: JMP 0x030d
0x0309: LOAD_VAR fail_counter
0x030a: LOAD_INT 1
0x030b: ADD
0x030c: STORE_VAR fail_counter
0x030d: LOAD_VAR test_counter
0x030e: LOAD_INT 1
0x030f: ADD
0x0310: STORE_VAR test_counter
0x0311: LOAD_REAL 23.800000
0x0312: STORE_VAR test_real1
0x0313: LOAD_REAL 19.400000
0x0314: STORE_VAR test_real2
0x0315: LOAD_VAR test_real1
0x0316: LOAD_VAR test_real2
0x0317: PUSH_ARGS 2
0x0318: CALL 0x002e
0x0319: STORE_VAR max_result
0x031a: LOAD_VAR max_result
0x031b: LOAD_REAL 23.800000
0x031c: EQ
0x031d: JZ 0x0323
0x031e: LOAD_VAR pass_counter
0x031f: LOAD_INT 1
0x0320: ADD
0x0321: STORE_VAR pass_counter
0x0322: JMP 0x0327
0x0323: LOAD_VAR fail_counter
0x0324: LOAD_INT 1
0x0325: ADD
0x0326: STORE_VAR fail_counter
0x0327: LOAD_VAR test_counter
0x0328: LOAD_INT 1
0x0329: ADD
0x032a: STORE_VAR test_counter
0x032b: LOAD_VAR test_real1
0x032c: LOAD_VAR test_real2
0x032d: PUSH_ARGS 2
0x032e: CALL 0x0039
0x032f: STORE_VAR min_result
0x0330: LOAD_VAR min_result
0x0331: LOAD_REAL 19.400000
0x0332: EQ
0x0333: JZ 0x0339
0x0334: LOAD_VAR pass_counter
0x0335: LOAD_INT 1
0x0336: ADD
0x0337: STORE_VAR pass_counter
0x0338: JMP 0x033d
0x0339: LOAD_VAR fail_counter
0x033a: LOAD_INT 1
0x033b: ADD
0x033c: STORE_VAR fail_counter
0x033d: LOAD_VAR test_counter
0x033e: LOAD_INT 1
0x033f: ADD
0x0340: STORE_VAR test_counter
0x0341: LOAD_REAL 18.500000
0x0342: STORE_VAR test_real1
0x0343: LOAD_VAR test_real1
0x0344: PUSH_ARGS 1
0x0345: CALL 0x0044
0x0346: STORE_VAR sign_result
0x0347: LOAD_VAR sign_result
0x0348: LOAD_INT 1
0x0349: EQ
0x034a: JZ 0x0350
0x034b: LOAD_VAR pass_counter
0x034c: LOAD_INT 1
0x034d: ADD
0x034e: STORE_VAR pass_counter
0x034f: JMP 0x0354
0x0350: LOAD_VAR fail_counter
0x0351: LOAD_INT 1
0x0352: ADD
0x0353: STORE_VAR fail_counter
0x0354: LOAD_VAR test_counter
0x0355: LOAD_INT 1
0x0356: ADD
0x0357: STORE_VAR test_counter
0x0358: LOAD_REAL -12.300000
0x0359: STORE_VAR test_real1
0x035a: LOAD_VAR test_real1
0x035b: PUSH_ARGS 1
0x035c: CALL 0x0044
0x035d: STORE_VAR sign_result
0x035e: LOAD_VAR sign_result
0x035f: LOAD_INT -1
0x0360: EQ
0x0361: JZ 0x0367
0x0362: LOAD_VAR pass_counter
0x0363: LOAD_INT 1
0x0364: ADD
0x0365: STORE_VAR pass_counter
0x0366: JMP 0x036b
0x0367: LOAD_VAR fail_counter
0x0368: LOAD_INT 1
0x0369: ADD
0x036a: STORE_VAR fail_counter
0x036b: LOAD_VAR test_counter
0x036c: LOAD_INT 1
0x036d: ADD
0x036e: STORE_VAR test_counter
0x036f: LOAD_REAL 0.000000
0x0370: STORE_VAR test_real1
0x0371: LOAD_VAR test_real1
0x0372: PUSH_ARGS 1
0x0373: CALL 0x0044
0x0374: STORE_VAR sign_result
0x0375: LOAD_VAR sign_result
0x0376: LOAD_INT 0
0x0377: EQ
0x0378: JZ 0x037e
0x0379: LOAD_VAR pass_counter
0x037a: LOAD_INT 1
0x037b: ADD
0x037c: STORE_VAR pass_counter
0x037d: JMP 0x0382
0x037e: LOAD_VAR fail_counter
0x037f: LOAD_INT 1
0x0380: ADD
0x0381: STORE_VAR fail_counter
0x0382: LOAD_VAR test_counter
0x0383: LOAD_INT 1
0x0384: ADD
0x0385: STORE_VAR test_counter
0x0386: LOAD_REAL 3.000000
0x0387: STORE_VAR test_real1
0x0388: LOAD_INT 4
0x0389: STORE_VAR test_int1
0x038a: LOAD_VAR test_real1
0x038b: LOAD_VAR test_int1
0x038c: PUSH_ARGS 2
0x038d: CALL 0x004f
0x038e: LOAD_REAL 81.000000
0x038f: SUB
0x0390: STORE_VAR power_result
0x0391: LOAD_VAR power_result
0x0392: PUSH_ARGS 1
0x0393: CALL 0x000c
0x0394: STORE_VAR temp1
0x0395: LOAD_VAR temp1
0x0396: LOAD_REAL 0.010000
0x0397: LT
0x0398: JZ 0x039e
0x0399: LOAD_VAR pass_counter
0x039a: LOAD_INT 1
0x039b: ADD
0x039c: STORE_VAR pass_counter
0x039d: JMP 0x03a2
0x039e: LOAD_VAR fail_counter
0x039f: LOAD_INT 1
0x03a0: ADD
0x03a1: STORE_VAR fail_counter
0x03a2: LOAD_VAR test_counter
0x03a3: LOAD_INT 1
0x03a4: ADD
0x03a5: STORE_VAR test_counter
0x03a6: LOAD_REAL 2.000000
0x03a7: STORE_VAR test_real1
0x03a8: LOAD_INT 0
0x03a9: STORE_VAR test_int1
0x03aa: LOAD_VAR test_real1
0x03ab: LOAD_VAR test_int1
0x03ac: PUSH_ARGS 2
0x03ad: CALL 0x004f
0x03ae: LOAD_REAL 1.000000
0x03af: SUB
0x03b0: STORE_VAR power_result
0x03b1: LOAD_VAR power_result
0x03b2: PUSH_ARGS 1
0x03b3: CALL 0x000c
0x03b4: STORE_VAR temp1
0x03b5: LOAD_VAR temp1
0x03b6: LOAD_REAL 0.010000
0x03b7: LT
0x03b8: JZ 0x03be
0x03b9: LOAD_VAR pass_counter
0x03ba: LOAD_INT 1
0x03bb: ADD
0x03bc: STORE_VAR pass_counter
0x03bd: JMP 0x03c2
0x03be: LOAD_VAR fail_counter
0x03bf: LOAD_INT 1
0x03c0: ADD
0x03c1: STORE_VAR fail_counter
0x03c2: LOAD_VAR test_counter
0x03c3: LOAD_INT 1
0x03c4: ADD
0x03c5: STORE_VAR test_counter
0x03c6: LOAD_REAL 49.000000
0x03c7: STORE_VAR test_real1
0x03c8: LOAD_VAR test_real1
0x03c9: PUSH_ARGS 1
0x03ca: CALL 0x0070
0x03cb: LOAD_REAL 7.000000
0x03cc: SUB
0x03cd: STORE_VAR sqrt_result
0x03ce: LOAD_VAR sqrt_result
0x03cf: PUSH_ARGS 1
0x03d0: CALL 0x000c
0x03d1: STORE_VAR temp1
0x03d2: LOAD_VAR temp1
0x03d3: LOAD_REAL 0.010000
0x03d4: LT
0x03d5: JZ 0x03db
0x03d6: LOAD_VAR pass_counter
0x03d7: LOAD_INT 1
0x03d8: ADD
0x03d9: STORE_VAR pass_counter
0x03da: JMP 0x03df
0x03db: LOAD_VAR fail_counter
0x03dc: LOAD_INT 1
0x03dd: ADD
0x03de: STORE_VAR fail_counter
0x03df: LOAD_VAR test_counter
0x03e0: LOAD_INT 1
0x03e1: ADD
0x03e2: STORE_VAR test_counter
0x03e3: LOAD_REAL 2.000000
0x03e4: STORE_VAR test_real1
0x03e5: LOAD_VAR test_real1
0x03e6: PUSH_ARGS 1
0x03e7: CALL 0x0070
0x03e8: LOAD_REAL 1.414213
0x03e9: SUB
0x03ea: STORE_VAR sqrt_result
0x03eb: LOAD_VAR sqrt_result
0x03ec: PUSH_ARGS 1
0x03ed: CALL 0x000c
0x03ee: STORE_VAR temp1
0x03ef: LOAD_VAR temp1
0x03f0: LOAD_REAL 0.010000
0x03f1: LT
0x03f2: JZ 0x03f8
0x03f3: LOAD_VAR pass_counter
0x03f4: LOAD_INT 1
0x03f5: ADD
0x03f6: STORE_VAR pass_counter
0x03f7: JMP 0x03fc
0x03f8: LOAD_VAR fail_counter
0x03f9: LOAD_INT 1
0x03fa: ADD
0x03fb: STORE_VAR fail_counter
0x03fc: LOAD_VAR test_counter
0x03fd: LOAD_INT 1
0x03fe: ADD
0x03ff: STORE_VAR test_counter
0x0400: LOAD_REAL 125.000000
0x0401: STORE_VAR test_real1
0x0402: LOAD_VAR test_real1
0x0403: PUSH_ARGS 1
0x0404: CALL 0x00b1
0x0405: LOAD_REAL 5.000000
0x0406: SUB
0x0407: STORE_VAR cbrt_result
0x0408: LOAD_VAR cbrt_result
0x0409: PUSH_ARGS 1
0x040a: CALL 0x000c
0x040b: STORE_VAR temp1
0x040c: LOAD_VAR temp1
0x040d: LOAD_REAL 0.010000
0x040e: LT
0x040f: JZ 0x0415
0x0410: LOAD_VAR pass_counter
0x0411: LOAD_INT 1
0x0412: ADD
0x0413: STORE_VAR pass_counter
0x0414: JMP 0x0419
0x0415: LOAD_VAR fail_counter
0x0416: LOAD_INT 1
0x0417: ADD
0x0418: STORE_VAR fail_counter
0x0419: LOAD_VAR test_counter
0x041a: LOAD_INT 1
0x041b: ADD
0x041c: STORE_VAR test_counter
0x041d: LOAD_REAL -27.000000
0x041e: STORE_VAR test_real1
0x041f: LOAD_VAR test_real1
0x0420: PUSH_ARGS 1
0x0421: CALL 0x00b1
0x0422: LOAD_REAL -3.000000
0x0423: SUB
0x0424: STORE_VAR cbrt_result
0x0425: LOAD_VAR cbrt_result
0x0426: PUSH_ARGS 1
0x0427: CALL 0x000c
0x0428: STORE_VAR temp1
0x0429: LOAD_VAR temp1
0x042a: LOAD_REAL 0.010000
0x042b: LT
0x042c: JZ 0x0432
0x042d: LOAD_VAR pass_counter
0x042e: LOAD_INT 1
0x042f: ADD
0x0430: STORE_VAR pass_counter
0x0431: JMP 0x0436
0x0432: LOAD_VAR fail_counter
0x0433: LOAD_INT 1
0x0434: ADD
0x0435: STORE_VAR fail_counter
0x0436: LOAD_VAR test_counter
0x0437: LOAD_INT 1
0x0438: ADD
0x0439: STORE_VAR test_counter
0x043a: LOAD_REAL 0.000000
0x043b: STORE_VAR test_real1
0x043c: LOAD_VAR test_real1
0x043d: PUSH_ARGS 1
0x043e: CALL 0x00fe
0x043f: LOAD_REAL 1.000000
0x0440: SUB
0x0441: STORE_VAR exp_result
0x0442: LOAD_VAR exp_result
0x0443: PUSH_ARGS 1
0x0444: CALL 0x000c
0x0445: STORE_VAR temp1
0x0446: LOAD_VAR temp1
0x0447: LOAD_REAL 0.010000
0x0448: LT
0x0449: JZ 0x044f
0x044a: LOAD_VAR pass_counter
0x044b: LOAD_INT 1
0x044c: ADD
0x044d: STORE_VAR pass_counter
0x044e: JMP 0x0453
0x044f: LOAD_VAR fail_counter
0x0450: LOAD_INT 1
0x0451: ADD
0x0452: STORE_VAR fail_counter
0x0453: LOAD_VAR test_counter
0x0454: LOAD_INT 1
0x0455: ADD
0x0456: STORE_VAR test_counter
0x0457: LOAD_REAL 1.000000
0x0458: STORE_VAR test_real1
0x0459: LOAD_VAR test_real1
0x045a: PUSH_ARGS 1
0x045b: CALL 0x00fe
0x045c: LOAD_VAR E_CONST
0x045d: SUB
0x045e: STORE_VAR exp_result
0x045f: LOAD_VAR exp_result
0x0460: PUSH_ARGS 1
0x0461: CALL 0x000c
0x0462: STORE_VAR temp1
0x0463: LOAD_VAR temp1
0x0464: LOAD_REAL 0.010000
0x0465: LT
0x0466: JZ 0x046c
0x0467: LOAD_VAR pass_counter
0x0468: LOAD_INT 1
0x0469: ADD
0x046a: STORE_VAR pass_counter
0x046b: JMP 0x0470
0x046c: LOAD_VAR fail_counter
0x046d: LOAD_INT 1
0x046e: ADD
0x046f: STORE_VAR fail_counter
0x0470: LOAD_VAR test_counter
0x0471: LOAD_INT 1
0x0472: ADD
0x0473: STORE_VAR test_counter
0x0474: LOAD_REAL 1.000000
0x0475: STORE_VAR test_real1
0x0476: LOAD_VAR test_real1
0x0477: PUSH_ARGS 1
0x0478: CALL 0x0121
0x0479: STORE_VAR ln_result
0x047a: LOAD_VAR ln_result
0x047b: PUSH_ARGS 1
0x047c: CALL 0x000c
0x047d: STORE_VAR temp1
0x047e: LOAD_VAR temp1
0x047f: LOAD_REAL 0.010000
0x0480: LT
0x0481: JZ 0x0487
0x0482: LOAD_VAR pass_counter
0x0483: LOAD_INT 1
0x0484: ADD
0x0485: STORE_VAR pass_counter
0x0486: JMP 0x048b
0x0487: LOAD_VAR fail_counter
0x0488: LOAD_INT 1
0x0489: ADD
0x048a: STORE_VAR fail_counter
0x048b: LOAD_VAR test_counter
0x048c: LOAD_INT 1
0x048d: ADD
0x048e: STORE_VAR test_counter
0x048f: LOAD_VAR E_CONST
0x0490: STORE_VAR test_real1
0x0491: LOAD_VAR test_real1
0x0492: PUSH_ARGS 1
0x0493: CALL 0x0121
0x0494: LOAD_REAL 1.000000
0x0495: SUB
0x0496: STORE_VAR ln_result
0x0497: LOAD_VAR ln_result
0x0498: PUSH_ARGS 1
0x0499: CALL 0x000c
0x049a: STORE_VAR temp1
0x049b: LOAD_VAR temp1
0x049c: LOAD_REAL 0.010000
0x049d: LT
0x049e: JZ 0x04a4
0x049f: LOAD_VAR pass_counter
0x04a0: LOAD_INT 1
0x04a1: ADD
0x04a2: STORE_VAR pass_counter
0x04a3: JMP 0x04a8
0x04a4: LOAD_VAR fail_counter
0x04a5: LOAD_INT 1
0x04a6: ADD
0x04a7: STORE_VAR fail_counter
0x04a8: LOAD_VAR test_counter
0x04a9: LOAD_INT 1
0x04aa: ADD
0x04ab: STORE_VAR test_counter
0x04ac: LOAD_REAL 10.000000
0x04ad: STORE_VAR test_real1
0x04ae: LOAD_VAR test_real1
0x04af: PUSH_ARGS 1
0x04b0: CALL 0x0168
0x04b1: LOAD_REAL 1.000000
0x04b2: SUB
0x04b3: STORE_VAR log10_result
0x04b4: LOAD_VAR log10_result
0x04b5: PUSH_ARGS 1
0x04b6: CALL 0x000c
0x04b7: STORE_VAR temp1
0x04b8: LOAD_VAR temp1
0x04b9: LOAD_REAL 0.010000
0x04ba: LT
0x04bb: JZ 0x04c1
0x04bc: LOAD_VAR pass_counter
0x04bd: LOAD_INT 1
0x04be: ADD
0x04bf: STORE_VAR pass_counter
0x04c0: JMP 0x04c5
0x04c1: LOAD_VAR fail_counter
0x04c2: LOAD_INT 1
0x04c3: ADD
0x04c4: STORE_VAR fail_counter
0x04c5: LOAD_VAR test_counter
0x04c6: LOAD_INT 1
0x04c7: ADD
0x04c8: STORE_VAR test_counter
0x04c9: LOAD_REAL 100.000000
0x04ca: STORE_VAR test_real1
0x04cb: LOAD_VAR test_real1
0x04cc: PUSH_ARGS 1
0x04cd: CALL 0x0168
0x04ce: LOAD_REAL 2.000000
0x04cf: SUB
0x04d0: STORE_VAR log10_result
0x04d1: LOAD_VAR log10_result
0x04d2: PUSH_ARGS 1
0x04d3: CALL 0x000c
0x04d4: STORE_VAR temp1
0x04d5: LOAD_VAR temp1
0x04d6: LOAD_REAL 0.010000
0x04d7: LT
0x04d8: JZ 0x04de
0x04d9: LOAD_VAR pass_counter
0x04da: LOAD_INT 1
0x04db: ADD
0x04dc: STORE_VAR pass_counter
0x04dd: JMP 0x04e2
0x04de: LOAD_VAR fail_counter
0x04df: LOAD_INT 1
0x04e0: ADD
0x04e1: STORE_VAR fail_counter
0x04e2: LOAD_VAR test_counter
0x04e3: LOAD_INT 1
0x04e4: ADD
0x04e5: STORE_VAR test_counter
0x04e6: LOAD_REAL 2.000000
0x04e7: STORE_VAR test_real1
0x04e8: LOAD_VAR test_real1
0x04e9: PUSH_ARGS 1
0x04ea: CALL 0x0174
0x04eb: LOAD_REAL 1.000000
0x04ec: SUB
0x04ed: STORE_VAR log2_result
0x04ee: LOAD_VAR log2_result
0x04ef: PUSH_ARGS 1
0x04f0: CALL 0x000c
0x04f1: STORE_VAR temp1
0x04f2: LOAD_VAR temp1
0x04f3: LOAD_REAL 0.010000
0x04f4: LT
0x04f5: JZ 0x04fb
0x04f6: LOAD_VAR pass_counter
0x04f7: LOAD_INT 1
0x04f8: ADD
0x04f9: STORE_VAR pass_counter
0x04fa: JMP 0x04ff
0x04fb: LOAD_VAR fail_counter
0x04fc: LOAD_INT 1
0x04fd: ADD
0x04fe: STORE_VAR fail_counter
0x04ff: LOAD_VAR test_counter
0x0500: LOAD_INT 1
0x0501: ADD
0x0502: STORE_VAR test_counter
0x0503: LOAD_REAL 16.000000
0x0504: STORE_VAR test_real1
0x0505: LOAD_VAR test_real1
0x0506: PUSH_ARGS 1
0x0507: CALL 0x0174
0x0508: LOAD_REAL 4.000000
0x0509: SUB
0x050a: STORE_VAR log2_result
0x050b: LOAD_VAR log2_result
0x050c: PUSH_ARGS 1
0x050d: CALL 0x000c
0x050e: STORE_VAR temp1
0x050f: LOAD_VAR temp1
0x0510: LOAD_REAL 0.010000
0x0511: LT
0x0512: JZ 0x0518
0x0513: LOAD_VAR pass_counter
0x0514: LOAD_INT 1
0x0515: ADD
0x0516: STORE_VAR pass_counter
0x0517: JMP 0x051c
0x0518: LOAD_VAR fail_counter
0x0519: LOAD_INT 1
0x051a: ADD
0x051b: STORE_VAR fail_counter
0x051c: LOAD_VAR test_counter
0x051d: LOAD_INT 1
0x051e: ADD
0x051f: STORE_VAR test_counter
0x0520: LOAD_REAL 4.000000
0x0521: STORE_VAR test_real1
0x0522: LOAD_REAL 0.500000
0x0523: STORE_VAR test_real2
0x0524: LOAD_VAR test_real1
0x0525: LOAD_VAR test_real2
0x0526: PUSH_ARGS 2
0x0527: CALL 0x0180
0x0528: LOAD_REAL 2.000000
0x0529: SUB
0x052a: STORE_VAR power_result
0x052b: LOAD_VAR power_result
0x052c: PUSH_ARGS 1
0x052d: CALL 0x000c
0x052e: STORE_VAR temp1
0x052f: LOAD_VAR temp1
0x0530: LOAD_REAL 0.010000
0x0531: LT
0x0532: JZ 0x0538
0x0533: LOAD_VAR pass_counter
0x0534: LOAD_INT 1
0x0535: ADD
0x0536: STORE_VAR pass_counter
0x0537: JMP 0x053c
0x0538: LOAD_VAR fail_counter
0x0539: LOAD_INT 1
0x053a: ADD
0x053b: STORE_VAR fail_counter
0x053c: LOAD_VAR test_counter
0x053d: LOAD_INT 1
0x053e: ADD
0x053f: STORE_VAR test_counter
0x0540: LOAD_REAL 8.000000
0x0541: STORE_VAR test_real1
0x0542: LOAD_REAL 3.000000
0x0543: STORE_VAR test_real2
0x0544: LOAD_VAR test_real1
0x0545: LOAD_VAR test_real2
0x0546: PUSH_ARGS 2
0x0547: CALL 0x0180
0x0548: LOAD_REAL 512.000000
0x0549: SUB
0x054a: STORE_VAR power_result
0x054b: LOAD_VAR power_result
0x054c: PUSH_ARGS 1
0x054d: CALL 0x000c
0x054e: STORE_VAR temp1
0x054f: LOAD_VAR temp1
0x0550: LOAD_REAL 0.100000
0x0551: LT
0x0552: JZ 0x0558
0x0553: LOAD_VAR pass_counter
0x0554: LOAD_INT 1
0x0555: ADD
0x0556: STORE_VAR pass_counter
0x0557: JMP 0x055c
0x0558: LOAD_VAR fail_counter
0x0559: LOAD_INT 1
0x055a: ADD
0x055b: STORE_VAR fail_counter
0x055c: LOAD_VAR test_counter
0x055d: LOAD_INT 1
0x055e: ADD
0x055f: STORE_VAR test_counter
0x0560: LOAD_BOOL TRUE
0x0561: STORE_VAR test_bool1
0x0562: LOAD_BOOL FALSE
0x0563: STORE_VAR test_bool2
0x0564: LOAD_BOOL FALSE
0x0565: STORE_VAR temp_bool
0x0566: LOAD_VAR test_bool1
0x0567: LOAD_VAR test_bool2
0x0568: LOAD_VAR temp_bool
0x0569: PUSH_ARGS 3
0x056a: CALL 0x0195
0x056b: STORE_VAR rs_output
0x056c: LOAD_VAR rs_output
0x056d: LOAD_BOOL TRUE
0x056e: EQ
0x056f: JZ 0x0575
0x0570: LOAD_VAR pass_counter
0x0571: LOAD_INT 1
0x0572: ADD
0x0573: STORE_VAR pass_counter
0x0574: JMP 0x0579
0x0575: LOAD_VAR fail_counter
0x0576: LOAD_INT 1
0x0577: ADD
0x0578: STORE_VAR fail_counter
0x0579: LOAD_VAR test_counter
0x057a: LOAD_INT 1
0x057b: ADD
0x057c: STORE_VAR test_counter
0x057d: LOAD_BOOL FALSE
0x057e: STORE_VAR test_bool1
0x057f: LOAD_BOOL TRUE
0x0580: STORE_VAR test_bool2
0x0581: LOAD_BOOL TRUE
0x0582: STORE_VAR temp_bool
0x0583: LOAD_VAR test_bool1
0x0584: LOAD_VAR test_bool2
0x0585: LOAD_VAR temp_bool
0x0586: PUSH_ARGS 3
0x0587: CALL 0x0195
0x0588: STORE_VAR rs_output
0x0589: LOAD_VAR rs_output
0x058a: LOAD_BOOL FALSE
0x058b: EQ
0x058c: JZ 0x0592
0x058d: LOAD_VAR pass_counter
0x058e: LOAD_INT 1
0x058f: ADD
0x0590: STORE_VAR pass_counter
0x0591: JMP 0x0596
0x0592: LOAD_VAR fail_counter
0x0593: LOAD_INT 1
0x0594: ADD
0x0595: STORE_VAR fail_counter
0x0596: LOAD_VAR test_counter
0x0597: LOAD_INT 1
0x0598: ADD
0x0599: STORE_VAR test_counter
0x059a: LOAD_BOOL FALSE
0x059b: STORE_VAR test_bool1
0x059c: LOAD_BOOL FALSE
0x059d: STORE_VAR test_bool2
0x059e: LOAD_BOOL TRUE
0x059f: STORE_VAR temp_bool
0x05a0: LOAD_VAR test_bool1
0x05a1: LOAD_VAR test_bool2
0x05a2: LOAD_VAR temp_bool
0x05a3: PUSH_ARGS 3
0x05a4: CALL 0x0195
0x05a5: STORE_VAR rs_output
0x05a6: LOAD_VAR rs_output
0x05a7: LOAD_BOOL TRUE
0x05a8: EQ
0x05a9: JZ 0x05af
0x05aa: LOAD_VAR pass_counter
0x05ab: LOAD_INT 1
0x05ac: ADD
0x05ad: STORE_VAR pass_counter
0x05ae: JMP 0x05b3
0x05af: LOAD_VAR fail_counter
0x05b0: LOAD_INT 1
0x05b1: ADD
0x05b2: STORE_VAR fail_counter
0x05b3: LOAD_VAR test_counter
0x05b4: LOAD_INT 1
0x05b5: ADD
0x05b6: STORE_VAR test_counter
0x05b7: LOAD_BOOL TRUE
0x05b8: STORE_VAR test_bool1
0x05b9: LOAD_BOOL FALSE
0x05ba: STORE_VAR test_bool2
0x05bb: LOAD_BOOL FALSE
0x05bc: STORE_VAR temp_bool
0x05bd: LOAD_VAR test_bool1
0x05be: LOAD_VAR test_bool2
0x05bf: LOAD_VAR temp_bool
0x05c0: PUSH_ARGS 3
0x05c1: CALL 0x01a9
0x05c2: STORE_VAR sr_output
0x05c3: LOAD_VAR sr_output
0x05c4: LOAD_BOOL TRUE
0x05c5: EQ
0x05c6: JZ 0x05cc
0x05c7: LOAD_VAR pass_counter
0x05c8: LOAD_INT 1
0x05c9: ADD
0x05ca: STORE_VAR pass_counter
0x05cb: JMP 0x05d0
0x05cc: LOAD_VAR fail_counter
0x05cd: LOAD_INT 1
0x05ce: ADD
0x05cf: STORE_VAR fail_counter
0x05d0: LOAD_VAR test_counter
0x05d1: LOAD_INT 1
0x05d2: ADD
0x05d3: STORE_VAR test_counter
0x05d4: LOAD_BOOL FALSE
0x05d5: STORE_VAR test_bool1
0x05d6: LOAD_BOOL TRUE
0x05d7: STORE_VAR test_bool2
0x05d8: LOAD_BOOL TRUE
0x05d9: STORE_VAR temp_bool
0x05da: LOAD_VAR test_bool1
0x05db: LOAD_VAR test_bool2
0x05dc: LOAD_VAR temp_bool
0x05dd: PUSH_ARGS 3
0x05de: CALL 0x01a9
0x05df: STORE_VAR sr_output
0x05e0: LOAD_VAR sr_output
0x05e1: LOAD_BOOL FALSE
0x05e2: EQ
0x05e3: JZ 0x05e9
0x05e4: LOAD_VAR pass_counter
0x05e5: LOAD_INT 1
0x05e6: ADD
0x05e7: STORE_VAR pass_counter
0x05e8: JMP 0x05ed
0x05e9: LOAD_VAR fail_counter
0x05ea: LOAD_INT 1
0x05eb: ADD
0x05ec: STORE_VAR fail_counter
0x05ed: LOAD_VAR test_counter
0x05ee: LOAD_INT 1
0x05ef: ADD
0x05f0: STORE_VAR test_counter
0x05f1: LOAD_BOOL TRUE
0x05f2: STORE_VAR test_bool1
0x05f3: LOAD_BOOL TRUE
0x05f4: STORE_VAR test_bool2
0x05f5: LOAD_BOOL FALSE
0x05f6: STORE_VAR test_bool3
0x05f7: LOAD_VAR test_bool1
0x05f8: LOAD_VAR test_bool2
0x05f9: LOAD_VAR test_bool3
0x05fa: PUSH_ARGS 3
0x05fb: CALL 0x01bd
0x05fc: STORE_VAR vote_2oo3_output
0x05fd: LOAD_VAR vote_2oo3_output
0x05fe: LOAD_BOOL TRUE
0x05ff: EQ
0x0600: JZ 0x0606
0x0601: LOAD_VAR pass_counter
0x0602: LOAD_INT 1
0x0603: ADD
0x0604: STORE_VAR pass_counter
0x0605: JMP 0x060a
0x0606: LOAD_VAR fail_counter
0x0607: LOAD_INT 1
0x0608: ADD
0x0609: STORE_VAR fail_counter
0x060a: LOAD_VAR test_counter
0x060b: LOAD_INT 1
0x060c: ADD
0x060d: STORE_VAR test_counter
0x060e: LOAD_BOOL TRUE
0x060f: STORE_VAR test_bool1
0x0610: LOAD_BOOL FALSE
0x0611: STORE_VAR test_bool2
0x0612: LOAD_BOOL FALSE
0x0613: STORE_VAR test_bool3
0x0614: LOAD_VAR test_bool1
0x0615: LOAD_VAR test_bool2
0x0616: LOAD_VAR test_bool3
0x0617: PUSH_ARGS 3
0x0618: CALL 0x01bd
0x0619: STORE_VAR vote_2oo3_output
0x061a: LOAD_VAR vote_2oo3_output
0x061b: LOAD_BOOL FALSE
0x061c: EQ
0x061d: JZ 0x0623
0x061e: LOAD_VAR pass_counter
0x061f: LOAD_INT 1
0x0620: ADD
0x0621: STORE_VAR pass_counter
0x0622: JMP 0x0627
0x0623: LOAD_VAR fail_counter
0x0624: LOAD_INT 1
0x0625: ADD
0x0626: STORE_VAR fail_counter
0x0627: LOAD_VAR test_counter
0x0628: LOAD_INT 1
0x0629: ADD
0x062a: STORE_VAR test_counter
0x062b: LOAD_BOOL TRUE
0x062c: STORE_VAR test_bool1
0x062d: LOAD_BOOL TRUE
0x062e: STORE_VAR test_bool2
0x062f: LOAD_BOOL TRUE
0x0630: STORE_VAR test_bool3
0x0631: LOAD_VAR test_bool1
0x0632: LOAD_VAR test_bool2
0x0633: LOAD_VAR test_bool3
0x0634: PUSH_ARGS 3
0x0635: CALL 0x01bd
0x0636: STORE_VAR vote_2oo3_output
0x0637: LOAD_VAR vote_2oo3_output
0x0638: LOAD_BOOL TRUE
0x0639: EQ
0x063a: JZ 0x0640
0x063b: LOAD_VAR pass_counter
0x063c: LOAD_INT 1
0x063d: ADD
0x063e: STORE_VAR pass_counter
0x063f: JMP 0x0644
0x0640: LOAD_VAR fail_counter
0x0641: LOAD_INT 1
0x0642: ADD
0x0643: STORE_VAR fail_counter
0x0644: LOAD_VAR test_counter
0x0645: LOAD_INT 1
0x0646: ADD
0x0647: STORE_VAR test_counter
0x0648: LOAD_BOOL TRUE
0x0649: STORE_VAR test_bool1
0x064a: LOAD_BOOL TRUE
0x064b: STORE_VAR test_bool2
0x064c: LOAD_BOOL FALSE
0x064d: STORE_VAR test_bool3
0x064e: LOAD_BOOL FALSE
0x064f: STORE_VAR test_bool4
0x0650: LOAD_VAR test_bool1
0x0651: LOAD_VAR test_bool2
0x0652: LOAD_VAR test_bool3
0x0653: LOAD_VAR test_bool4
0x0654: PUSH_ARGS 4
0x0655: CALL 0x01e4
0x0656: STORE_VAR vote_2oo4_output
0x0657: LOAD_VAR vote_2oo4_output
0x0658: LOAD_BOOL TRUE
0x0659: EQ
0x065a: JZ 0x0660
0x065b: LOAD_VAR pass_counter
0x065c: LOAD_INT 1
0x065d: ADD
0x065e: STORE_VAR pass_counter
0x065f: JMP 0x0664
0x0660: LOAD_VAR fail_counter
0x0661: LOAD_INT 1
0x0662: ADD
0x0663: STORE_VAR fail_counter
0x0664: LOAD_VAR test_counter
0x0665: LOAD_INT 1
0x0666: ADD
0x0667: STORE_VAR test_counter
0x0668: LOAD_BOOL TRUE
0x0669: STORE_VAR test_bool1
0x066a: LOAD_BOOL FALSE
0x066b: STORE_VAR test_bool2
0x066c: LOAD_BOOL FALSE
0x066d: STORE_VAR test_bool3
0x066e: LOAD_BOOL FALSE
0x066f: STORE_VAR test_bool4
0x0670: LOAD_VAR test_bool1
0x0671: LOAD_VAR test_bool2
0x0672: LOAD_VAR test_bool3
0x0673: LOAD_VAR test_bool4
0x0674: PUSH_ARGS 4
0x0675: CALL 0x01e4
0x0676: STORE_VAR vote_2oo4_output
0x0677: LOAD_VAR vote_2oo4_output
0x0678: LOAD_BOOL FALSE
0x0679: EQ
0x067a: JZ 0x0680
0x067b: LOAD_VAR pass_counter
0x067c: LOAD_INT 1
0x067d: ADD
0x067e: STORE_VAR pass_counter
0x067f: JMP 0x0684
0x0680: LOAD_VAR fail_counter
0x0681: LOAD_INT 1
0x0682: ADD
0x0683: STORE_VAR fail_counter
0x0684: LOAD_VAR test_counter
0x0685: LOAD_INT 1
0x0686: ADD
0x0687: STORE_VAR test_counter
0x0688: LOAD_BOOL TRUE
0x0689: STORE_VAR test_bool1
0x068a: LOAD_BOOL TRUE
0x068b: STORE_VAR test_bool2
0x068c: LOAD_BOOL TRUE
0x068d: STORE_VAR test_bool3
0x068e: LOAD_BOOL TRUE
0x068f: STORE_VAR test_bool4
0x0690: LOAD_VAR test_bool1
0x0691: LOAD_VAR test_bool2
0x0692: LOAD_VAR test_bool3
0x0693: LOAD_VAR test_bool4
0x0694: PUSH_ARGS 4
0x0695: CALL 0x01e4
0x0696: STORE_VAR vote_2oo4_output
0x0697: LOAD_VAR vote_2oo4_output
0x0698: LOAD_BOOL TRUE
0x0699: EQ
0x069a: JZ 0x06a0
0x069b: LOAD_VAR pass_counter
0x069c: LOAD_INT 1
0x069d: ADD
0x069e: STORE_VAR pass_counter
0x069f: JMP 0x06a4
0x06a0: LOAD_VAR fail_counter
0x06a1: LOAD_INT 1
0x06a2: ADD
0x06a3: STORE_VAR fail_counter
0x06a4: LOAD_VAR test_counter
0x06a5: LOAD_INT 1
0x06a6: ADD
0x06a7: STORE_VAR test_counter
0x06a8: LOAD_REAL 10.000000
0x06a9: STORE_VAR test_real1
0x06aa: LOAD_REAL 0.300000
0x06ab: STORE_VAR test_real2
0x06ac: LOAD_REAL 5.000000
0x06ad: STORE_VAR filter_last
0x06ae: LOAD_VAR test_real1
0x06af: LOAD_VAR test_real2
0x06b0: LOAD_VAR filter_last
0x06b1: PUSH_ARGS 3
0x06b2: CALL 0x0213
0x06b3: LOAD_REAL 6.500000
0x06b4: SUB
0x06b5: STORE_VAR filter_output
0x06b6: LOAD_VAR filter_output
0x06b7: PUSH_ARGS 1
0x06b8: CALL 0x000c
0x06b9: STORE_VAR temp1
0x06ba: LOAD_VAR temp1
0x06bb: LOAD_REAL 0.010000
0x06bc: LT
0x06bd: JZ 0x06c3
0x06be: LOAD_VAR pass_counter
0x06bf: LOAD_INT 1
0x06c0: ADD
0x06c1: STORE_VAR pass_counter
0x06c2: JMP 0x06c7
0x06c3: LOAD_VAR fail_counter
0x06c4: LOAD_INT 1
0x06c5: ADD
0x06c6: STORE_VAR fail_counter
0x06c7: LOAD_VAR test_counter
0x06c8: LOAD_INT 1
0x06c9: ADD
0x06ca: STORE_VAR test_counter
0x06cb: LOAD_REAL 1.000000
0x06cc: STORE_VAR temp1
0x06cd: LOAD_REAL 2.000000
0x06ce: STORE_VAR temp2
0x06cf: LOAD_REAL 3.000000
0x06d0: STORE_VAR temp3
0x06d1: LOAD_REAL 4.000000
0x06d2: STORE_VAR temp4
0x06d3: LOAD_REAL 5.000000
0x06d4: STORE_VAR temp5
0x06d5: LOAD_VAR temp1
0x06d6: LOAD_VAR temp2
0x06d7: LOAD_VAR temp3
0x06d8: LOAD_VAR temp4
0x06d9: LOAD_VAR temp5
0x06da: PUSH_ARGS 5
0x06db: CALL 0x0225
0x06dc: LOAD_REAL 3.000000
0x06dd: SUB
0x06de: STORE_VAR avg_output
0x06df: LOAD_VAR avg_output
0x06e0: PUSH_ARGS 1
0x06e1: CALL 0x000c
0x06e2: STORE_VAR temp_val
0x06e3: LOAD_VAR temp_val
0x06e4: LOAD_REAL 0.010000
0x06e5: LT
0x06e6: JZ 0x06ec
0x06e7: LOAD_VAR pass_counter
0x06e8: LOAD_INT 1
0x06e9: ADD
0x06ea: STORE_VAR pass_counter
0x06eb: JMP 0x06f0
0x06ec: LOAD_VAR fail_counter
0x06ed: LOAD_INT 1
0x06ee: ADD
0x06ef: STORE_VAR fail_counter
0x06f0: LOAD_VAR test_counter
0x06f1: LOAD_INT 1
0x06f2: ADD
0x06f3: STORE_VAR test_counter
0x06f4: LOAD_REAL 10.000000
0x06f5: STORE_VAR temp1
0x06f6: LOAD_REAL 20.000000
0x06f7: STORE_VAR temp2
0x06f8: LOAD_REAL 30.000000
0x06f9: STORE_VAR temp3
0x06fa: LOAD_REAL 40.000000
0x06fb: STORE_VAR temp4
0x06fc: LOAD_REAL 50.000000
0x06fd: STORE_VAR temp5
0x06fe: LOAD_VAR temp1
0x06ff: LOAD_VAR temp2
0x0700: LOAD_VAR temp3
0x0701: LOAD_VAR temp4
0x0702: LOAD_VAR temp5
0x0703: PUSH_ARGS 5
0x0704: CALL 0x0225
0x0705: LOAD_REAL 30.000000
0x0706: SUB
0x0707: STORE_VAR avg_output
0x0708: LOAD_VAR avg_output
0x0709: PUSH_ARGS 1
0x070a: CALL 0x000c
0x070b: STORE_VAR temp_val
0x070c: LOAD_VAR temp_val
0x070d: LOAD_REAL 0.010000
0x070e: LT
0x070f: JZ 0x0715
0x0710: LOAD_VAR pass_counter
0x0711: LOAD_INT 1
0x0712: ADD
0x0713: STORE_VAR pass_counter
0x0714: JMP 0x0719
0x0715: LOAD_VAR fail_counter
0x0716: LOAD_INT 1
0x0717: ADD
0x0718: STORE_VAR fail_counter
0x0719: LOAD_VAR test_counter
0x071a: LOAD_INT 1
0x071b: ADD
0x071c: STORE_VAR test_counter
0x071d: LOAD_REAL 15.000000
0x071e: STORE_VAR test_real1
0x071f: LOAD_REAL 0.000000
0x0720: STORE_VAR temp1
0x0721: LOAD_REAL 10.000000
0x0722: STORE_VAR temp2
0x0723: LOAD_VAR test_real1
0x0724: LOAD_VAR temp1
0x0725: LOAD_VAR temp2
0x0726: PUSH_ARGS 3
0x0727: CALL 0x023d
0x0728: STORE_VAR limit_output
0x0729: LOAD_VAR limit_output
0x072a: LOAD_REAL 10.000000
0x072b: EQ
0x072c: JZ 0x0732
0x072d: LOAD_VAR pass_counter
0x072e: LOAD_INT 1
0x072f: ADD
0x0730: STORE_VAR pass_counter
0x0731: JMP 0x0736
0x0732: LOAD_VAR fail_counter
0x0733: LOAD_INT 1
0x0734: ADD
0x0735: STORE_VAR fail_counter
0x0736: LOAD_VAR test_counter
0x0737: LOAD_INT 1
0x0738: ADD
0x0739: STORE_VAR test_counter
0x073a: LOAD_REAL -5.000000
0x073b: STORE_VAR test_real1
0x073c: LOAD_REAL 0.000000
0x073d: STORE_VAR temp1
0x073e: LOAD_REAL 10.000000
0x073f: STORE_VAR temp2
0x0740: LOAD_VAR test_real1
0x0741: LOAD_VAR temp1
0x0742: LOAD_VAR temp2
0x0743: PUSH_ARGS 3
0x0744: CALL 0x023d
0x0745: STORE_VAR limit_output
0x0746: LOAD_VAR limit_output
0x0747: LOAD_REAL 0.000000
0x0748: EQ
0x0749: JZ 0x074f
0x074a: LOAD_VAR pass_counter
0x074b: LOAD_INT 1
0x074c: ADD
0x074d: STORE_VAR pass_counter
0x074e: JMP 0x0753
0x074f: LOAD_VAR fail_counter
0x0750: LOAD_INT 1
0x0751: ADD
0x0752: STORE_VAR fail_counter
0x0753: LOAD_VAR test_counter
0x0754: LOAD_INT 1
0x0755: ADD
0x0756: STORE_VAR test_counter
0x0757: LOAD_REAL 7.500000
0x0758: STORE_VAR test_real1
0x0759: LOAD_REAL 0.000000
0x075a: STORE_VAR temp1
0x075b: LOAD_REAL 10.000000
0x075c: STORE_VAR temp2
0x075d: LOAD_VAR test_real1
0x075e: LOAD_VAR temp1
0x075f: LOAD_VAR temp2
0x0760: PUSH_ARGS 3
0x0761: CALL 0x023d
0x0762: STORE_VAR limit_output
0x0763: LOAD_VAR limit_output
0x0764: LOAD_REAL 7.500000
0x0765: EQ
0x0766: JZ 0x076c
0x0767: LOAD_VAR pass_counter
0x0768: LOAD_INT 1
0x0769: ADD
0x076a: STORE_VAR pass_counter
0x076b: JMP 0x0770
0x076c: LOAD_VAR fail_counter
0x076d: LOAD_INT 1
0x076e: ADD
0x076f: STORE_VAR fail_counter
0x0770: LOAD_VAR test_counter
0x0771: LOAD_INT 1
0x0772: ADD
0x0773: STORE_VAR test_counter
0x0774: LOAD_REAL 5.000000
0x0775: STORE_VAR test_real1
0x0776: LOAD_REAL 2.000000
0x0777: STORE_VAR test_real2
0x0778: LOAD_VAR test_real1
0x0779: LOAD_VAR test_real2
0x077a: PUSH_ARGS 2
0x077b: CALL 0x024a
0x077c: STORE_VAR dead_output
0x077d: LOAD_VAR dead_output
0x077e: LOAD_REAL 3.000000
0x077f: EQ
0x0780: JZ 0x0786
0x0781: LOAD_VAR pass_counter
0x0782: LOAD_INT 1
0x0783: ADD
0x0784: STORE_VAR pass_counter
0x0785: JMP 0x078a
0x0786: LOAD_VAR fail_counter
0x0787: LOAD_INT 1
0x0788: ADD
0x0789: STORE_VAR fail_counter
0x078a: LOAD_VAR test_counter
0x078b: LOAD_INT 1
0x078c: ADD
0x078d: STORE_VAR test_counter
0x078e: LOAD_REAL -7.000000
0x078f: STORE_VAR test_real1
0x0790: LOAD_REAL 2.000000
0x0791: STORE_VAR test_real2
0x0792: LOAD_VAR test_real1
0x0793: LOAD_VAR test_real2
0x0794: PUSH_ARGS 2
0x0795: CALL 0x024a
0x0796: STORE_VAR dead_output
0x0797: LOAD_VAR dead_output
0x0798: LOAD_REAL -5.000000
0x0799: EQ
0x079a: JZ 0x07a0
0x079b: LOAD_VAR pass_counter
0x079c: LOAD_INT 1
0x079d: ADD
0x079e: STORE_VAR pass_counter
0x079f: JMP 0x07a4
0x07a0: LOAD_VAR fail_counter
0x07a1: LOAD_INT 1
0x07a2: ADD
0x07a3: STORE_VAR fail_counter
0x07a4: LOAD_VAR test_counter
0x07a5: LOAD_INT 1
0x07a6: ADD
0x07a7: STORE_VAR test_counter
0x07a8: LOAD_REAL 1.500000
0x07a9: STORE_VAR test_real1
0x07aa: LOAD_REAL 2.000000
0x07ab: STORE_VAR test_real2
0x07ac: LOAD_VAR test_real1
0x07ad: LOAD_VAR test_real2
0x07ae: PUSH_ARGS 2
0x07af: CALL 0x024a
0x07b0: STORE_VAR dead_output
0x07b1: LOAD_VAR dead_output
0x07b2: LOAD_REAL 0.000000
0x07b3: EQ
0x07b4: JZ 0x07ba
0x07b5: LOAD_VAR pass_counter
0x07b6: LOAD_INT 1
0x07b7: ADD
0x07b8: STORE_VAR pass_counter
0x07b9: JMP 0x07be
0x07ba: LOAD_VAR fail_counter
0x07bb: LOAD_INT 1
0x07bc: ADD
0x07bd: STORE_VAR fail_counter
0x07be: LOAD_VAR test_counter
0x07bf: LOAD_INT 1
0x07c0: ADD
0x07c1: STORE_VAR test_counter
0x07c2: LOAD_REAL 12.000000
0x07c3: STORE_VAR test_real1
0x07c4: LOAD_REAL 10.000000
0x07c5: STORE_VAR temp1
0x07c6: LOAD_REAL 5.000000
0x07c7: STORE_VAR temp2
0x07c8: LOAD_BOOL FALSE
0x07c9: STORE_VAR hyst_last
0x07ca: LOAD_VAR test_real1
0x07cb: LOAD_VAR temp1
0x07cc: LOAD_VAR temp2
0x07cd: LOAD_VAR hyst_last
0x07ce: PUSH_ARGS 4
0x07cf: CALL 0x0266
0x07d0: STORE_VAR hyst_output
0x07d1: LOAD_VAR hyst_output
0x07d2: LOAD_BOOL TRUE
0x07d3: EQ
0x07d4: JZ 0x07da
0x07d5: LOAD_VAR pass_counter
0x07d6: LOAD_INT 1
0x07d7: ADD
0x07d8: STORE_VAR pass_counter
0x07d9: JMP 0x07de
0x07da: LOAD_VAR fail_counter
0x07db: LOAD_INT 1
0x07dc: ADD
0x07dd: STORE_VAR fail_counter
0x07de: LOAD_VAR test_counter
0x07df: LOAD_INT 1
0x07e0: ADD
0x07e1: STORE_VAR test_counter
0x07e2: LOAD_REAL 7.000000
0x07e3: STORE_VAR test_real1
0x07e4: LOAD_REAL 10.000000
0x07e5: STORE_VAR temp1
0x07e6: LOAD_REAL 5.000000
0x07e7: STORE_VAR temp2
0x07e8: LOAD_BOOL TRUE
0x07e9: STORE_VAR hyst_last
0x07ea: LOAD_VAR test_real1
0x07eb: LOAD_VAR temp1
0x07ec: LOAD_VAR temp2
0x07ed: LOAD_VAR hyst_last
0x07ee: PUSH_ARGS 4
0x07ef: CALL 0x0266
0x07f0: STORE_VAR hyst_output
0x07f1: LOAD_VAR hyst_output
0x07f2: LOAD_BOOL TRUE
0x07f3: EQ
0x07f4: JZ 0x07fa
0x07f5: LOAD_VAR pass_counter
0x07f6: LOAD_INT 1
0x07f7: ADD
0x07f8: STORE_VAR pass_counter
0x07f9: JMP 0x07fe
0x07fa: LOAD_VAR fail_counter
0x07fb: LOAD_INT 1
0x07fc: ADD
0x07fd: STORE_VAR fail_counter
0x07fe: LOAD_VAR test_counter
0x07ff: LOAD_INT 1
0x0800: ADD
0x0801: STORE_VAR test_counter
0x0802: LOAD_REAL 3.000000
0x0803: STORE_VAR test_real1
0x0804: LOAD_REAL 10.000000
0x0805: STORE_VAR temp1
0x0806: LOAD_REAL 5.000000
0x0807: STORE_VAR temp2
0x0808: LOAD_BOOL TRUE
0x0809: STORE_VAR hyst_last
0x080a: LOAD_VAR test_real1
0x080b: LOAD_VAR temp1
0x080c: LOAD_VAR temp2
0x080d: LOAD_VAR hyst_last
0x080e: PUSH_ARGS 4
0x080f: CALL 0x0266
0x0810: STORE_VAR hyst_output
0x0811: LOAD_VAR hyst_output
0x0812: LOAD_BOOL FALSE
0x0813: EQ
0x0814: JZ 0x081a
0x0815: LOAD_VAR pass_counter
0x0816: LOAD_INT 1
0x0817: ADD
0x0818: STORE_VAR pass_counter
0x0819: JMP 0x081e
0x081a: LOAD_VAR fail_counter
0x081b: LOAD_INT 1
0x081c: ADD
0x081d: STORE_VAR fail_counter
0x081e: LOAD_VAR test_counter
0x081f: LOAD_INT 1
0x0820: ADD
0x0821: STORE_VAR test_counter
0x0822: LOAD_REAL 25.000000
0x0823: STORE_VAR test_real1
0x0824: LOAD_REAL 0.400000
0x0825: STORE_VAR test_real2
0x0826: LOAD_REAL 10.000000
0x0827: STORE_VAR filter_last
0x0828: LOAD_VAR test_real1
0x0829: LOAD_VAR test_real2
0x082a: LOAD_VAR filter_last
0x082b: PUSH_ARGS 3
0x082c: CALL 0x0213
0x082d: STORE_VAR temp_val
0x082e: LOAD_REAL 0.000000
0x082f: STORE_VAR temp1
0x0830: LOAD_REAL 20.000000
0x0831: STORE_VAR temp2
0x0832: LOAD_VAR temp_val
0x0833: LOAD_VAR temp1
0x0834: LOAD_VAR temp2
0x0835: PUSH_ARGS 3
0x0836: CALL 0x023d
0x0837: LOAD_REAL 16.000000
0x0838: SUB
0x0839: STORE_VAR limit_output
0x083a: LOAD_VAR limit_output
0x083b: PUSH_ARGS 1
0x083c: CALL 0x000c
0x083d: STORE_VAR temp3
0x083e: LOAD_VAR temp3
0x083f: LOAD_REAL 0.100000
0x0840: LT
0x0841: JZ 0x0847
0x0842: LOAD_VAR pass_counter
0x0843: LOAD_INT 1
0x0844: ADD
0x0845: STORE_VAR pass_counter
0x0846: JMP 0x084b
0x0847: LOAD_VAR fail_counter
0x0848: LOAD_INT 1
0x0849: ADD
0x084a: STORE_VAR fail_counter
0x084b: LOAD_VAR test_counter
0x084c: LOAD_INT 1
0x084d: ADD
0x084e: STORE_VAR test_counter
0x084f: LOAD_REAL 4.000000
0x0850: STORE_VAR test_real1
0x0851: LOAD_VAR test_real1
0x0852: PUSH_ARGS 1
0x0853: CALL 0x0070
0x0854: STORE_VAR sqrt_result
0x0855: LOAD_INT 3
0x0856: STORE_VAR test_int1
0x0857: LOAD_VAR sqrt_result
0x0858: LOAD_VAR test_int1
0x0859: PUSH_ARGS 2
0x085a: CALL 0x004f
0x085b: LOAD_REAL 8.000000
0x085c: SUB
0x085d: STORE_VAR power_result
0x085e: LOAD_VAR power_result
0x085f: PUSH_ARGS 1
0x0860: CALL 0x000c
0x0861: STORE_VAR temp1
0x0862: LOAD_VAR temp1
0x0863: LOAD_REAL 0.100000
0x0864: LT
0x0865: JZ 0x086b
0x0866: LOAD_VAR pass_counter
0x0867: LOAD_INT 1
0x0868: ADD
0x0869: STORE_VAR pass_counter
0x086a: JMP 0x086f
0x086b: LOAD_VAR fail_counter
0x086c: LOAD_INT 1
0x086d: ADD
0x086e: STORE_VAR fail_counter
0x086f: LOAD_VAR test_counter
0x0870: LOAD_INT 1
0x0871: ADD
0x0872: STORE_VAR test_counter
0x0873: LOAD_BOOL TRUE
0x0874: STORE_VAR test_bool1
0x0875: LOAD_BOOL TRUE
0x0876: STORE_VAR test_bool2
0x0877: LOAD_BOOL FALSE
0x0878: STORE_VAR test_bool3
0x0879: LOAD_VAR test_bool1
0x087a: LOAD_VAR test_bool2
0x087b: LOAD_VAR test_bool3
0x087c: PUSH_ARGS 3
0x087d: CALL 0x01bd
0x087e: STORE_VAR vote_2oo3_output
0x087f: LOAD_VAR vote_2oo3_output
0x0880: LOAD_BOOL TRUE
0x0881: EQ
0x0882: JZ 0x0886
0x0883: LOAD_REAL 10.000000
0x0884: STORE_VAR temp_val
0x0885: JMP 0x0888
0x0886: LOAD_REAL 0.000000
0x0887: STORE_VAR temp_val
0x0888: LOAD_REAL 5.000000
0x0889: STORE_VAR temp1
0x088a: LOAD_REAL 0.500000
0x088b: STORE_VAR temp2
0x088c: LOAD_VAR temp_val
0x088d: LOAD_VAR temp2
0x088e: LOAD_VAR temp1
0x088f: PUSH_ARGS 3
0x0890: CALL 0x0213
0x0891: LOAD_REAL 7.500000
0x0892: SUB
0x0893: STORE_VAR filter_output
0x0894: LOAD_VAR filter_output
0x0895: PUSH_ARGS 1
0x0896: CALL 0x000c
0x0897: STORE_VAR temp3
0x0898: LOAD_VAR temp3
0x0899: LOAD_REAL 0.100000
0x089a: LT
0x089b: JZ 0x08a1
0x089c: LOAD_VAR pass_counter
0x089d: LOAD_INT 1
0x089e: ADD
0x089f: STORE_VAR pass_counter
0x08a0: JMP 0x08a5
0x08a1: LOAD_VAR fail_counter
0x08a2: LOAD_INT 1
0x08a3: ADD
0x08a4: STORE_VAR fail_counter
0x08a5: LOAD_VAR test_counter
0x08a6: LOAD_INT 1
0x08a7: ADD
0x08a8: STORE_VAR test_counter
0x08a9: LOAD_REAL 0.000000
0x08aa: STORE_VAR temp_val
0x08ab: LOAD_INT 1
0x08ac: STORE_VAR i
0x08ad: LOAD_VAR i
0x08ae: LOAD_INT 10
0x08af: LE
0x08b0: JZ 0x08ba
0x08b1: LOAD_VAR temp_val
0x08b2: LOAD_VAR i
0x08b3: ADD
0x08b4: STORE_VAR temp_val
0x08b5: LOAD_VAR i
0x08b6: LOAD_INT 1
0x08b7: ADD
0x08b8: STORE_VAR i
0x08b9: JMP 0x08ad
0x08ba: LOAD_VAR temp_val
0x08bb: LOAD_REAL 55.000000
0x08bc: EQ
0x08bd: JZ 0x08c3
0x08be: LOAD_VAR pass_counter
0x08bf: LOAD_INT 1
0x08c0: ADD
0x08c1: STORE_VAR pass_counter
0x08c2: JMP 0x08c7
0x08c3: LOAD_VAR fail_counter
0x08c4: LOAD_INT 1
0x08c5: ADD
0x08c6: STORE_VAR fail_counter
0x08c7: LOAD_VAR test_counter
0x08c8: LOAD_INT 1
0x08c9: ADD
0x08ca: STORE_VAR test_counter
0x08cb: LOAD_INT 1
0x08cc: STORE_VAR temp_int
0x08cd: LOAD_REAL 1.000000
0x08ce: STORE_VAR temp_val
0x08cf: LOAD_VAR temp_int
0x08d0: LOAD_INT 5
0x08d1: LE
0x08d2: JZ 0x08dc
0x08d3: LOAD_VAR temp_val
0x08d4: LOAD_VAR temp_int
0x08d5: MUL
0x08d6: STORE_VAR temp_val
0x08d7: LOAD_VAR temp_int
0x08d8: LOAD_INT 1
0x08d9: ADD
0x08da: STORE_VAR temp_int
0x08db: JMP 0x08cf
0x08dc: LOAD_VAR temp_val
0x08dd: LOAD_REAL 120.000000
0x08de: EQ
0x08df: JZ 0x08e5
0x08e0: LOAD_VAR pass_counter
0x08e1: LOAD_INT 1
0x08e2: ADD
0x08e3: STORE_VAR pass_counter
0x08e4: JMP 0x08e9
0x08e5: LOAD_VAR fail_counter
0x08e6: LOAD_INT 1
0x08e7: ADD
0x08e8: STORE_VAR fail_counter
0x08e9: LOAD_VAR test_counter
0x08ea: LOAD_INT 1
0x08eb: ADD
0x08ec: STORE_VAR test_counter
0x08ed: LOAD_REAL 0.000000
0x08ee: STORE_VAR temp_val
0x08ef: LOAD_INT 1
0x08f0: STORE_VAR i
0x08f1: LOAD_VAR i
0x08f2: LOAD_INT 5
0x08f3: LE
0x08f4: JZ 0x0909
0x08f5: LOAD_INT 1
0x08f6: STORE_VAR j
0x08f7: LOAD_VAR j
0x08f8: LOAD_INT 3
0x08f9: LE
0x08fa: JZ 0x0904
0x08fb: LOAD_VAR temp_val
0x08fc: LOAD_REAL 1.000000
0x08fd: ADD
0x08fe: STORE_VAR temp_val
0x08ff: LOAD_VAR j
0x0900: LOAD_INT 1
0x0901: ADD
0x0902: STORE_VAR j
0x0903: JMP 0x08f7
0x0904: LOAD_VAR i
0x0905: LOAD_INT 1
0x0906: ADD
0x0907: STORE_VAR i
0x0908: JMP 0x08f1
0x0909: LOAD_VAR temp_val
0x090a: LOAD_REAL 15.000000
0x090b: EQ
0x090c: JZ 0x0912
0x090d: LOAD_VAR pass_counter
0x090e: LOAD_INT 1
0x090f: ADD
0x0910: STORE_VAR pass_counter
0x0911: JMP 0x0916
0x0912: LOAD_VAR fail_counter
0x0913: LOAD_INT 1
0x0914: ADD
0x0915: STORE_VAR fail_counter
0x0916: LOAD_VAR test_counter
0x0917: LOAD_INT 1
0x0918: ADD
0x0919: STORE_VAR test_counter
0x091a: LOAD_REAL 0.000000
0x091b: STORE_VAR test_real1
0x091c: LOAD_VAR test_real1
0x091d: PUSH_ARGS 1
0x091e: CALL 0x0070
0x091f: STORE_VAR sqrt_result
0x0920: LOAD_VAR sqrt_result
0x0921: LOAD_REAL 0.000000
0x0922: EQ
0x0923: JZ 0x0929
0x0924: LOAD_VAR pass_counter
0x0925: LOAD_INT 1
0x0926: ADD
0x0927: STORE_VAR pass_counter
0x0928: JMP 0x092d
0x0929: LOAD_VAR fail_counter
0x092a: LOAD_INT 1
0x092b: ADD
0x092c: STORE_VAR fail_counter
0x092d: LOAD_VAR test_counter
0x092e: LOAD_INT 1
0x092f: ADD
0x0930: STORE_VAR test_counter
0x0931: LOAD_REAL 0.000000
0x0932: STORE_VAR test_real1
0x0933: LOAD_VAR test_real1
0x0934: PUSH_ARGS 1
0x0935: CALL 0x00b1
0x0936: STORE_VAR cbrt_result
0x0937: LOAD_VAR cbrt_result
0x0938: LOAD_REAL 0.000000
0x0939: EQ
0x093a: JZ 0x0940
0x093b: LOAD_VAR pass_counter
0x093c: LOAD_INT 1
0x093d: ADD
0x093e: STORE_VAR pass_counter
0x093f: JMP 0x0944
0x0940: LOAD_VAR fail_counter
0x0941: LOAD_INT 1
0x0942: ADD
0x0943: STORE_VAR fail_counter
0x0944: LOAD_VAR test_counter
0x0945: LOAD_INT 1
0x0946: ADD
0x0947: STORE_VAR test_counter
0x0948: LOAD_REAL 1000.000000
0x0949: STORE_VAR test_real1
0x094a: LOAD_REAL 10.000000
0x094b: STORE_VAR test_real2
0x094c: LOAD_VAR test_real1
0x094d: LOAD_VAR test_real2
0x094e: PUSH_ARGS 2
0x094f: CALL 0x002e
0x0950: STORE_VAR max_result
0x0951: LOAD_VAR max_result
0x0952: LOAD_REAL 1000.000000
0x0953: EQ
0x0954: JZ 0x095a
0x0955: LOAD_VAR pass_counter
0x0956: LOAD_INT 1
0x0957: ADD
0x0958: STORE_VAR pass_counter
0x0959: JMP 0x095e
0x095a: LOAD_VAR fail_counter
0x095b: LOAD_INT 1
0x095c: ADD
0x095d: STORE_VAR fail_counter
0x095e: LOAD_VAR test_counter
0x095f: LOAD_INT 1
0x0960: ADD
0x0961: STORE_VAR test_counter
0x0962: LOAD_REAL -100.000000
0x0963: STORE_VAR test_real1
0x0964: LOAD_VAR test_real1
0x0965: PUSH_ARGS 1
0x0966: CALL 0x000c
0x0967: STORE_VAR abs_result
0x0968: LOAD_VAR abs_result
0x0969: LOAD_REAL 100.000000
0x096a: EQ
0x096b: JZ 0x0971
0x096c: LOAD_VAR pass_counter
0x096d: LOAD_INT 1
0x096e: ADD
0x096f: STORE_VAR pass_counter
0x0970: JMP 0x0975
0x0971: LOAD_VAR fail_counter
0x0972: LOAD_INT 1
0x0973: ADD
0x0974: STORE_VAR fail_counter
0x0975: LOAD_VAR test_counter
0x0976: LOAD_INT 1
0x0977: ADD
0x0978: STORE_VAR test_counter
0x0979: LOAD_REAL 0.000000
0x097a: STORE_VAR temp_val
0x097b: LOAD_INT 1
0x097c: STORE_VAR i
0x097d: LOAD_VAR i
0x097e: LOAD_INT 50
0x097f: LE
0x0980: JZ 0x0990
0x0981: LOAD_VAR i
0x0982: STORE_VAR test_real1
0x0983: LOAD_VAR test_real1
0x0984: PUSH_ARGS 1
0x0985: CALL 0x0070
0x0986: STORE_VAR sqrt_result
0x0987: LOAD_VAR temp_val
0x0988: LOAD_VAR sqrt_result
0x0989: ADD
0x098a: STORE_VAR temp_val
0x098b: LOAD_VAR i
0x098c: LOAD_INT 1
0x098d: ADD
0x098e: STORE_VAR i
0x098f: JMP 0x097d
0x0990: LOAD_VAR temp_val
0x0991: LOAD_REAL 200.000000
0x0992: GT
0x0993: JZ 0x0999
0x0994: LOAD_VAR pass_counter
0x0995: LOAD_INT 1
0x0996: ADD
0x0997: STORE_VAR pass_counter
0x0998: JMP 0x099d
0x0999: LOAD_VAR fail_counter
0x099a: LOAD_INT 1
0x099b: ADD
0x099c: STORE_VAR fail_counter
0x099d: LOAD_VAR test_counter
0x099e: LOAD_INT 1
0x099f: ADD
0x09a0: STORE_VAR test_counter
0x09a1: LOAD_REAL 0.000000
0x09a2: STORE_VAR filter_last
0x09a3: LOAD_INT 1
0x09a4: STORE_VAR i
0x09a5: LOAD_VAR i
0x09a6: LOAD_INT 20
0x09a7: LE
0x09a8: JZ 0x09b8
0x09a9: LOAD_REAL 10.000000
0x09aa: STORE_VAR test_real1
0x09ab: LOAD_REAL 0.100000
0x09ac: STORE_VAR test_real2
0x09ad: LOAD_VAR test_real1
0x09ae: LOAD_VAR test_real2
0x09af: LOAD_VAR filter_last
0x09b0: PUSH_ARGS 3
0x09b1: CALL 0x0213
0x09b2: STORE_VAR filter_last
0x09b3: LOAD_VAR i
0x09b4: LOAD_INT 1
0x09b5: ADD
0x09b6: STORE_VAR i
0x09b7: JMP 0x09a5
0x09b8: LOAD_VAR filter_last
0x09b9: LOAD_REAL 10.000000
0x09ba: SUB
0x09bb: STORE_VAR filter_last
0x09bc: LOAD_VAR filter_last
0x09bd: PUSH_ARGS 1
0x09be: CALL 0x000c
0x09bf: STORE_VAR temp1
0x09c0: LOAD_VAR temp1
0x09c1: LOAD_REAL 1.000000
0x09c2: LT
0x09c3: JZ 0x09c9
0x09c4: LOAD_VAR pass_counter
0x09c5: LOAD_INT 1
0x09c6: ADD
0x09c7: STORE_VAR pass_counter
0x09c8: JMP 0x09cd
0x09c9: LOAD_VAR fail_counter
0x09ca: LOAD_INT 1
0x09cb: ADD
0x09cc: STORE_VAR fail_counter
0x09cd: LOAD_VAR pass_counter
0x09ce: STORE_VAR temp_val
0x09cf: LOAD_VAR test_counter
0x09d0: STORE_VAR temp1
0x09d1: LOAD_VAR temp_val
0x09d2: LOAD_VAR temp1
0x09d3: DIV
0x09d4: LOAD_REAL 100.000000
0x09d5: MUL
0x09d6: STORE_VAR success_rate
0x09d7: LOAD_VAR pass_counter
0x09d8: STORE_VAR test_real1
0x09d9: LOAD_VAR fail_counter
0x09da: STORE_VAR test_real2
0x09db: LOAD_VAR success_rate
0x09dc: STORE_VAR temp_val
0x09dd: HALT
总共 2526 条指令
==============
===================

=== 开始执行 ===
PC=0x02a9: LOAD_INT 0
PC=0x02aa: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 0
PC=0x02ab: LOAD_INT 0
PC=0x02ac: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 0
PC=0x02ad: LOAD_INT 0
PC=0x02ae: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 0
PC=0x02af: LOAD_VAR test_counter
  变量值: 0
PC=0x02b0: LOAD_INT 1
PC=0x02b1: ADD
  0 + 1 = 1
PC=0x02b2: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 1
PC=0x02b3: LOAD_INT -25
PC=0x02b4: STORE_VAR test_int1
  更新变量: test_int1
  存储值: -25
PC=0x02b5: LOAD_VAR test_int1
  变量值: -25
PC=0x02b6: PUSH_ARGS 1
PC=0x02b7: CALL 0x0000
  调用函数@0x0000, 参数个数: 1
  设置函数参数 (函数名: ABS_INT):
  创建栈帧: 返回地址=0x02b8, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0000
PC=0x0000: LOAD_VAR input_val
  变量值: 0
PC=0x0001: LOAD_INT 0
PC=0x0002: GE
  0 >= 0 = TRUE
PC=0x0003: JZ 7
  条件为真，继续执行
PC=0x0004: LOAD_VAR input_val
  变量值: 0
PC=0x0005: STORE_VAR ABS_INT
  创建新变量: ABS_INT
  存储值: 0
PC=0x0006: JMP 10
  跳转到 PC=0x000a
PC=0x000a: LOAD_INT 0
PC=0x000b: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x02b8
  返回值已压入栈顶
PC=0x02b8: STORE_VAR test_result_int
  更新变量: test_result_int
  存储值: 0
PC=0x02b9: LOAD_VAR test_result_int
  变量值: 0
PC=0x02ba: LOAD_INT 25
PC=0x02bb: EQ
  0 == 25 = FALSE
PC=0x02bc: JZ 706
  跳转到 PC=0x02c2
PC=0x02c2: LOAD_VAR fail_counter
  变量值: 0
PC=0x02c3: LOAD_INT 1
PC=0x02c4: ADD
  0 + 1 = 1
PC=0x02c5: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 1
PC=0x02c6: LOAD_VAR test_counter
  变量值: 1
PC=0x02c7: LOAD_INT 1
PC=0x02c8: ADD
  1 + 1 = 2
PC=0x02c9: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 2
PC=0x02ca: LOAD_REAL -15.700000
PC=0x02cb: STORE_VAR test_real1
  更新变量: test_real1
  存储值: -15.700000
PC=0x02cc: LOAD_VAR test_real1
  变量值: -15.700000
PC=0x02cd: PUSH_ARGS 1
PC=0x02ce: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x02cf, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  创建新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x02cf
  返回值已压入栈顶
PC=0x02cf: STORE_VAR abs_result
  更新变量: abs_result
  存储值: 0
PC=0x02d0: LOAD_VAR abs_result
  变量值: 0
PC=0x02d1: LOAD_REAL 15.700000
PC=0x02d2: EQ
  0 == 1717986918 = FALSE
PC=0x02d3: JZ 729
  跳转到 PC=0x02d9
PC=0x02d9: LOAD_VAR fail_counter
  变量值: 1
PC=0x02da: LOAD_INT 1
PC=0x02db: ADD
  1 + 1 = 2
PC=0x02dc: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 2
PC=0x02dd: LOAD_VAR test_counter
  变量值: 2
PC=0x02de: LOAD_INT 1
PC=0x02df: ADD
  2 + 1 = 3
PC=0x02e0: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 3
PC=0x02e1: LOAD_INT 42
PC=0x02e2: STORE_VAR test_int1
  更新变量: test_int1
  存储值: 42
PC=0x02e3: LOAD_INT 37
PC=0x02e4: STORE_VAR test_int2
  更新变量: test_int2
  存储值: 37
PC=0x02e5: LOAD_VAR test_int1
  变量值: 42
PC=0x02e6: LOAD_VAR test_int2
  变量值: 37
PC=0x02e7: PUSH_ARGS 2
PC=0x02e8: CALL 0x0018
  调用函数@0x0018, 参数个数: 2
  设置函数参数 (函数名: MAX_INT):
  创建栈帧: 返回地址=0x02e9, 帧指针=-2, 参数个数=2
  跳转到函数地址: 0x0018
PC=0x0018: LOAD_VAR val1
  变量值: 0
PC=0x0019: LOAD_VAR val2
  变量值: 0
PC=0x001a: GT
  0 > 0 = FALSE
PC=0x001b: JZ 31
  跳转到 PC=0x001f
PC=0x001f: LOAD_VAR val2
  变量值: 0
PC=0x0020: STORE_VAR MAX_INT
  创建新变量: MAX_INT
  存储值: 0
PC=0x0021: LOAD_INT 0
PC=0x0022: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x02e9
  返回值已压入栈顶
PC=0x02e9: STORE_VAR test_result_int
  更新变量: test_result_int
  存储值: 0
PC=0x02ea: LOAD_VAR test_result_int
  变量值: 0
PC=0x02eb: LOAD_INT 42
PC=0x02ec: EQ
  0 == 42 = FALSE
PC=0x02ed: JZ 755
  跳转到 PC=0x02f3
PC=0x02f3: LOAD_VAR fail_counter
  变量值: 2
PC=0x02f4: LOAD_INT 1
PC=0x02f5: ADD
  2 + 1 = 3
PC=0x02f6: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 3
PC=0x02f7: LOAD_VAR test_counter
  变量值: 3
PC=0x02f8: LOAD_INT 1
PC=0x02f9: ADD
  3 + 1 = 4
PC=0x02fa: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 4
PC=0x02fb: LOAD_VAR test_int1
  变量值: 42
PC=0x02fc: LOAD_VAR test_int2
  变量值: 37
PC=0x02fd: PUSH_ARGS 2
PC=0x02fe: CALL 0x0023
  调用函数@0x0023, 参数个数: 2
  设置函数参数 (函数名: MIN_INT):
  创建栈帧: 返回地址=0x02ff, 帧指针=-2, 参数个数=2
  跳转到函数地址: 0x0023
PC=0x0023: LOAD_VAR val1
  变量值: 0
PC=0x0024: LOAD_VAR val2
  变量值: 0
PC=0x0025: LT
  0 < 0 = FALSE
PC=0x0026: JZ 42
  跳转到 PC=0x002a
PC=0x002a: LOAD_VAR val2
  变量值: 0
PC=0x002b: STORE_VAR MIN_INT
  创建新变量: MIN_INT
  存储值: 0
PC=0x002c: LOAD_INT 0
PC=0x002d: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x02ff
  返回值已压入栈顶
PC=0x02ff: STORE_VAR test_result_int
  更新变量: test_result_int
  存储值: 0
PC=0x0300: LOAD_VAR test_result_int
  变量值: 0
PC=0x0301: LOAD_INT 37
PC=0x0302: EQ
  0 == 37 = FALSE
PC=0x0303: JZ 777
  跳转到 PC=0x0309
PC=0x0309: LOAD_VAR fail_counter
  变量值: 3
PC=0x030a: LOAD_INT 1
PC=0x030b: ADD
  3 + 1 = 4
PC=0x030c: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 4
PC=0x030d: LOAD_VAR test_counter
  变量值: 4
PC=0x030e: LOAD_INT 1
PC=0x030f: ADD
  4 + 1 = 5
PC=0x0310: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 5
PC=0x0311: LOAD_REAL 23.800000
PC=0x0312: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 23.800000
PC=0x0313: LOAD_REAL 19.400000
PC=0x0314: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 19.400000
PC=0x0315: LOAD_VAR test_real1
  变量值: 23.800000
PC=0x0316: LOAD_VAR test_real2
  变量值: 19.400000
PC=0x0317: PUSH_ARGS 2
PC=0x0318: CALL 0x002e
  调用函数@0x002e, 参数个数: 2
  设置函数参数 (函数名: MAX_REAL):
  创建栈帧: 返回地址=0x0319, 帧指针=-2, 参数个数=2
  跳转到函数地址: 0x002e
PC=0x002e: LOAD_VAR val1
  变量值: 0
PC=0x002f: LOAD_VAR val2
  变量值: 0
PC=0x0030: GT
  0 > 0 = FALSE
PC=0x0031: JZ 53
  跳转到 PC=0x0035
PC=0x0035: LOAD_VAR val2
  变量值: 0
PC=0x0036: STORE_VAR MAX_REAL
  创建新变量: MAX_REAL
  存储值: 0
PC=0x0037: LOAD_INT 0
PC=0x0038: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0319
  返回值已压入栈顶
PC=0x0319: STORE_VAR max_result
  更新变量: max_result
  存储值: 0
PC=0x031a: LOAD_VAR max_result
  变量值: 0
PC=0x031b: LOAD_REAL 23.800000
PC=0x031c: EQ
  0 == -858993459 = FALSE
PC=0x031d: JZ 803
  跳转到 PC=0x0323
PC=0x0323: LOAD_VAR fail_counter
  变量值: 4
PC=0x0324: LOAD_INT 1
PC=0x0325: ADD
  4 + 1 = 5
PC=0x0326: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 5
PC=0x0327: LOAD_VAR test_counter
  变量值: 5
PC=0x0328: LOAD_INT 1
PC=0x0329: ADD
  5 + 1 = 6
PC=0x032a: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 6
PC=0x032b: LOAD_VAR test_real1
  变量值: 23.800000
PC=0x032c: LOAD_VAR test_real2
  变量值: 19.400000
PC=0x032d: PUSH_ARGS 2
PC=0x032e: CALL 0x0039
  调用函数@0x0039, 参数个数: 2
  设置函数参数 (函数名: MIN_REAL):
  创建栈帧: 返回地址=0x032f, 帧指针=-2, 参数个数=2
  跳转到函数地址: 0x0039
PC=0x0039: LOAD_VAR val1
  变量值: 0
PC=0x003a: LOAD_VAR val2
  变量值: 0
PC=0x003b: LT
  0 < 0 = FALSE
PC=0x003c: JZ 64
  跳转到 PC=0x0040
PC=0x0040: LOAD_VAR val2
  变量值: 0
PC=0x0041: STORE_VAR MIN_REAL
  创建新变量: MIN_REAL
  存储值: 0
PC=0x0042: LOAD_INT 0
PC=0x0043: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x032f
  返回值已压入栈顶
PC=0x032f: STORE_VAR min_result
  更新变量: min_result
  存储值: 0
PC=0x0330: LOAD_VAR min_result
  变量值: 0
PC=0x0331: LOAD_REAL 19.400000
PC=0x0332: EQ
  0 == 1717986918 = FALSE
PC=0x0333: JZ 825
  跳转到 PC=0x0339
PC=0x0339: LOAD_VAR fail_counter
  变量值: 5
PC=0x033a: LOAD_INT 1
PC=0x033b: ADD
  5 + 1 = 6
PC=0x033c: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 6
PC=0x033d: LOAD_VAR test_counter
  变量值: 6
PC=0x033e: LOAD_INT 1
PC=0x033f: ADD
  6 + 1 = 7
PC=0x0340: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 7
PC=0x0341: LOAD_REAL 18.500000
PC=0x0342: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 18.500000
PC=0x0343: LOAD_VAR test_real1
  变量值: 18.500000
PC=0x0344: PUSH_ARGS 1
PC=0x0345: CALL 0x0044
  调用函数@0x0044, 参数个数: 1
  设置函数参数 (函数名: SIGN):
  创建栈帧: 返回地址=0x0346, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0044
PC=0x0044: LOAD_VAR input_val
  变量值: 0
PC=0x0045: LOAD_REAL 0.000000
PC=0x0046: GT
  0 > 0 = FALSE
PC=0x0047: JZ 75
  跳转到 PC=0x004b
PC=0x004b: LOAD_INT 0
PC=0x004c: STORE_VAR SIGN
  创建新变量: SIGN
  存储值: 0
PC=0x004d: LOAD_INT 0
PC=0x004e: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0346
  返回值已压入栈顶
PC=0x0346: STORE_VAR sign_result
  更新变量: sign_result
  存储值: 0
PC=0x0347: LOAD_VAR sign_result
  变量值: 0
PC=0x0348: LOAD_INT 1
PC=0x0349: EQ
  0 == 1 = FALSE
PC=0x034a: JZ 848
  跳转到 PC=0x0350
PC=0x0350: LOAD_VAR fail_counter
  变量值: 6
PC=0x0351: LOAD_INT 1
PC=0x0352: ADD
  6 + 1 = 7
PC=0x0353: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 7
PC=0x0354: LOAD_VAR test_counter
  变量值: 7
PC=0x0355: LOAD_INT 1
PC=0x0356: ADD
  7 + 1 = 8
PC=0x0357: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 8
PC=0x0358: LOAD_REAL -12.300000
PC=0x0359: STORE_VAR test_real1
  更新变量: test_real1
  存储值: -12.300000
PC=0x035a: LOAD_VAR test_real1
  变量值: -12.300000
PC=0x035b: PUSH_ARGS 1
PC=0x035c: CALL 0x0044
  调用函数@0x0044, 参数个数: 1
  设置函数参数 (函数名: SIGN):
  创建栈帧: 返回地址=0x035d, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0044
PC=0x0044: LOAD_VAR input_val
  变量值: 0
PC=0x0045: LOAD_REAL 0.000000
PC=0x0046: GT
  0 > 0 = FALSE
PC=0x0047: JZ 75
  跳转到 PC=0x004b
PC=0x004b: LOAD_INT 0
PC=0x004c: STORE_VAR SIGN
  更新变量: SIGN
  存储值: 0
PC=0x004d: LOAD_INT 0
PC=0x004e: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x035d
  返回值已压入栈顶
PC=0x035d: STORE_VAR sign_result
  更新变量: sign_result
  存储值: 0
PC=0x035e: LOAD_VAR sign_result
  变量值: 0
PC=0x035f: LOAD_INT -1
PC=0x0360: EQ
  0 == -1 = FALSE
PC=0x0361: JZ 871
  跳转到 PC=0x0367
PC=0x0367: LOAD_VAR fail_counter
  变量值: 7
PC=0x0368: LOAD_INT 1
PC=0x0369: ADD
  7 + 1 = 8
PC=0x036a: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 8
PC=0x036b: LOAD_VAR test_counter
  变量值: 8
PC=0x036c: LOAD_INT 1
PC=0x036d: ADD
  8 + 1 = 9
PC=0x036e: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 9
PC=0x036f: LOAD_REAL 0.000000
PC=0x0370: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 0.000000
PC=0x0371: LOAD_VAR test_real1
  变量值: 0.000000
PC=0x0372: PUSH_ARGS 1
PC=0x0373: CALL 0x0044
  调用函数@0x0044, 参数个数: 1
  设置函数参数 (函数名: SIGN):
  创建栈帧: 返回地址=0x0374, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0044
PC=0x0044: LOAD_VAR input_val
  变量值: 0
PC=0x0045: LOAD_REAL 0.000000
PC=0x0046: GT
  0 > 0 = FALSE
PC=0x0047: JZ 75
  跳转到 PC=0x004b
PC=0x004b: LOAD_INT 0
PC=0x004c: STORE_VAR SIGN
  更新变量: SIGN
  存储值: 0
PC=0x004d: LOAD_INT 0
PC=0x004e: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0374
  返回值已压入栈顶
PC=0x0374: STORE_VAR sign_result
  更新变量: sign_result
  存储值: 0
PC=0x0375: LOAD_VAR sign_result
  变量值: 0
PC=0x0376: LOAD_INT 0
PC=0x0377: EQ
  0 == 0 = TRUE
PC=0x0378: JZ 894
  条件为真，继续执行
PC=0x0379: LOAD_VAR pass_counter
  变量值: 0
PC=0x037a: LOAD_INT 1
PC=0x037b: ADD
  0 + 1 = 1
PC=0x037c: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 1
PC=0x037d: JMP 898
  跳转到 PC=0x0382
PC=0x0382: LOAD_VAR test_counter
  变量值: 9
PC=0x0383: LOAD_INT 1
PC=0x0384: ADD
  9 + 1 = 10
PC=0x0385: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 10
PC=0x0386: LOAD_REAL 3.000000
PC=0x0387: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 3.000000
PC=0x0388: LOAD_INT 4
PC=0x0389: STORE_VAR test_int1
  更新变量: test_int1
  存储值: 4
PC=0x038a: LOAD_VAR test_real1
  变量值: 3.000000
PC=0x038b: LOAD_VAR test_int1
  变量值: 4
PC=0x038c: PUSH_ARGS 2
PC=0x038d: CALL 0x004f
  调用函数@0x004f, 参数个数: 2
  设置函数参数 (函数名: POWER_INT):
  创建栈帧: 返回地址=0x038e, 帧指针=-2, 参数个数=2
  跳转到函数地址: 0x004f
PC=0x004f: LOAD_REAL 1.000000
PC=0x0050: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0051: LOAD_VAR exponent
  变量值: 0
PC=0x0052: PUSH_ARGS 1
PC=0x0053: CALL 0x0000
  调用函数@0x0000, 参数个数: 1
  设置函数参数 (函数名: ABS_INT):
  创建栈帧: 返回地址=0x0054, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0000
PC=0x0000: LOAD_VAR input_val
  变量值: 0
PC=0x0001: LOAD_INT 0
PC=0x0002: GE
  0 >= 0 = TRUE
PC=0x0003: JZ 7
  条件为真，继续执行
PC=0x0004: LOAD_VAR input_val
  变量值: 0
PC=0x0005: STORE_VAR ABS_INT
  更新变量: ABS_INT
  存储值: 0
PC=0x0006: JMP 10
  跳转到 PC=0x000a
PC=0x000a: LOAD_INT 0
PC=0x000b: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0054
  返回值已压入栈顶
PC=0x0054: STORE_VAR temp_exp
  更新变量: temp_exp
  存储值: 0
PC=0x0055: LOAD_INT 1
PC=0x0056: STORE_VAR i
  更新变量: i
  存储值: 1
PC=0x0057: LOAD_VAR i
  变量值: 1
PC=0x0058: LOAD_VAR temp_exp
  变量值: 0
PC=0x0059: LE
  1 <= 0 = FALSE
PC=0x005a: JZ 100
  跳转到 PC=0x0064
PC=0x0064: LOAD_VAR exponent
  变量值: 0
PC=0x0065: LOAD_INT 0
PC=0x0066: LT
  0 < 0 = FALSE
PC=0x0067: JZ 108
  跳转到 PC=0x006c
PC=0x006c: LOAD_VAR result
  变量值: 1.000000
PC=0x006d: STORE_VAR POWER_INT
  创建新变量: POWER_INT
  存储值: 1.000000
PC=0x006e: LOAD_INT 0
PC=0x006f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x038e
  返回值已压入栈顶
PC=0x038e: LOAD_REAL 81.000000
PC=0x038f: SUB
  0.000000 - 81.000000 = -81.000000
PC=0x0390: STORE_VAR power_result
  更新变量: power_result
  存储值: -81.000000
PC=0x0391: LOAD_VAR power_result
  变量值: -81.000000
PC=0x0392: PUSH_ARGS 1
PC=0x0393: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x0394, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0394
  返回值已压入栈顶
PC=0x0394: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x0395: LOAD_VAR temp1
  变量值: 0
PC=0x0396: LOAD_REAL 0.010000
PC=0x0397: LT
  0 < 1202590843 = TRUE
PC=0x0398: JZ 926
  条件为真，继续执行
PC=0x0399: LOAD_VAR pass_counter
  变量值: 1
PC=0x039a: LOAD_INT 1
PC=0x039b: ADD
  1 + 1 = 2
PC=0x039c: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 2
PC=0x039d: JMP 930
  跳转到 PC=0x03a2
PC=0x03a2: LOAD_VAR test_counter
  变量值: 10
PC=0x03a3: LOAD_INT 1
PC=0x03a4: ADD
  10 + 1 = 11
PC=0x03a5: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 11
PC=0x03a6: LOAD_REAL 2.000000
PC=0x03a7: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 2.000000
PC=0x03a8: LOAD_INT 0
PC=0x03a9: STORE_VAR test_int1
  更新变量: test_int1
  存储值: 0
PC=0x03aa: LOAD_VAR test_real1
  变量值: 2.000000
PC=0x03ab: LOAD_VAR test_int1
  变量值: 0
PC=0x03ac: PUSH_ARGS 2
PC=0x03ad: CALL 0x004f
  调用函数@0x004f, 参数个数: 2
  设置函数参数 (函数名: POWER_INT):
  创建栈帧: 返回地址=0x03ae, 帧指针=-2, 参数个数=2
  跳转到函数地址: 0x004f
PC=0x004f: LOAD_REAL 1.000000
PC=0x0050: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0051: LOAD_VAR exponent
  变量值: 0
PC=0x0052: PUSH_ARGS 1
PC=0x0053: CALL 0x0000
  调用函数@0x0000, 参数个数: 1
  设置函数参数 (函数名: ABS_INT):
  创建栈帧: 返回地址=0x0054, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0000
PC=0x0000: LOAD_VAR input_val
  变量值: 0
PC=0x0001: LOAD_INT 0
PC=0x0002: GE
  0 >= 0 = TRUE
PC=0x0003: JZ 7
  条件为真，继续执行
PC=0x0004: LOAD_VAR input_val
  变量值: 0
PC=0x0005: STORE_VAR ABS_INT
  更新变量: ABS_INT
  存储值: 0
PC=0x0006: JMP 10
  跳转到 PC=0x000a
PC=0x000a: LOAD_INT 0
PC=0x000b: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0054
  返回值已压入栈顶
PC=0x0054: STORE_VAR temp_exp
  更新变量: temp_exp
  存储值: 0
PC=0x0055: LOAD_INT 1
PC=0x0056: STORE_VAR i
  更新变量: i
  存储值: 1
PC=0x0057: LOAD_VAR i
  变量值: 1
PC=0x0058: LOAD_VAR temp_exp
  变量值: 0
PC=0x0059: LE
  1 <= 0 = FALSE
PC=0x005a: JZ 100
  跳转到 PC=0x0064
PC=0x0064: LOAD_VAR exponent
  变量值: 0
PC=0x0065: LOAD_INT 0
PC=0x0066: LT
  0 < 0 = FALSE
PC=0x0067: JZ 108
  跳转到 PC=0x006c
PC=0x006c: LOAD_VAR result
  变量值: 1.000000
PC=0x006d: STORE_VAR POWER_INT
  更新变量: POWER_INT
  存储值: 1.000000
PC=0x006e: LOAD_INT 0
PC=0x006f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x03ae
  返回值已压入栈顶
PC=0x03ae: LOAD_REAL 1.000000
PC=0x03af: SUB
  0.000000 - 1.000000 = -1.000000
PC=0x03b0: STORE_VAR power_result
  更新变量: power_result
  存储值: -1.000000
PC=0x03b1: LOAD_VAR power_result
  变量值: -1.000000
PC=0x03b2: PUSH_ARGS 1
PC=0x03b3: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x03b4, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x03b4
  返回值已压入栈顶
PC=0x03b4: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x03b5: LOAD_VAR temp1
  变量值: 0
PC=0x03b6: LOAD_REAL 0.010000
PC=0x03b7: LT
  0 < 1202590843 = TRUE
PC=0x03b8: JZ 958
  条件为真，继续执行
PC=0x03b9: LOAD_VAR pass_counter
  变量值: 2
PC=0x03ba: LOAD_INT 1
PC=0x03bb: ADD
  2 + 1 = 3
PC=0x03bc: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 3
PC=0x03bd: JMP 962
  跳转到 PC=0x03c2
PC=0x03c2: LOAD_VAR test_counter
  变量值: 11
PC=0x03c3: LOAD_INT 1
PC=0x03c4: ADD
  11 + 1 = 12
PC=0x03c5: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 12
PC=0x03c6: LOAD_REAL 49.000000
PC=0x03c7: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 49.000000
PC=0x03c8: LOAD_VAR test_real1
  变量值: 49.000000
PC=0x03c9: PUSH_ARGS 1
PC=0x03ca: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x03cb, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  创建新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x03cb
  返回值已压入栈顶
PC=0x03cb: LOAD_REAL 7.000000
PC=0x03cc: SUB
  0.000000 - 7.000000 = -7.000000
PC=0x03cd: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: -7.000000
PC=0x03ce: LOAD_VAR sqrt_result
  变量值: -7.000000
PC=0x03cf: PUSH_ARGS 1
PC=0x03d0: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x03d1, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x03d1
  返回值已压入栈顶
PC=0x03d1: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x03d2: LOAD_VAR temp1
  变量值: 0
PC=0x03d3: LOAD_REAL 0.010000
PC=0x03d4: LT
  0 < 1202590843 = TRUE
PC=0x03d5: JZ 987
  条件为真，继续执行
PC=0x03d6: LOAD_VAR pass_counter
  变量值: 3
PC=0x03d7: LOAD_INT 1
PC=0x03d8: ADD
  3 + 1 = 4
PC=0x03d9: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 4
PC=0x03da: JMP 991
  跳转到 PC=0x03df
PC=0x03df: LOAD_VAR test_counter
  变量值: 12
PC=0x03e0: LOAD_INT 1
PC=0x03e1: ADD
  12 + 1 = 13
PC=0x03e2: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 13
PC=0x03e3: LOAD_REAL 2.000000
PC=0x03e4: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 2.000000
PC=0x03e5: LOAD_VAR test_real1
  变量值: 2.000000
PC=0x03e6: PUSH_ARGS 1
PC=0x03e7: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x03e8, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x03e8
  返回值已压入栈顶
PC=0x03e8: LOAD_REAL 1.414213
PC=0x03e9: SUB
  0.000000 - 1.414213 = -1.414213
PC=0x03ea: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: -1.414213
PC=0x03eb: LOAD_VAR sqrt_result
  变量值: -1.414213
PC=0x03ec: PUSH_ARGS 1
PC=0x03ed: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x03ee, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x03ee
  返回值已压入栈顶
PC=0x03ee: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x03ef: LOAD_VAR temp1
  变量值: 0
PC=0x03f0: LOAD_REAL 0.010000
PC=0x03f1: LT
  0 < 1202590843 = TRUE
PC=0x03f2: JZ 1016
  条件为真，继续执行
PC=0x03f3: LOAD_VAR pass_counter
  变量值: 4
PC=0x03f4: LOAD_INT 1
PC=0x03f5: ADD
  4 + 1 = 5
PC=0x03f6: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 5
PC=0x03f7: JMP 1020
  跳转到 PC=0x03fc
PC=0x03fc: LOAD_VAR test_counter
  变量值: 13
PC=0x03fd: LOAD_INT 1
PC=0x03fe: ADD
  13 + 1 = 14
PC=0x03ff: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 14
PC=0x0400: LOAD_REAL 125.000000
PC=0x0401: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 125.000000
PC=0x0402: LOAD_VAR test_real1
  变量值: 125.000000
PC=0x0403: PUSH_ARGS 1
PC=0x0404: CALL 0x00b1
  调用函数@0x00b1, 参数个数: 1
  设置函数参数 (函数名: CBRT):
  创建栈帧: 返回地址=0x0405, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x00b1
PC=0x00b1: LOAD_VAR input_val
  变量值: 0
PC=0x00b2: PUSH_ARGS 1
PC=0x00b3: CALL 0x0044
  调用函数@0x0044, 参数个数: 1
  设置函数参数 (函数名: SIGN):
  创建栈帧: 返回地址=0x00b4, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0044
PC=0x0044: LOAD_VAR input_val
  变量值: 0
PC=0x0045: LOAD_REAL 0.000000
PC=0x0046: GT
  0 > 0 = FALSE
PC=0x0047: JZ 75
  跳转到 PC=0x004b
PC=0x004b: LOAD_INT 0
PC=0x004c: STORE_VAR SIGN
  更新变量: SIGN
  存储值: 0
PC=0x004d: LOAD_INT 0
PC=0x004e: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x00b4
  返回值已压入栈顶
PC=0x00b4: STORE_VAR sign_val
  更新变量: sign_val
  存储值: 0
PC=0x00b5: LOAD_VAR input_val
  变量值: 0
PC=0x00b6: PUSH_ARGS 1
PC=0x00b7: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x00b8, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x00b8
  返回值已压入栈顶
PC=0x00b8: STORE_VAR abs_input
  更新变量: abs_input
  存储值: 0
PC=0x00b9: LOAD_VAR abs_input
  变量值: 0
PC=0x00ba: LOAD_REAL 0.000000
PC=0x00bb: EQ
  0 == 0 = TRUE
PC=0x00bc: JZ 193
  条件为真，继续执行
PC=0x00bd: LOAD_REAL 0.000000
PC=0x00be: STORE_VAR CBRT
  创建新变量: CBRT
  存储值: 0.000000
PC=0x00bf: LOAD_INT 0
PC=0x00c0: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0405
  返回值已压入栈顶
PC=0x0405: LOAD_REAL 5.000000
PC=0x0406: SUB
  0.000000 - 5.000000 = -5.000000
PC=0x0407: STORE_VAR cbrt_result
  更新变量: cbrt_result
  存储值: -5.000000
PC=0x0408: LOAD_VAR cbrt_result
  变量值: -5.000000
PC=0x0409: PUSH_ARGS 1
PC=0x040a: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x040b, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x040b
  返回值已压入栈顶
PC=0x040b: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x040c: LOAD_VAR temp1
  变量值: 0
PC=0x040d: LOAD_REAL 0.010000
PC=0x040e: LT
  0 < 1202590843 = TRUE
PC=0x040f: JZ 1045
  条件为真，继续执行
PC=0x0410: LOAD_VAR pass_counter
  变量值: 5
PC=0x0411: LOAD_INT 1
PC=0x0412: ADD
  5 + 1 = 6
PC=0x0413: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 6
PC=0x0414: JMP 1049
  跳转到 PC=0x0419
PC=0x0419: LOAD_VAR test_counter
  变量值: 14
PC=0x041a: LOAD_INT 1
PC=0x041b: ADD
  14 + 1 = 15
PC=0x041c: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 15
PC=0x041d: LOAD_REAL -27.000000
PC=0x041e: STORE_VAR test_real1
  更新变量: test_real1
  存储值: -27.000000
PC=0x041f: LOAD_VAR test_real1
  变量值: -27.000000
PC=0x0420: PUSH_ARGS 1
PC=0x0421: CALL 0x00b1
  调用函数@0x00b1, 参数个数: 1
  设置函数参数 (函数名: CBRT):
  创建栈帧: 返回地址=0x0422, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x00b1
PC=0x00b1: LOAD_VAR input_val
  变量值: 0
PC=0x00b2: PUSH_ARGS 1
PC=0x00b3: CALL 0x0044
  调用函数@0x0044, 参数个数: 1
  设置函数参数 (函数名: SIGN):
  创建栈帧: 返回地址=0x00b4, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0044
PC=0x0044: LOAD_VAR input_val
  变量值: 0
PC=0x0045: LOAD_REAL 0.000000
PC=0x0046: GT
  0 > 0 = FALSE
PC=0x0047: JZ 75
  跳转到 PC=0x004b
PC=0x004b: LOAD_INT 0
PC=0x004c: STORE_VAR SIGN
  更新变量: SIGN
  存储值: 0
PC=0x004d: LOAD_INT 0
PC=0x004e: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x00b4
  返回值已压入栈顶
PC=0x00b4: STORE_VAR sign_val
  更新变量: sign_val
  存储值: 0
PC=0x00b5: LOAD_VAR input_val
  变量值: 0
PC=0x00b6: PUSH_ARGS 1
PC=0x00b7: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x00b8, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x00b8
  返回值已压入栈顶
PC=0x00b8: STORE_VAR abs_input
  更新变量: abs_input
  存储值: 0
PC=0x00b9: LOAD_VAR abs_input
  变量值: 0
PC=0x00ba: LOAD_REAL 0.000000
PC=0x00bb: EQ
  0 == 0 = TRUE
PC=0x00bc: JZ 193
  条件为真，继续执行
PC=0x00bd: LOAD_REAL 0.000000
PC=0x00be: STORE_VAR CBRT
  更新变量: CBRT
  存储值: 0.000000
PC=0x00bf: LOAD_INT 0
PC=0x00c0: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0422
  返回值已压入栈顶
PC=0x0422: LOAD_REAL -3.000000
PC=0x0423: SUB
  0.000000 - -3.000000 = 3.000000
PC=0x0424: STORE_VAR cbrt_result
  更新变量: cbrt_result
  存储值: 3.000000
PC=0x0425: LOAD_VAR cbrt_result
  变量值: 3.000000
PC=0x0426: PUSH_ARGS 1
PC=0x0427: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x0428, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0428
  返回值已压入栈顶
PC=0x0428: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x0429: LOAD_VAR temp1
  变量值: 0
PC=0x042a: LOAD_REAL 0.010000
PC=0x042b: LT
  0 < 1202590843 = TRUE
PC=0x042c: JZ 1074
  条件为真，继续执行
PC=0x042d: LOAD_VAR pass_counter
  变量值: 6
PC=0x042e: LOAD_INT 1
PC=0x042f: ADD
  6 + 1 = 7
PC=0x0430: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 7
PC=0x0431: JMP 1078
  跳转到 PC=0x0436
PC=0x0436: LOAD_VAR test_counter
  变量值: 15
PC=0x0437: LOAD_INT 1
PC=0x0438: ADD
  15 + 1 = 16
PC=0x0439: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 16
PC=0x043a: LOAD_REAL 0.000000
PC=0x043b: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 0.000000
PC=0x043c: LOAD_VAR test_real1
  变量值: 0.000000
PC=0x043d: PUSH_ARGS 1
PC=0x043e: CALL 0x00fe
  调用函数@0x00fe, 参数个数: 1
  设置函数参数 (函数名: EXP):
  创建栈帧: 返回地址=0x043f, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x00fe
PC=0x00fe: LOAD_REAL 1.000000
PC=0x00ff: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0100: LOAD_REAL 1.000000
PC=0x0101: STORE_VAR term
  更新变量: term
  存储值: 1.000000
PC=0x0102: LOAD_REAL 1.000000
PC=0x0103: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 1.000000
PC=0x0104: LOAD_INT 1
PC=0x0105: STORE_VAR i
  更新变量: i
  存储值: 1
PC=0x0106: LOAD_VAR i
  变量值: 1
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  1 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 1.000000
PC=0x010b: LOAD_VAR i
  变量值: 1
PC=0x010c: MUL
  1.000000 * 1.000000 = 1.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 1.000000
PC=0x010e: LOAD_VAR term
  变量值: 1.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 1.000000
PC=0x0115: DIV
  0.000000 / 1.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 1
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  1 + 1 = 2
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 2
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 2
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  2 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 1.000000
PC=0x010b: LOAD_VAR i
  变量值: 2
PC=0x010c: MUL
  1.000000 * 2.000000 = 2.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 2.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 2.000000
PC=0x0115: DIV
  0.000000 / 2.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 2
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  2 + 1 = 3
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 3
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 3
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  3 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 2.000000
PC=0x010b: LOAD_VAR i
  变量值: 3
PC=0x010c: MUL
  2.000000 * 3.000000 = 6.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 6.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 6.000000
PC=0x0115: DIV
  0.000000 / 6.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 3
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  3 + 1 = 4
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 4
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 4
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  4 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 6.000000
PC=0x010b: LOAD_VAR i
  变量值: 4
PC=0x010c: MUL
  6.000000 * 4.000000 = 24.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 24.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 24.000000
PC=0x0115: DIV
  0.000000 / 24.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 4
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  4 + 1 = 5
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 5
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 5
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  5 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 24.000000
PC=0x010b: LOAD_VAR i
  变量值: 5
PC=0x010c: MUL
  24.000000 * 5.000000 = 120.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 120.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 120.000000
PC=0x0115: DIV
  0.000000 / 120.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 5
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  5 + 1 = 6
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 6
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 6
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  6 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 120.000000
PC=0x010b: LOAD_VAR i
  变量值: 6
PC=0x010c: MUL
  120.000000 * 6.000000 = 720.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 720.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 720.000000
PC=0x0115: DIV
  0.000000 / 720.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 6
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  6 + 1 = 7
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 7
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 7
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  7 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 720.000000
PC=0x010b: LOAD_VAR i
  变量值: 7
PC=0x010c: MUL
  720.000000 * 7.000000 = 5040.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 5040.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 5040.000000
PC=0x0115: DIV
  0.000000 / 5040.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 7
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  7 + 1 = 8
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 8
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 8
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  8 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 5040.000000
PC=0x010b: LOAD_VAR i
  变量值: 8
PC=0x010c: MUL
  5040.000000 * 8.000000 = 40320.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 40320.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 40320.000000
PC=0x0115: DIV
  0.000000 / 40320.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 8
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  8 + 1 = 9
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 9
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 9
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  9 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 40320.000000
PC=0x010b: LOAD_VAR i
  变量值: 9
PC=0x010c: MUL
  40320.000000 * 9.000000 = 362880.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 362880.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 362880.000000
PC=0x0115: DIV
  0.000000 / 362880.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 9
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  9 + 1 = 10
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 10
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 10
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  10 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 362880.000000
PC=0x010b: LOAD_VAR i
  变量值: 10
PC=0x010c: MUL
  362880.000000 * 10.000000 = 3628800.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 3628800.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 3628800.000000
PC=0x0115: DIV
  0.000000 / 3628800.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 10
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  10 + 1 = 11
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 11
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 11
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  11 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 3628800.000000
PC=0x010b: LOAD_VAR i
  变量值: 11
PC=0x010c: MUL
  3628800.000000 * 11.000000 = 39916800.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 39916800.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 39916800.000000
PC=0x0115: DIV
  0.000000 / 39916800.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 11
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  11 + 1 = 12
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 12
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 12
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  12 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 39916800.000000
PC=0x010b: LOAD_VAR i
  变量值: 12
PC=0x010c: MUL
  39916800.000000 * 12.000000 = 479001600.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 479001600.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 479001600.000000
PC=0x0115: DIV
  0.000000 / 479001600.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 12
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  12 + 1 = 13
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 13
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 13
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  13 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 479001600.000000
PC=0x010b: LOAD_VAR i
  变量值: 13
PC=0x010c: MUL
  479001600.000000 * 13.000000 = 6227020800.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 6227020800.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 6227020800.000000
PC=0x0115: DIV
  0.000000 / 6227020800.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 13
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  13 + 1 = 14
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 14
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 14
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  14 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 6227020800.000000
PC=0x010b: LOAD_VAR i
  变量值: 14
PC=0x010c: MUL
  6227020800.000000 * 14.000000 = 87178291200.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 87178291200.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 87178291200.000000
PC=0x0115: DIV
  0.000000 / 87178291200.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 14
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  14 + 1 = 15
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 15
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 15
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  15 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 87178291200.000000
PC=0x010b: LOAD_VAR i
  变量值: 15
PC=0x010c: MUL
  87178291200.000000 * 15.000000 = 1307674368000.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 1307674368000.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 1307674368000.000000
PC=0x0115: DIV
  0.000000 / 1307674368000.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 15
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  15 + 1 = 16
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 16
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 16
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  16 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 1307674368000.000000
PC=0x010b: LOAD_VAR i
  变量值: 16
PC=0x010c: MUL
  1307674368000.000000 * 16.000000 = 20922789888000.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 20922789888000.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 20922789888000.000000
PC=0x0115: DIV
  0.000000 / 20922789888000.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 16
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  16 + 1 = 17
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 17
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 17
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  17 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 20922789888000.000000
PC=0x010b: LOAD_VAR i
  变量值: 17
PC=0x010c: MUL
  20922789888000.000000 * 17.000000 = 355687428096000.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 355687428096000.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 355687428096000.000000
PC=0x0115: DIV
  0.000000 / 355687428096000.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 17
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  17 + 1 = 18
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 18
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 18
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  18 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 355687428096000.000000
PC=0x010b: LOAD_VAR i
  变量值: 18
PC=0x010c: MUL
  355687428096000.000000 * 18.000000 = 6402373705728000.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 6402373705728000.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 6402373705728000.000000
PC=0x0115: DIV
  0.000000 / 6402373705728000.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 18
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  18 + 1 = 19
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 19
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 19
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  19 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 6402373705728000.000000
PC=0x010b: LOAD_VAR i
  变量值: 19
PC=0x010c: MUL
  6402373705728000.000000 * 19.000000 = 121645100408832000.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 121645100408832000.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 121645100408832000.000000
PC=0x0115: DIV
  0.000000 / 121645100408832000.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 19
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  19 + 1 = 20
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 20
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 20
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  20 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 121645100408832000.000000
PC=0x010b: LOAD_VAR i
  变量值: 20
PC=0x010c: MUL
  121645100408832000.000000 * 20.000000 = 2432902008176640000.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 2432902008176640000.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 2432902008176640000.000000
PC=0x0115: DIV
  0.000000 / 2432902008176640000.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 20
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  20 + 1 = 21
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 21
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 21
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  21 <= 20 = FALSE
PC=0x0109: JZ 285
  跳转到 PC=0x011d
PC=0x011d: LOAD_VAR result
  变量值: 1.000000
PC=0x011e: STORE_VAR EXP
  创建新变量: EXP
  存储值: 1.000000
PC=0x011f: LOAD_INT 0
PC=0x0120: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x043f
  返回值已压入栈顶
PC=0x043f: LOAD_REAL 1.000000
PC=0x0440: SUB
  0.000000 - 1.000000 = -1.000000
PC=0x0441: STORE_VAR exp_result
  更新变量: exp_result
  存储值: -1.000000
PC=0x0442: LOAD_VAR exp_result
  变量值: -1.000000
PC=0x0443: PUSH_ARGS 1
PC=0x0444: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x0445, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0445
  返回值已压入栈顶
PC=0x0445: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x0446: LOAD_VAR temp1
  变量值: 0
PC=0x0447: LOAD_REAL 0.010000
PC=0x0448: LT
  0 < 1202590843 = TRUE
PC=0x0449: JZ 1103
  条件为真，继续执行
PC=0x044a: LOAD_VAR pass_counter
  变量值: 7
PC=0x044b: LOAD_INT 1
PC=0x044c: ADD
  7 + 1 = 8
PC=0x044d: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 8
PC=0x044e: JMP 1107
  跳转到 PC=0x0453
PC=0x0453: LOAD_VAR test_counter
  变量值: 16
PC=0x0454: LOAD_INT 1
PC=0x0455: ADD
  16 + 1 = 17
PC=0x0456: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 17
PC=0x0457: LOAD_REAL 1.000000
PC=0x0458: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 1.000000
PC=0x0459: LOAD_VAR test_real1
  变量值: 1.000000
PC=0x045a: PUSH_ARGS 1
PC=0x045b: CALL 0x00fe
  调用函数@0x00fe, 参数个数: 1
  设置函数参数 (函数名: EXP):
  创建栈帧: 返回地址=0x045c, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x00fe
PC=0x00fe: LOAD_REAL 1.000000
PC=0x00ff: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0100: LOAD_REAL 1.000000
PC=0x0101: STORE_VAR term
  更新变量: term
  存储值: 1.000000
PC=0x0102: LOAD_REAL 1.000000
PC=0x0103: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 1.000000
PC=0x0104: LOAD_INT 1
PC=0x0105: STORE_VAR i
  更新变量: i
  存储值: 1
PC=0x0106: LOAD_VAR i
  变量值: 1
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  1 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 1.000000
PC=0x010b: LOAD_VAR i
  变量值: 1
PC=0x010c: MUL
  1.000000 * 1.000000 = 1.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 1.000000
PC=0x010e: LOAD_VAR term
  变量值: 1.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 1.000000
PC=0x0115: DIV
  0.000000 / 1.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 1
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  1 + 1 = 2
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 2
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 2
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  2 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 1.000000
PC=0x010b: LOAD_VAR i
  变量值: 2
PC=0x010c: MUL
  1.000000 * 2.000000 = 2.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 2.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 2.000000
PC=0x0115: DIV
  0.000000 / 2.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 2
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  2 + 1 = 3
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 3
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 3
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  3 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 2.000000
PC=0x010b: LOAD_VAR i
  变量值: 3
PC=0x010c: MUL
  2.000000 * 3.000000 = 6.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 6.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 6.000000
PC=0x0115: DIV
  0.000000 / 6.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 3
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  3 + 1 = 4
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 4
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 4
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  4 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 6.000000
PC=0x010b: LOAD_VAR i
  变量值: 4
PC=0x010c: MUL
  6.000000 * 4.000000 = 24.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 24.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 24.000000
PC=0x0115: DIV
  0.000000 / 24.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 4
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  4 + 1 = 5
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 5
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 5
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  5 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 24.000000
PC=0x010b: LOAD_VAR i
  变量值: 5
PC=0x010c: MUL
  24.000000 * 5.000000 = 120.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 120.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 120.000000
PC=0x0115: DIV
  0.000000 / 120.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 5
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  5 + 1 = 6
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 6
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 6
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  6 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 120.000000
PC=0x010b: LOAD_VAR i
  变量值: 6
PC=0x010c: MUL
  120.000000 * 6.000000 = 720.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 720.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 720.000000
PC=0x0115: DIV
  0.000000 / 720.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 6
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  6 + 1 = 7
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 7
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 7
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  7 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 720.000000
PC=0x010b: LOAD_VAR i
  变量值: 7
PC=0x010c: MUL
  720.000000 * 7.000000 = 5040.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 5040.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 5040.000000
PC=0x0115: DIV
  0.000000 / 5040.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 7
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  7 + 1 = 8
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 8
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 8
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  8 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 5040.000000
PC=0x010b: LOAD_VAR i
  变量值: 8
PC=0x010c: MUL
  5040.000000 * 8.000000 = 40320.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 40320.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 40320.000000
PC=0x0115: DIV
  0.000000 / 40320.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 8
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  8 + 1 = 9
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 9
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 9
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  9 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 40320.000000
PC=0x010b: LOAD_VAR i
  变量值: 9
PC=0x010c: MUL
  40320.000000 * 9.000000 = 362880.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 362880.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 362880.000000
PC=0x0115: DIV
  0.000000 / 362880.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 9
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  9 + 1 = 10
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 10
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 10
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  10 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 362880.000000
PC=0x010b: LOAD_VAR i
  变量值: 10
PC=0x010c: MUL
  362880.000000 * 10.000000 = 3628800.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 3628800.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 3628800.000000
PC=0x0115: DIV
  0.000000 / 3628800.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 10
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  10 + 1 = 11
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 11
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 11
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  11 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 3628800.000000
PC=0x010b: LOAD_VAR i
  变量值: 11
PC=0x010c: MUL
  3628800.000000 * 11.000000 = 39916800.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 39916800.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 39916800.000000
PC=0x0115: DIV
  0.000000 / 39916800.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 11
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  11 + 1 = 12
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 12
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 12
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  12 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 39916800.000000
PC=0x010b: LOAD_VAR i
  变量值: 12
PC=0x010c: MUL
  39916800.000000 * 12.000000 = 479001600.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 479001600.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 479001600.000000
PC=0x0115: DIV
  0.000000 / 479001600.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 12
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  12 + 1 = 13
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 13
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 13
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  13 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 479001600.000000
PC=0x010b: LOAD_VAR i
  变量值: 13
PC=0x010c: MUL
  479001600.000000 * 13.000000 = 6227020800.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 6227020800.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 6227020800.000000
PC=0x0115: DIV
  0.000000 / 6227020800.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 13
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  13 + 1 = 14
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 14
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 14
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  14 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 6227020800.000000
PC=0x010b: LOAD_VAR i
  变量值: 14
PC=0x010c: MUL
  6227020800.000000 * 14.000000 = 87178291200.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 87178291200.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 87178291200.000000
PC=0x0115: DIV
  0.000000 / 87178291200.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 14
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  14 + 1 = 15
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 15
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 15
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  15 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 87178291200.000000
PC=0x010b: LOAD_VAR i
  变量值: 15
PC=0x010c: MUL
  87178291200.000000 * 15.000000 = 1307674368000.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 1307674368000.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 1307674368000.000000
PC=0x0115: DIV
  0.000000 / 1307674368000.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 15
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  15 + 1 = 16
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 16
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 16
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  16 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 1307674368000.000000
PC=0x010b: LOAD_VAR i
  变量值: 16
PC=0x010c: MUL
  1307674368000.000000 * 16.000000 = 20922789888000.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 20922789888000.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 20922789888000.000000
PC=0x0115: DIV
  0.000000 / 20922789888000.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 16
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  16 + 1 = 17
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 17
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 17
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  17 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 20922789888000.000000
PC=0x010b: LOAD_VAR i
  变量值: 17
PC=0x010c: MUL
  20922789888000.000000 * 17.000000 = 355687428096000.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 355687428096000.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 355687428096000.000000
PC=0x0115: DIV
  0.000000 / 355687428096000.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 17
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  17 + 1 = 18
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 18
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 18
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  18 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 355687428096000.000000
PC=0x010b: LOAD_VAR i
  变量值: 18
PC=0x010c: MUL
  355687428096000.000000 * 18.000000 = 6402373705728000.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 6402373705728000.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 6402373705728000.000000
PC=0x0115: DIV
  0.000000 / 6402373705728000.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 18
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  18 + 1 = 19
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 19
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 19
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  19 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 6402373705728000.000000
PC=0x010b: LOAD_VAR i
  变量值: 19
PC=0x010c: MUL
  6402373705728000.000000 * 19.000000 = 121645100408832000.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 121645100408832000.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 121645100408832000.000000
PC=0x0115: DIV
  0.000000 / 121645100408832000.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 19
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  19 + 1 = 20
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 20
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 20
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  20 <= 20 = TRUE
PC=0x0109: JZ 285
  条件为真，继续执行
PC=0x010a: LOAD_VAR factorial_val
  变量值: 121645100408832000.000000
PC=0x010b: LOAD_VAR i
  变量值: 20
PC=0x010c: MUL
  121645100408832000.000000 * 20.000000 = 2432902008176640000.000000
PC=0x010d: STORE_VAR factorial_val
  更新变量: factorial_val
  存储值: 2432902008176640000.000000
PC=0x010e: LOAD_VAR term
  变量值: 0.000000
PC=0x010f: LOAD_VAR x
  变量值: 0.000000
PC=0x0110: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x0111: STORE_VAR term
  更新变量: term
  存储值: 0.000000
PC=0x0112: LOAD_VAR result
  变量值: 1.000000
PC=0x0113: LOAD_VAR term
  变量值: 0.000000
PC=0x0114: LOAD_VAR factorial_val
  变量值: 2432902008176640000.000000
PC=0x0115: DIV
  0.000000 / 2432902008176640000.000000 = 0.000000
PC=0x0116: ADD
  1.000000 + 0.000000 = 1.000000
PC=0x0117: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0118: LOAD_VAR i
  变量值: 20
PC=0x0119: LOAD_INT 1
PC=0x011a: ADD
  20 + 1 = 21
PC=0x011b: STORE_VAR i
  更新变量: i
  存储值: 21
PC=0x011c: JMP 262
  跳转到 PC=0x0106
PC=0x0106: LOAD_VAR i
  变量值: 21
PC=0x0107: LOAD_INT 20
PC=0x0108: LE
  21 <= 20 = FALSE
PC=0x0109: JZ 285
  跳转到 PC=0x011d
PC=0x011d: LOAD_VAR result
  变量值: 1.000000
PC=0x011e: STORE_VAR EXP
  更新变量: EXP
  存储值: 1.000000
PC=0x011f: LOAD_INT 0
PC=0x0120: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x045c
  返回值已压入栈顶
PC=0x045c: LOAD_VAR E_CONST
  变量值: 0.000000
PC=0x045d: SUB
  0.000000 - 0.000000 = 0.000000
PC=0x045e: STORE_VAR exp_result
  更新变量: exp_result
  存储值: 0.000000
PC=0x045f: LOAD_VAR exp_result
  变量值: 0.000000
PC=0x0460: PUSH_ARGS 1
PC=0x0461: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x0462, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0462
  返回值已压入栈顶
PC=0x0462: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x0463: LOAD_VAR temp1
  变量值: 0
PC=0x0464: LOAD_REAL 0.010000
PC=0x0465: LT
  0 < 1202590843 = TRUE
PC=0x0466: JZ 1132
  条件为真，继续执行
PC=0x0467: LOAD_VAR pass_counter
  变量值: 8
PC=0x0468: LOAD_INT 1
PC=0x0469: ADD
  8 + 1 = 9
PC=0x046a: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 9
PC=0x046b: JMP 1136
  跳转到 PC=0x0470
PC=0x0470: LOAD_VAR test_counter
  变量值: 17
PC=0x0471: LOAD_INT 1
PC=0x0472: ADD
  17 + 1 = 18
PC=0x0473: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 18
PC=0x0474: LOAD_REAL 1.000000
PC=0x0475: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 1.000000
PC=0x0476: LOAD_VAR test_real1
  变量值: 1.000000
PC=0x0477: PUSH_ARGS 1
PC=0x0478: CALL 0x0121
  调用函数@0x0121, 参数个数: 1
  设置函数参数 (函数名: LN):
  创建栈帧: 返回地址=0x0479, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0121
PC=0x0121: LOAD_VAR x
  变量值: 0.000000
PC=0x0122: LOAD_REAL 0.000000
PC=0x0123: LE
  0 <= 0 = TRUE
PC=0x0124: JZ 297
  条件为真，继续执行
PC=0x0125: LOAD_REAL 0.000000
PC=0x0126: STORE_VAR LN
  创建新变量: LN
  存储值: 0.000000
PC=0x0127: LOAD_INT 0
PC=0x0128: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0479
  返回值已压入栈顶
PC=0x0479: STORE_VAR ln_result
  更新变量: ln_result
  存储值: 0
PC=0x047a: LOAD_VAR ln_result
  变量值: 0
PC=0x047b: PUSH_ARGS 1
PC=0x047c: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x047d, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x047d
  返回值已压入栈顶
PC=0x047d: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x047e: LOAD_VAR temp1
  变量值: 0
PC=0x047f: LOAD_REAL 0.010000
PC=0x0480: LT
  0 < 1202590843 = TRUE
PC=0x0481: JZ 1159
  条件为真，继续执行
PC=0x0482: LOAD_VAR pass_counter
  变量值: 9
PC=0x0483: LOAD_INT 1
PC=0x0484: ADD
  9 + 1 = 10
PC=0x0485: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 10
PC=0x0486: JMP 1163
  跳转到 PC=0x048b
PC=0x048b: LOAD_VAR test_counter
  变量值: 18
PC=0x048c: LOAD_INT 1
PC=0x048d: ADD
  18 + 1 = 19
PC=0x048e: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 19
PC=0x048f: LOAD_VAR E_CONST
  变量值: 0.000000
PC=0x0490: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 0.000000
PC=0x0491: LOAD_VAR test_real1
  变量值: 0.000000
PC=0x0492: PUSH_ARGS 1
PC=0x0493: CALL 0x0121
  调用函数@0x0121, 参数个数: 1
  设置函数参数 (函数名: LN):
  创建栈帧: 返回地址=0x0494, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0121
PC=0x0121: LOAD_VAR x
  变量值: 0.000000
PC=0x0122: LOAD_REAL 0.000000
PC=0x0123: LE
  0 <= 0 = TRUE
PC=0x0124: JZ 297
  条件为真，继续执行
PC=0x0125: LOAD_REAL 0.000000
PC=0x0126: STORE_VAR LN
  更新变量: LN
  存储值: 0.000000
PC=0x0127: LOAD_INT 0
PC=0x0128: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0494
  返回值已压入栈顶
PC=0x0494: LOAD_REAL 1.000000
PC=0x0495: SUB
  0.000000 - 1.000000 = -1.000000
PC=0x0496: STORE_VAR ln_result
  更新变量: ln_result
  存储值: -1.000000
PC=0x0497: LOAD_VAR ln_result
  变量值: -1.000000
PC=0x0498: PUSH_ARGS 1
PC=0x0499: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x049a, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x049a
  返回值已压入栈顶
PC=0x049a: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x049b: LOAD_VAR temp1
  变量值: 0
PC=0x049c: LOAD_REAL 0.010000
PC=0x049d: LT
  0 < 1202590843 = TRUE
PC=0x049e: JZ 1188
  条件为真，继续执行
PC=0x049f: LOAD_VAR pass_counter
  变量值: 10
PC=0x04a0: LOAD_INT 1
PC=0x04a1: ADD
  10 + 1 = 11
PC=0x04a2: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 11
PC=0x04a3: JMP 1192
  跳转到 PC=0x04a8
PC=0x04a8: LOAD_VAR test_counter
  变量值: 19
PC=0x04a9: LOAD_INT 1
PC=0x04aa: ADD
  19 + 1 = 20
PC=0x04ab: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 20
PC=0x04ac: LOAD_REAL 10.000000
PC=0x04ad: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x04ae: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x04af: PUSH_ARGS 1
PC=0x04b0: CALL 0x0168
  调用函数@0x0168, 参数个数: 1
  设置函数参数 (函数名: LOG10):
  创建栈帧: 返回地址=0x04b1, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0168
PC=0x0168: LOAD_REAL 2.302585
PC=0x0169: STORE_VAR ln_10
  更新变量: ln_10
  存储值: 2.302585
PC=0x016a: LOAD_VAR x
  变量值: 0.000000
PC=0x016b: PUSH_ARGS 1
PC=0x016c: CALL 0x0121
  调用函数@0x0121, 参数个数: 1
  设置函数参数 (函数名: LN):
  创建栈帧: 返回地址=0x016d, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0121
PC=0x0121: LOAD_VAR x
  变量值: 0.000000
PC=0x0122: LOAD_REAL 0.000000
PC=0x0123: LE
  0 <= 0 = TRUE
PC=0x0124: JZ 297
  条件为真，继续执行
PC=0x0125: LOAD_REAL 0.000000
PC=0x0126: STORE_VAR LN
  更新变量: LN
  存储值: 0.000000
PC=0x0127: LOAD_INT 0
PC=0x0128: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x016d
  返回值已压入栈顶
PC=0x016d: STORE_VAR ln_x
  更新变量: ln_x
  存储值: 0
PC=0x016e: LOAD_VAR ln_x
  变量值: 0
PC=0x016f: LOAD_VAR ln_10
  变量值: 2.302585
PC=0x0170: DIV
  0.000000 / 2.302585 = 0.000000
PC=0x0171: STORE_VAR LOG10
  创建新变量: LOG10
  存储值: 0.000000
PC=0x0172: LOAD_INT 0
PC=0x0173: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x04b1
  返回值已压入栈顶
PC=0x04b1: LOAD_REAL 1.000000
PC=0x04b2: SUB
  0.000000 - 1.000000 = -1.000000
PC=0x04b3: STORE_VAR log10_result
  更新变量: log10_result
  存储值: -1.000000
PC=0x04b4: LOAD_VAR log10_result
  变量值: -1.000000
PC=0x04b5: PUSH_ARGS 1
PC=0x04b6: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x04b7, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x04b7
  返回值已压入栈顶
PC=0x04b7: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x04b8: LOAD_VAR temp1
  变量值: 0
PC=0x04b9: LOAD_REAL 0.010000
PC=0x04ba: LT
  0 < 1202590843 = TRUE
PC=0x04bb: JZ 1217
  条件为真，继续执行
PC=0x04bc: LOAD_VAR pass_counter
  变量值: 11
PC=0x04bd: LOAD_INT 1
PC=0x04be: ADD
  11 + 1 = 12
PC=0x04bf: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 12
PC=0x04c0: JMP 1221
  跳转到 PC=0x04c5
PC=0x04c5: LOAD_VAR test_counter
  变量值: 20
PC=0x04c6: LOAD_INT 1
PC=0x04c7: ADD
  20 + 1 = 21
PC=0x04c8: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 21
PC=0x04c9: LOAD_REAL 100.000000
PC=0x04ca: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 100.000000
PC=0x04cb: LOAD_VAR test_real1
  变量值: 100.000000
PC=0x04cc: PUSH_ARGS 1
PC=0x04cd: CALL 0x0168
  调用函数@0x0168, 参数个数: 1
  设置函数参数 (函数名: LOG10):
  创建栈帧: 返回地址=0x04ce, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0168
PC=0x0168: LOAD_REAL 2.302585
PC=0x0169: STORE_VAR ln_10
  更新变量: ln_10
  存储值: 2.302585
PC=0x016a: LOAD_VAR x
  变量值: 0.000000
PC=0x016b: PUSH_ARGS 1
PC=0x016c: CALL 0x0121
  调用函数@0x0121, 参数个数: 1
  设置函数参数 (函数名: LN):
  创建栈帧: 返回地址=0x016d, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0121
PC=0x0121: LOAD_VAR x
  变量值: 0.000000
PC=0x0122: LOAD_REAL 0.000000
PC=0x0123: LE
  0 <= 0 = TRUE
PC=0x0124: JZ 297
  条件为真，继续执行
PC=0x0125: LOAD_REAL 0.000000
PC=0x0126: STORE_VAR LN
  更新变量: LN
  存储值: 0.000000
PC=0x0127: LOAD_INT 0
PC=0x0128: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x016d
  返回值已压入栈顶
PC=0x016d: STORE_VAR ln_x
  更新变量: ln_x
  存储值: 0
PC=0x016e: LOAD_VAR ln_x
  变量值: 0
PC=0x016f: LOAD_VAR ln_10
  变量值: 2.302585
PC=0x0170: DIV
  0.000000 / 2.302585 = 0.000000
PC=0x0171: STORE_VAR LOG10
  更新变量: LOG10
  存储值: 0.000000
PC=0x0172: LOAD_INT 0
PC=0x0173: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x04ce
  返回值已压入栈顶
PC=0x04ce: LOAD_REAL 2.000000
PC=0x04cf: SUB
  0.000000 - 2.000000 = -2.000000
PC=0x04d0: STORE_VAR log10_result
  更新变量: log10_result
  存储值: -2.000000
PC=0x04d1: LOAD_VAR log10_result
  变量值: -2.000000
PC=0x04d2: PUSH_ARGS 1
PC=0x04d3: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x04d4, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x04d4
  返回值已压入栈顶
PC=0x04d4: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x04d5: LOAD_VAR temp1
  变量值: 0
PC=0x04d6: LOAD_REAL 0.010000
PC=0x04d7: LT
  0 < 1202590843 = TRUE
PC=0x04d8: JZ 1246
  条件为真，继续执行
PC=0x04d9: LOAD_VAR pass_counter
  变量值: 12
PC=0x04da: LOAD_INT 1
PC=0x04db: ADD
  12 + 1 = 13
PC=0x04dc: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 13
PC=0x04dd: JMP 1250
  跳转到 PC=0x04e2
PC=0x04e2: LOAD_VAR test_counter
  变量值: 21
PC=0x04e3: LOAD_INT 1
PC=0x04e4: ADD
  21 + 1 = 22
PC=0x04e5: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 22
PC=0x04e6: LOAD_REAL 2.000000
PC=0x04e7: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 2.000000
PC=0x04e8: LOAD_VAR test_real1
  变量值: 2.000000
PC=0x04e9: PUSH_ARGS 1
PC=0x04ea: CALL 0x0174
  调用函数@0x0174, 参数个数: 1
  设置函数参数 (函数名: LOG2):
  创建栈帧: 返回地址=0x04eb, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0174
PC=0x0174: LOAD_REAL 0.693147
PC=0x0175: STORE_VAR ln_2
  更新变量: ln_2
  存储值: 0.693147
PC=0x0176: LOAD_VAR x
  变量值: 0.000000
PC=0x0177: PUSH_ARGS 1
PC=0x0178: CALL 0x0121
  调用函数@0x0121, 参数个数: 1
  设置函数参数 (函数名: LN):
  创建栈帧: 返回地址=0x0179, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0121
PC=0x0121: LOAD_VAR x
  变量值: 0.000000
PC=0x0122: LOAD_REAL 0.000000
PC=0x0123: LE
  0 <= 0 = TRUE
PC=0x0124: JZ 297
  条件为真，继续执行
PC=0x0125: LOAD_REAL 0.000000
PC=0x0126: STORE_VAR LN
  更新变量: LN
  存储值: 0.000000
PC=0x0127: LOAD_INT 0
PC=0x0128: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0179
  返回值已压入栈顶
PC=0x0179: STORE_VAR ln_x
  更新变量: ln_x
  存储值: 0
PC=0x017a: LOAD_VAR ln_x
  变量值: 0
PC=0x017b: LOAD_VAR ln_2
  变量值: 0.693147
PC=0x017c: DIV
  0.000000 / 0.693147 = 0.000000
PC=0x017d: STORE_VAR LOG2
  创建新变量: LOG2
  存储值: 0.000000
PC=0x017e: LOAD_INT 0
PC=0x017f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x04eb
  返回值已压入栈顶
PC=0x04eb: LOAD_REAL 1.000000
PC=0x04ec: SUB
  0.000000 - 1.000000 = -1.000000
PC=0x04ed: STORE_VAR log2_result
  更新变量: log2_result
  存储值: -1.000000
PC=0x04ee: LOAD_VAR log2_result
  变量值: -1.000000
PC=0x04ef: PUSH_ARGS 1
PC=0x04f0: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x04f1, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x04f1
  返回值已压入栈顶
PC=0x04f1: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x04f2: LOAD_VAR temp1
  变量值: 0
PC=0x04f3: LOAD_REAL 0.010000
PC=0x04f4: LT
  0 < 1202590843 = TRUE
PC=0x04f5: JZ 1275
  条件为真，继续执行
PC=0x04f6: LOAD_VAR pass_counter
  变量值: 13
PC=0x04f7: LOAD_INT 1
PC=0x04f8: ADD
  13 + 1 = 14
PC=0x04f9: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 14
PC=0x04fa: JMP 1279
  跳转到 PC=0x04ff
PC=0x04ff: LOAD_VAR test_counter
  变量值: 22
PC=0x0500: LOAD_INT 1
PC=0x0501: ADD
  22 + 1 = 23
PC=0x0502: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 23
PC=0x0503: LOAD_REAL 16.000000
PC=0x0504: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 16.000000
PC=0x0505: LOAD_VAR test_real1
  变量值: 16.000000
PC=0x0506: PUSH_ARGS 1
PC=0x0507: CALL 0x0174
  调用函数@0x0174, 参数个数: 1
  设置函数参数 (函数名: LOG2):
  创建栈帧: 返回地址=0x0508, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0174
PC=0x0174: LOAD_REAL 0.693147
PC=0x0175: STORE_VAR ln_2
  更新变量: ln_2
  存储值: 0.693147
PC=0x0176: LOAD_VAR x
  变量值: 0.000000
PC=0x0177: PUSH_ARGS 1
PC=0x0178: CALL 0x0121
  调用函数@0x0121, 参数个数: 1
  设置函数参数 (函数名: LN):
  创建栈帧: 返回地址=0x0179, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0121
PC=0x0121: LOAD_VAR x
  变量值: 0.000000
PC=0x0122: LOAD_REAL 0.000000
PC=0x0123: LE
  0 <= 0 = TRUE
PC=0x0124: JZ 297
  条件为真，继续执行
PC=0x0125: LOAD_REAL 0.000000
PC=0x0126: STORE_VAR LN
  更新变量: LN
  存储值: 0.000000
PC=0x0127: LOAD_INT 0
PC=0x0128: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0179
  返回值已压入栈顶
PC=0x0179: STORE_VAR ln_x
  更新变量: ln_x
  存储值: 0
PC=0x017a: LOAD_VAR ln_x
  变量值: 0
PC=0x017b: LOAD_VAR ln_2
  变量值: 0.693147
PC=0x017c: DIV
  0.000000 / 0.693147 = 0.000000
PC=0x017d: STORE_VAR LOG2
  更新变量: LOG2
  存储值: 0.000000
PC=0x017e: LOAD_INT 0
PC=0x017f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0508
  返回值已压入栈顶
PC=0x0508: LOAD_REAL 4.000000
PC=0x0509: SUB
  0.000000 - 4.000000 = -4.000000
PC=0x050a: STORE_VAR log2_result
  更新变量: log2_result
  存储值: -4.000000
PC=0x050b: LOAD_VAR log2_result
  变量值: -4.000000
PC=0x050c: PUSH_ARGS 1
PC=0x050d: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x050e, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x050e
  返回值已压入栈顶
PC=0x050e: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x050f: LOAD_VAR temp1
  变量值: 0
PC=0x0510: LOAD_REAL 0.010000
PC=0x0511: LT
  0 < 1202590843 = TRUE
PC=0x0512: JZ 1304
  条件为真，继续执行
PC=0x0513: LOAD_VAR pass_counter
  变量值: 14
PC=0x0514: LOAD_INT 1
PC=0x0515: ADD
  14 + 1 = 15
PC=0x0516: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 15
PC=0x0517: JMP 1308
  跳转到 PC=0x051c
PC=0x051c: LOAD_VAR test_counter
  变量值: 23
PC=0x051d: LOAD_INT 1
PC=0x051e: ADD
  23 + 1 = 24
PC=0x051f: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 24
PC=0x0520: LOAD_REAL 4.000000
PC=0x0521: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 4.000000
PC=0x0522: LOAD_REAL 0.500000
PC=0x0523: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.500000
PC=0x0524: LOAD_VAR test_real1
  变量值: 4.000000
PC=0x0525: LOAD_VAR test_real2
  变量值: 0.500000
PC=0x0526: PUSH_ARGS 2
PC=0x0527: CALL 0x0180
  调用函数@0x0180, 参数个数: 2
  设置函数参数 (函数名: POWER):
  创建栈帧: 返回地址=0x0528, 帧指针=-2, 参数个数=2
  跳转到函数地址: 0x0180
PC=0x0180: LOAD_VAR base
  变量值: 0.000000
PC=0x0181: LOAD_REAL 0.000000
PC=0x0182: LE
  0 <= 0 = TRUE
PC=0x0183: JZ 391
  条件为真，继续执行
PC=0x0184: LOAD_REAL 0.000000
PC=0x0185: STORE_VAR POWER
  创建新变量: POWER
  存储值: 0.000000
PC=0x0186: JMP 403
  跳转到 PC=0x0193
PC=0x0193: LOAD_INT 0
PC=0x0194: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0528
  返回值已压入栈顶
PC=0x0528: LOAD_REAL 2.000000
PC=0x0529: SUB
  0.000000 - 2.000000 = -2.000000
PC=0x052a: STORE_VAR power_result
  更新变量: power_result
  存储值: -2.000000
PC=0x052b: LOAD_VAR power_result
  变量值: -2.000000
PC=0x052c: PUSH_ARGS 1
PC=0x052d: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x052e, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x052e
  返回值已压入栈顶
PC=0x052e: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x052f: LOAD_VAR temp1
  变量值: 0
PC=0x0530: LOAD_REAL 0.010000
PC=0x0531: LT
  0 < 1202590843 = TRUE
PC=0x0532: JZ 1336
  条件为真，继续执行
PC=0x0533: LOAD_VAR pass_counter
  变量值: 15
PC=0x0534: LOAD_INT 1
PC=0x0535: ADD
  15 + 1 = 16
PC=0x0536: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 16
PC=0x0537: JMP 1340
  跳转到 PC=0x053c
PC=0x053c: LOAD_VAR test_counter
  变量值: 24
PC=0x053d: LOAD_INT 1
PC=0x053e: ADD
  24 + 1 = 25
PC=0x053f: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 25
PC=0x0540: LOAD_REAL 8.000000
PC=0x0541: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 8.000000
PC=0x0542: LOAD_REAL 3.000000
PC=0x0543: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 3.000000
PC=0x0544: LOAD_VAR test_real1
  变量值: 8.000000
PC=0x0545: LOAD_VAR test_real2
  变量值: 3.000000
PC=0x0546: PUSH_ARGS 2
PC=0x0547: CALL 0x0180
  调用函数@0x0180, 参数个数: 2
  设置函数参数 (函数名: POWER):
  创建栈帧: 返回地址=0x0548, 帧指针=-2, 参数个数=2
  跳转到函数地址: 0x0180
PC=0x0180: LOAD_VAR base
  变量值: 0.000000
PC=0x0181: LOAD_REAL 0.000000
PC=0x0182: LE
  0 <= 0 = TRUE
PC=0x0183: JZ 391
  条件为真，继续执行
PC=0x0184: LOAD_REAL 0.000000
PC=0x0185: STORE_VAR POWER
  更新变量: POWER
  存储值: 0.000000
PC=0x0186: JMP 403
  跳转到 PC=0x0193
PC=0x0193: LOAD_INT 0
PC=0x0194: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0548
  返回值已压入栈顶
PC=0x0548: LOAD_REAL 512.000000
PC=0x0549: SUB
  0.000000 - 512.000000 = -512.000000
PC=0x054a: STORE_VAR power_result
  更新变量: power_result
  存储值: -512.000000
PC=0x054b: LOAD_VAR power_result
  变量值: -512.000000
PC=0x054c: PUSH_ARGS 1
PC=0x054d: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x054e, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x054e
  返回值已压入栈顶
PC=0x054e: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x054f: LOAD_VAR temp1
  变量值: 0
PC=0x0550: LOAD_REAL 0.100000
PC=0x0551: LT
  0 < -1717986918 = FALSE
PC=0x0552: JZ 1368
  跳转到 PC=0x0558
PC=0x0558: LOAD_VAR fail_counter
  变量值: 8
PC=0x0559: LOAD_INT 1
PC=0x055a: ADD
  8 + 1 = 9
PC=0x055b: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 9
PC=0x055c: LOAD_VAR test_counter
  变量值: 25
PC=0x055d: LOAD_INT 1
PC=0x055e: ADD
  25 + 1 = 26
PC=0x055f: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 26
PC=0x0560: LOAD_BOOL TRUE
PC=0x0561: STORE_VAR test_bool1
  更新变量: test_bool1
  存储值: TRUE
PC=0x0562: LOAD_BOOL FALSE
PC=0x0563: STORE_VAR test_bool2
  更新变量: test_bool2
  存储值: FALSE
PC=0x0564: LOAD_BOOL FALSE
PC=0x0565: STORE_VAR temp_bool
  更新变量: temp_bool
  存储值: FALSE
PC=0x0566: LOAD_VAR test_bool1
  变量值: TRUE
PC=0x0567: LOAD_VAR test_bool2
  变量值: FALSE
PC=0x0568: LOAD_VAR temp_bool
  变量值: FALSE
PC=0x0569: PUSH_ARGS 3
PC=0x056a: CALL 0x0195
  调用函数@0x0195, 参数个数: 3
  设置函数参数 (函数名: RS_FLIP_FLOP):
  创建栈帧: 返回地址=0x056b, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0195
PC=0x0195: LOAD_VAR set_input
  变量值: FALSE
PC=0x0196: LOAD_BOOL TRUE
PC=0x0197: EQ
  0 == 1 = FALSE
PC=0x0198: JZ 419
  跳转到 PC=0x01a3
PC=0x01a3: LOAD_VAR last_output
  变量值: FALSE
PC=0x01a4: STORE_VAR output
  更新变量: output
  存储值: FALSE
PC=0x01a5: LOAD_VAR output
  变量值: FALSE
PC=0x01a6: STORE_VAR RS_FLIP_FLOP
  创建新变量: RS_FLIP_FLOP
  存储值: FALSE
PC=0x01a7: LOAD_INT 0
PC=0x01a8: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x056b
  返回值已压入栈顶
PC=0x056b: STORE_VAR rs_output
  更新变量: rs_output
  存储值: 0
PC=0x056c: LOAD_VAR rs_output
  变量值: 0
PC=0x056d: LOAD_BOOL TRUE
PC=0x056e: EQ
  0 == 1 = FALSE
PC=0x056f: JZ 1397
  跳转到 PC=0x0575
PC=0x0575: LOAD_VAR fail_counter
  变量值: 9
PC=0x0576: LOAD_INT 1
PC=0x0577: ADD
  9 + 1 = 10
PC=0x0578: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 10
PC=0x0579: LOAD_VAR test_counter
  变量值: 26
PC=0x057a: LOAD_INT 1
PC=0x057b: ADD
  26 + 1 = 27
PC=0x057c: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 27
PC=0x057d: LOAD_BOOL FALSE
PC=0x057e: STORE_VAR test_bool1
  更新变量: test_bool1
  存储值: FALSE
PC=0x057f: LOAD_BOOL TRUE
PC=0x0580: STORE_VAR test_bool2
  更新变量: test_bool2
  存储值: TRUE
PC=0x0581: LOAD_BOOL TRUE
PC=0x0582: STORE_VAR temp_bool
  更新变量: temp_bool
  存储值: TRUE
PC=0x0583: LOAD_VAR test_bool1
  变量值: FALSE
PC=0x0584: LOAD_VAR test_bool2
  变量值: TRUE
PC=0x0585: LOAD_VAR temp_bool
  变量值: TRUE
PC=0x0586: PUSH_ARGS 3
PC=0x0587: CALL 0x0195
  调用函数@0x0195, 参数个数: 3
  设置函数参数 (函数名: RS_FLIP_FLOP):
  创建栈帧: 返回地址=0x0588, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0195
PC=0x0195: LOAD_VAR set_input
  变量值: FALSE
PC=0x0196: LOAD_BOOL TRUE
PC=0x0197: EQ
  0 == 1 = FALSE
PC=0x0198: JZ 419
  跳转到 PC=0x01a3
PC=0x01a3: LOAD_VAR last_output
  变量值: FALSE
PC=0x01a4: STORE_VAR output
  更新变量: output
  存储值: FALSE
PC=0x01a5: LOAD_VAR output
  变量值: FALSE
PC=0x01a6: STORE_VAR RS_FLIP_FLOP
  更新变量: RS_FLIP_FLOP
  存储值: FALSE
PC=0x01a7: LOAD_INT 0
PC=0x01a8: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0588
  返回值已压入栈顶
PC=0x0588: STORE_VAR rs_output
  更新变量: rs_output
  存储值: 0
PC=0x0589: LOAD_VAR rs_output
  变量值: 0
PC=0x058a: LOAD_BOOL FALSE
PC=0x058b: EQ
  0 == 0 = TRUE
PC=0x058c: JZ 1426
  条件为真，继续执行
PC=0x058d: LOAD_VAR pass_counter
  变量值: 16
PC=0x058e: LOAD_INT 1
PC=0x058f: ADD
  16 + 1 = 17
PC=0x0590: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 17
PC=0x0591: JMP 1430
  跳转到 PC=0x0596
PC=0x0596: LOAD_VAR test_counter
  变量值: 27
PC=0x0597: LOAD_INT 1
PC=0x0598: ADD
  27 + 1 = 28
PC=0x0599: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 28
PC=0x059a: LOAD_BOOL FALSE
PC=0x059b: STORE_VAR test_bool1
  更新变量: test_bool1
  存储值: FALSE
PC=0x059c: LOAD_BOOL FALSE
PC=0x059d: STORE_VAR test_bool2
  更新变量: test_bool2
  存储值: FALSE
PC=0x059e: LOAD_BOOL TRUE
PC=0x059f: STORE_VAR temp_bool
  更新变量: temp_bool
  存储值: TRUE
PC=0x05a0: LOAD_VAR test_bool1
  变量值: FALSE
PC=0x05a1: LOAD_VAR test_bool2
  变量值: FALSE
PC=0x05a2: LOAD_VAR temp_bool
  变量值: TRUE
PC=0x05a3: PUSH_ARGS 3
PC=0x05a4: CALL 0x0195
  调用函数@0x0195, 参数个数: 3
  设置函数参数 (函数名: RS_FLIP_FLOP):
  创建栈帧: 返回地址=0x05a5, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0195
PC=0x0195: LOAD_VAR set_input
  变量值: FALSE
PC=0x0196: LOAD_BOOL TRUE
PC=0x0197: EQ
  0 == 1 = FALSE
PC=0x0198: JZ 419
  跳转到 PC=0x01a3
PC=0x01a3: LOAD_VAR last_output
  变量值: FALSE
PC=0x01a4: STORE_VAR output
  更新变量: output
  存储值: FALSE
PC=0x01a5: LOAD_VAR output
  变量值: FALSE
PC=0x01a6: STORE_VAR RS_FLIP_FLOP
  更新变量: RS_FLIP_FLOP
  存储值: FALSE
PC=0x01a7: LOAD_INT 0
PC=0x01a8: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x05a5
  返回值已压入栈顶
PC=0x05a5: STORE_VAR rs_output
  更新变量: rs_output
  存储值: 0
PC=0x05a6: LOAD_VAR rs_output
  变量值: 0
PC=0x05a7: LOAD_BOOL TRUE
PC=0x05a8: EQ
  0 == 1 = FALSE
PC=0x05a9: JZ 1455
  跳转到 PC=0x05af
PC=0x05af: LOAD_VAR fail_counter
  变量值: 10
PC=0x05b0: LOAD_INT 1
PC=0x05b1: ADD
  10 + 1 = 11
PC=0x05b2: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 11
PC=0x05b3: LOAD_VAR test_counter
  变量值: 28
PC=0x05b4: LOAD_INT 1
PC=0x05b5: ADD
  28 + 1 = 29
PC=0x05b6: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 29
PC=0x05b7: LOAD_BOOL TRUE
PC=0x05b8: STORE_VAR test_bool1
  更新变量: test_bool1
  存储值: TRUE
PC=0x05b9: LOAD_BOOL FALSE
PC=0x05ba: STORE_VAR test_bool2
  更新变量: test_bool2
  存储值: FALSE
PC=0x05bb: LOAD_BOOL FALSE
PC=0x05bc: STORE_VAR temp_bool
  更新变量: temp_bool
  存储值: FALSE
PC=0x05bd: LOAD_VAR test_bool1
  变量值: TRUE
PC=0x05be: LOAD_VAR test_bool2
  变量值: FALSE
PC=0x05bf: LOAD_VAR temp_bool
  变量值: FALSE
PC=0x05c0: PUSH_ARGS 3
PC=0x05c1: CALL 0x01a9
  调用函数@0x01a9, 参数个数: 3
  设置函数参数 (函数名: SR_FLIP_FLOP):
  创建栈帧: 返回地址=0x05c2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x01a9
PC=0x01a9: LOAD_VAR reset_input
  变量值: FALSE
PC=0x01aa: LOAD_BOOL TRUE
PC=0x01ab: EQ
  0 == 1 = FALSE
PC=0x01ac: JZ 439
  跳转到 PC=0x01b7
PC=0x01b7: LOAD_VAR last_output
  变量值: FALSE
PC=0x01b8: STORE_VAR output
  更新变量: output
  存储值: FALSE
PC=0x01b9: LOAD_VAR output
  变量值: FALSE
PC=0x01ba: STORE_VAR SR_FLIP_FLOP
  创建新变量: SR_FLIP_FLOP
  存储值: FALSE
PC=0x01bb: LOAD_INT 0
PC=0x01bc: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x05c2
  返回值已压入栈顶
PC=0x05c2: STORE_VAR sr_output
  更新变量: sr_output
  存储值: 0
PC=0x05c3: LOAD_VAR sr_output
  变量值: 0
PC=0x05c4: LOAD_BOOL TRUE
PC=0x05c5: EQ
  0 == 1 = FALSE
PC=0x05c6: JZ 1484
  跳转到 PC=0x05cc
PC=0x05cc: LOAD_VAR fail_counter
  变量值: 11
PC=0x05cd: LOAD_INT 1
PC=0x05ce: ADD
  11 + 1 = 12
PC=0x05cf: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 12
PC=0x05d0: LOAD_VAR test_counter
  变量值: 29
PC=0x05d1: LOAD_INT 1
PC=0x05d2: ADD
  29 + 1 = 30
PC=0x05d3: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 30
PC=0x05d4: LOAD_BOOL FALSE
PC=0x05d5: STORE_VAR test_bool1
  更新变量: test_bool1
  存储值: FALSE
PC=0x05d6: LOAD_BOOL TRUE
PC=0x05d7: STORE_VAR test_bool2
  更新变量: test_bool2
  存储值: TRUE
PC=0x05d8: LOAD_BOOL TRUE
PC=0x05d9: STORE_VAR temp_bool
  更新变量: temp_bool
  存储值: TRUE
PC=0x05da: LOAD_VAR test_bool1
  变量值: FALSE
PC=0x05db: LOAD_VAR test_bool2
  变量值: TRUE
PC=0x05dc: LOAD_VAR temp_bool
  变量值: TRUE
PC=0x05dd: PUSH_ARGS 3
PC=0x05de: CALL 0x01a9
  调用函数@0x01a9, 参数个数: 3
  设置函数参数 (函数名: SR_FLIP_FLOP):
  创建栈帧: 返回地址=0x05df, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x01a9
PC=0x01a9: LOAD_VAR reset_input
  变量值: FALSE
PC=0x01aa: LOAD_BOOL TRUE
PC=0x01ab: EQ
  0 == 1 = FALSE
PC=0x01ac: JZ 439
  跳转到 PC=0x01b7
PC=0x01b7: LOAD_VAR last_output
  变量值: FALSE
PC=0x01b8: STORE_VAR output
  更新变量: output
  存储值: FALSE
PC=0x01b9: LOAD_VAR output
  变量值: FALSE
PC=0x01ba: STORE_VAR SR_FLIP_FLOP
  更新变量: SR_FLIP_FLOP
  存储值: FALSE
PC=0x01bb: LOAD_INT 0
PC=0x01bc: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x05df
  返回值已压入栈顶
PC=0x05df: STORE_VAR sr_output
  更新变量: sr_output
  存储值: 0
PC=0x05e0: LOAD_VAR sr_output
  变量值: 0
PC=0x05e1: LOAD_BOOL FALSE
PC=0x05e2: EQ
  0 == 0 = TRUE
PC=0x05e3: JZ 1513
  条件为真，继续执行
PC=0x05e4: LOAD_VAR pass_counter
  变量值: 17
PC=0x05e5: LOAD_INT 1
PC=0x05e6: ADD
  17 + 1 = 18
PC=0x05e7: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 18
PC=0x05e8: JMP 1517
  跳转到 PC=0x05ed
PC=0x05ed: LOAD_VAR test_counter
  变量值: 30
PC=0x05ee: LOAD_INT 1
PC=0x05ef: ADD
  30 + 1 = 31
PC=0x05f0: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 31
PC=0x05f1: LOAD_BOOL TRUE
PC=0x05f2: STORE_VAR test_bool1
  更新变量: test_bool1
  存储值: TRUE
PC=0x05f3: LOAD_BOOL TRUE
PC=0x05f4: STORE_VAR test_bool2
  更新变量: test_bool2
  存储值: TRUE
PC=0x05f5: LOAD_BOOL FALSE
PC=0x05f6: STORE_VAR test_bool3
  更新变量: test_bool3
  存储值: FALSE
PC=0x05f7: LOAD_VAR test_bool1
  变量值: TRUE
PC=0x05f8: LOAD_VAR test_bool2
  变量值: TRUE
PC=0x05f9: LOAD_VAR test_bool3
  变量值: FALSE
PC=0x05fa: PUSH_ARGS 3
PC=0x05fb: CALL 0x01bd
  调用函数@0x01bd, 参数个数: 3
  设置函数参数 (函数名: VOTE_2oo3):
  创建栈帧: 返回地址=0x05fc, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x01bd
PC=0x01bd: LOAD_INT 0
PC=0x01be: STORE_VAR count
  更新变量: count
  存储值: 0
PC=0x01bf: LOAD_VAR input1
  变量值: FALSE
PC=0x01c0: LOAD_BOOL TRUE
PC=0x01c1: EQ
  0 == 1 = FALSE
PC=0x01c2: JZ 455
  跳转到 PC=0x01c7
PC=0x01c7: LOAD_VAR input2
  变量值: FALSE
PC=0x01c8: LOAD_BOOL TRUE
PC=0x01c9: EQ
  0 == 1 = FALSE
PC=0x01ca: JZ 463
  跳转到 PC=0x01cf
PC=0x01cf: LOAD_VAR input3
  变量值: FALSE
PC=0x01d0: LOAD_BOOL TRUE
PC=0x01d1: EQ
  0 == 1 = FALSE
PC=0x01d2: JZ 471
  跳转到 PC=0x01d7
PC=0x01d7: LOAD_VAR count
  变量值: 0
PC=0x01d8: LOAD_INT 2
PC=0x01d9: GE
  0 >= 2 = FALSE
PC=0x01da: JZ 478
  跳转到 PC=0x01de
PC=0x01de: LOAD_BOOL FALSE
PC=0x01df: STORE_VAR result
  更新变量: result
  存储值: FALSE
PC=0x01e0: LOAD_VAR result
  变量值: FALSE
PC=0x01e1: STORE_VAR VOTE_2oo3
  创建新变量: VOTE_2oo3
  存储值: FALSE
PC=0x01e2: LOAD_INT 0
PC=0x01e3: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x05fc
  返回值已压入栈顶
PC=0x05fc: STORE_VAR vote_2oo3_output
  更新变量: vote_2oo3_output
  存储值: 0
PC=0x05fd: LOAD_VAR vote_2oo3_output
  变量值: 0
PC=0x05fe: LOAD_BOOL TRUE
PC=0x05ff: EQ
  0 == 1 = FALSE
PC=0x0600: JZ 1542
  跳转到 PC=0x0606
PC=0x0606: LOAD_VAR fail_counter
  变量值: 12
PC=0x0607: LOAD_INT 1
PC=0x0608: ADD
  12 + 1 = 13
PC=0x0609: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 13
PC=0x060a: LOAD_VAR test_counter
  变量值: 31
PC=0x060b: LOAD_INT 1
PC=0x060c: ADD
  31 + 1 = 32
PC=0x060d: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 32
PC=0x060e: LOAD_BOOL TRUE
PC=0x060f: STORE_VAR test_bool1
  更新变量: test_bool1
  存储值: TRUE
PC=0x0610: LOAD_BOOL FALSE
PC=0x0611: STORE_VAR test_bool2
  更新变量: test_bool2
  存储值: FALSE
PC=0x0612: LOAD_BOOL FALSE
PC=0x0613: STORE_VAR test_bool3
  更新变量: test_bool3
  存储值: FALSE
PC=0x0614: LOAD_VAR test_bool1
  变量值: TRUE
PC=0x0615: LOAD_VAR test_bool2
  变量值: FALSE
PC=0x0616: LOAD_VAR test_bool3
  变量值: FALSE
PC=0x0617: PUSH_ARGS 3
PC=0x0618: CALL 0x01bd
  调用函数@0x01bd, 参数个数: 3
  设置函数参数 (函数名: VOTE_2oo3):
  创建栈帧: 返回地址=0x0619, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x01bd
PC=0x01bd: LOAD_INT 0
PC=0x01be: STORE_VAR count
  更新变量: count
  存储值: 0
PC=0x01bf: LOAD_VAR input1
  变量值: FALSE
PC=0x01c0: LOAD_BOOL TRUE
PC=0x01c1: EQ
  0 == 1 = FALSE
PC=0x01c2: JZ 455
  跳转到 PC=0x01c7
PC=0x01c7: LOAD_VAR input2
  变量值: FALSE
PC=0x01c8: LOAD_BOOL TRUE
PC=0x01c9: EQ
  0 == 1 = FALSE
PC=0x01ca: JZ 463
  跳转到 PC=0x01cf
PC=0x01cf: LOAD_VAR input3
  变量值: FALSE
PC=0x01d0: LOAD_BOOL TRUE
PC=0x01d1: EQ
  0 == 1 = FALSE
PC=0x01d2: JZ 471
  跳转到 PC=0x01d7
PC=0x01d7: LOAD_VAR count
  变量值: 0
PC=0x01d8: LOAD_INT 2
PC=0x01d9: GE
  0 >= 2 = FALSE
PC=0x01da: JZ 478
  跳转到 PC=0x01de
PC=0x01de: LOAD_BOOL FALSE
PC=0x01df: STORE_VAR result
  更新变量: result
  存储值: FALSE
PC=0x01e0: LOAD_VAR result
  变量值: FALSE
PC=0x01e1: STORE_VAR VOTE_2oo3
  更新变量: VOTE_2oo3
  存储值: FALSE
PC=0x01e2: LOAD_INT 0
PC=0x01e3: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0619
  返回值已压入栈顶
PC=0x0619: STORE_VAR vote_2oo3_output
  更新变量: vote_2oo3_output
  存储值: 0
PC=0x061a: LOAD_VAR vote_2oo3_output
  变量值: 0
PC=0x061b: LOAD_BOOL FALSE
PC=0x061c: EQ
  0 == 0 = TRUE
PC=0x061d: JZ 1571
  条件为真，继续执行
PC=0x061e: LOAD_VAR pass_counter
  变量值: 18
PC=0x061f: LOAD_INT 1
PC=0x0620: ADD
  18 + 1 = 19
PC=0x0621: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 19
PC=0x0622: JMP 1575
  跳转到 PC=0x0627
PC=0x0627: LOAD_VAR test_counter
  变量值: 32
PC=0x0628: LOAD_INT 1
PC=0x0629: ADD
  32 + 1 = 33
PC=0x062a: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 33
PC=0x062b: LOAD_BOOL TRUE
PC=0x062c: STORE_VAR test_bool1
  更新变量: test_bool1
  存储值: TRUE
PC=0x062d: LOAD_BOOL TRUE
PC=0x062e: STORE_VAR test_bool2
  更新变量: test_bool2
  存储值: TRUE
PC=0x062f: LOAD_BOOL TRUE
PC=0x0630: STORE_VAR test_bool3
  更新变量: test_bool3
  存储值: TRUE
PC=0x0631: LOAD_VAR test_bool1
  变量值: TRUE
PC=0x0632: LOAD_VAR test_bool2
  变量值: TRUE
PC=0x0633: LOAD_VAR test_bool3
  变量值: TRUE
PC=0x0634: PUSH_ARGS 3
PC=0x0635: CALL 0x01bd
  调用函数@0x01bd, 参数个数: 3
  设置函数参数 (函数名: VOTE_2oo3):
  创建栈帧: 返回地址=0x0636, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x01bd
PC=0x01bd: LOAD_INT 0
PC=0x01be: STORE_VAR count
  更新变量: count
  存储值: 0
PC=0x01bf: LOAD_VAR input1
  变量值: FALSE
PC=0x01c0: LOAD_BOOL TRUE
PC=0x01c1: EQ
  0 == 1 = FALSE
PC=0x01c2: JZ 455
  跳转到 PC=0x01c7
PC=0x01c7: LOAD_VAR input2
  变量值: FALSE
PC=0x01c8: LOAD_BOOL TRUE
PC=0x01c9: EQ
  0 == 1 = FALSE
PC=0x01ca: JZ 463
  跳转到 PC=0x01cf
PC=0x01cf: LOAD_VAR input3
  变量值: FALSE
PC=0x01d0: LOAD_BOOL TRUE
PC=0x01d1: EQ
  0 == 1 = FALSE
PC=0x01d2: JZ 471
  跳转到 PC=0x01d7
PC=0x01d7: LOAD_VAR count
  变量值: 0
PC=0x01d8: LOAD_INT 2
PC=0x01d9: GE
  0 >= 2 = FALSE
PC=0x01da: JZ 478
  跳转到 PC=0x01de
PC=0x01de: LOAD_BOOL FALSE
PC=0x01df: STORE_VAR result
  更新变量: result
  存储值: FALSE
PC=0x01e0: LOAD_VAR result
  变量值: FALSE
PC=0x01e1: STORE_VAR VOTE_2oo3
  更新变量: VOTE_2oo3
  存储值: FALSE
PC=0x01e2: LOAD_INT 0
PC=0x01e3: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0636
  返回值已压入栈顶
PC=0x0636: STORE_VAR vote_2oo3_output
  更新变量: vote_2oo3_output
  存储值: 0
PC=0x0637: LOAD_VAR vote_2oo3_output
  变量值: 0
PC=0x0638: LOAD_BOOL TRUE
PC=0x0639: EQ
  0 == 1 = FALSE
PC=0x063a: JZ 1600
  跳转到 PC=0x0640
PC=0x0640: LOAD_VAR fail_counter
  变量值: 13
PC=0x0641: LOAD_INT 1
PC=0x0642: ADD
  13 + 1 = 14
PC=0x0643: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 14
PC=0x0644: LOAD_VAR test_counter
  变量值: 33
PC=0x0645: LOAD_INT 1
PC=0x0646: ADD
  33 + 1 = 34
PC=0x0647: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 34
PC=0x0648: LOAD_BOOL TRUE
PC=0x0649: STORE_VAR test_bool1
  更新变量: test_bool1
  存储值: TRUE
PC=0x064a: LOAD_BOOL TRUE
PC=0x064b: STORE_VAR test_bool2
  更新变量: test_bool2
  存储值: TRUE
PC=0x064c: LOAD_BOOL FALSE
PC=0x064d: STORE_VAR test_bool3
  更新变量: test_bool3
  存储值: FALSE
PC=0x064e: LOAD_BOOL FALSE
PC=0x064f: STORE_VAR test_bool4
  更新变量: test_bool4
  存储值: FALSE
PC=0x0650: LOAD_VAR test_bool1
  变量值: TRUE
PC=0x0651: LOAD_VAR test_bool2
  变量值: TRUE
PC=0x0652: LOAD_VAR test_bool3
  变量值: FALSE
PC=0x0653: LOAD_VAR test_bool4
  变量值: FALSE
PC=0x0654: PUSH_ARGS 4
PC=0x0655: CALL 0x01e4
  调用函数@0x01e4, 参数个数: 4
  设置函数参数 (函数名: VOTE_2oo4):
  创建栈帧: 返回地址=0x0656, 帧指针=-4, 参数个数=4
  跳转到函数地址: 0x01e4
PC=0x01e4: LOAD_INT 0
PC=0x01e5: STORE_VAR count
  更新变量: count
  存储值: 0
PC=0x01e6: LOAD_VAR input1
  变量值: FALSE
PC=0x01e7: LOAD_BOOL TRUE
PC=0x01e8: EQ
  0 == 1 = FALSE
PC=0x01e9: JZ 494
  跳转到 PC=0x01ee
PC=0x01ee: LOAD_VAR input2
  变量值: FALSE
PC=0x01ef: LOAD_BOOL TRUE
PC=0x01f0: EQ
  0 == 1 = FALSE
PC=0x01f1: JZ 502
  跳转到 PC=0x01f6
PC=0x01f6: LOAD_VAR input3
  变量值: FALSE
PC=0x01f7: LOAD_BOOL TRUE
PC=0x01f8: EQ
  0 == 1 = FALSE
PC=0x01f9: JZ 510
  跳转到 PC=0x01fe
PC=0x01fe: LOAD_VAR input4
  变量值: FALSE
PC=0x01ff: LOAD_BOOL TRUE
PC=0x0200: EQ
  0 == 1 = FALSE
PC=0x0201: JZ 518
  跳转到 PC=0x0206
PC=0x0206: LOAD_VAR count
  变量值: 0
PC=0x0207: LOAD_INT 2
PC=0x0208: GE
  0 >= 2 = FALSE
PC=0x0209: JZ 525
  跳转到 PC=0x020d
PC=0x020d: LOAD_BOOL FALSE
PC=0x020e: STORE_VAR result
  更新变量: result
  存储值: FALSE
PC=0x020f: LOAD_VAR result
  变量值: FALSE
PC=0x0210: STORE_VAR VOTE_2oo4
  创建新变量: VOTE_2oo4
  存储值: FALSE
PC=0x0211: LOAD_INT 0
PC=0x0212: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0656
  返回值已压入栈顶
PC=0x0656: STORE_VAR vote_2oo4_output
  更新变量: vote_2oo4_output
  存储值: 0
PC=0x0657: LOAD_VAR vote_2oo4_output
  变量值: 0
PC=0x0658: LOAD_BOOL TRUE
PC=0x0659: EQ
  0 == 1 = FALSE
PC=0x065a: JZ 1632
  跳转到 PC=0x0660
PC=0x0660: LOAD_VAR fail_counter
  变量值: 14
PC=0x0661: LOAD_INT 1
PC=0x0662: ADD
  14 + 1 = 15
PC=0x0663: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 15
PC=0x0664: LOAD_VAR test_counter
  变量值: 34
PC=0x0665: LOAD_INT 1
PC=0x0666: ADD
  34 + 1 = 35
PC=0x0667: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 35
PC=0x0668: LOAD_BOOL TRUE
PC=0x0669: STORE_VAR test_bool1
  更新变量: test_bool1
  存储值: TRUE
PC=0x066a: LOAD_BOOL FALSE
PC=0x066b: STORE_VAR test_bool2
  更新变量: test_bool2
  存储值: FALSE
PC=0x066c: LOAD_BOOL FALSE
PC=0x066d: STORE_VAR test_bool3
  更新变量: test_bool3
  存储值: FALSE
PC=0x066e: LOAD_BOOL FALSE
PC=0x066f: STORE_VAR test_bool4
  更新变量: test_bool4
  存储值: FALSE
PC=0x0670: LOAD_VAR test_bool1
  变量值: TRUE
PC=0x0671: LOAD_VAR test_bool2
  变量值: FALSE
PC=0x0672: LOAD_VAR test_bool3
  变量值: FALSE
PC=0x0673: LOAD_VAR test_bool4
  变量值: FALSE
PC=0x0674: PUSH_ARGS 4
PC=0x0675: CALL 0x01e4
  调用函数@0x01e4, 参数个数: 4
  设置函数参数 (函数名: VOTE_2oo4):
  创建栈帧: 返回地址=0x0676, 帧指针=-4, 参数个数=4
  跳转到函数地址: 0x01e4
PC=0x01e4: LOAD_INT 0
PC=0x01e5: STORE_VAR count
  更新变量: count
  存储值: 0
PC=0x01e6: LOAD_VAR input1
  变量值: FALSE
PC=0x01e7: LOAD_BOOL TRUE
PC=0x01e8: EQ
  0 == 1 = FALSE
PC=0x01e9: JZ 494
  跳转到 PC=0x01ee
PC=0x01ee: LOAD_VAR input2
  变量值: FALSE
PC=0x01ef: LOAD_BOOL TRUE
PC=0x01f0: EQ
  0 == 1 = FALSE
PC=0x01f1: JZ 502
  跳转到 PC=0x01f6
PC=0x01f6: LOAD_VAR input3
  变量值: FALSE
PC=0x01f7: LOAD_BOOL TRUE
PC=0x01f8: EQ
  0 == 1 = FALSE
PC=0x01f9: JZ 510
  跳转到 PC=0x01fe
PC=0x01fe: LOAD_VAR input4
  变量值: FALSE
PC=0x01ff: LOAD_BOOL TRUE
PC=0x0200: EQ
  0 == 1 = FALSE
PC=0x0201: JZ 518
  跳转到 PC=0x0206
PC=0x0206: LOAD_VAR count
  变量值: 0
PC=0x0207: LOAD_INT 2
PC=0x0208: GE
  0 >= 2 = FALSE
PC=0x0209: JZ 525
  跳转到 PC=0x020d
PC=0x020d: LOAD_BOOL FALSE
PC=0x020e: STORE_VAR result
  更新变量: result
  存储值: FALSE
PC=0x020f: LOAD_VAR result
  变量值: FALSE
PC=0x0210: STORE_VAR VOTE_2oo4
  更新变量: VOTE_2oo4
  存储值: FALSE
PC=0x0211: LOAD_INT 0
PC=0x0212: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0676
  返回值已压入栈顶
PC=0x0676: STORE_VAR vote_2oo4_output
  更新变量: vote_2oo4_output
  存储值: 0
PC=0x0677: LOAD_VAR vote_2oo4_output
  变量值: 0
PC=0x0678: LOAD_BOOL FALSE
PC=0x0679: EQ
  0 == 0 = TRUE
PC=0x067a: JZ 1664
  条件为真，继续执行
PC=0x067b: LOAD_VAR pass_counter
  变量值: 19
PC=0x067c: LOAD_INT 1
PC=0x067d: ADD
  19 + 1 = 20
PC=0x067e: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 20
PC=0x067f: JMP 1668
  跳转到 PC=0x0684
PC=0x0684: LOAD_VAR test_counter
  变量值: 35
PC=0x0685: LOAD_INT 1
PC=0x0686: ADD
  35 + 1 = 36
PC=0x0687: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 36
PC=0x0688: LOAD_BOOL TRUE
PC=0x0689: STORE_VAR test_bool1
  更新变量: test_bool1
  存储值: TRUE
PC=0x068a: LOAD_BOOL TRUE
PC=0x068b: STORE_VAR test_bool2
  更新变量: test_bool2
  存储值: TRUE
PC=0x068c: LOAD_BOOL TRUE
PC=0x068d: STORE_VAR test_bool3
  更新变量: test_bool3
  存储值: TRUE
PC=0x068e: LOAD_BOOL TRUE
PC=0x068f: STORE_VAR test_bool4
  更新变量: test_bool4
  存储值: TRUE
PC=0x0690: LOAD_VAR test_bool1
  变量值: TRUE
PC=0x0691: LOAD_VAR test_bool2
  变量值: TRUE
PC=0x0692: LOAD_VAR test_bool3
  变量值: TRUE
PC=0x0693: LOAD_VAR test_bool4
  变量值: TRUE
PC=0x0694: PUSH_ARGS 4
PC=0x0695: CALL 0x01e4
  调用函数@0x01e4, 参数个数: 4
  设置函数参数 (函数名: VOTE_2oo4):
  创建栈帧: 返回地址=0x0696, 帧指针=-4, 参数个数=4
  跳转到函数地址: 0x01e4
PC=0x01e4: LOAD_INT 0
PC=0x01e5: STORE_VAR count
  更新变量: count
  存储值: 0
PC=0x01e6: LOAD_VAR input1
  变量值: FALSE
PC=0x01e7: LOAD_BOOL TRUE
PC=0x01e8: EQ
  0 == 1 = FALSE
PC=0x01e9: JZ 494
  跳转到 PC=0x01ee
PC=0x01ee: LOAD_VAR input2
  变量值: FALSE
PC=0x01ef: LOAD_BOOL TRUE
PC=0x01f0: EQ
  0 == 1 = FALSE
PC=0x01f1: JZ 502
  跳转到 PC=0x01f6
PC=0x01f6: LOAD_VAR input3
  变量值: FALSE
PC=0x01f7: LOAD_BOOL TRUE
PC=0x01f8: EQ
  0 == 1 = FALSE
PC=0x01f9: JZ 510
  跳转到 PC=0x01fe
PC=0x01fe: LOAD_VAR input4
  变量值: FALSE
PC=0x01ff: LOAD_BOOL TRUE
PC=0x0200: EQ
  0 == 1 = FALSE
PC=0x0201: JZ 518
  跳转到 PC=0x0206
PC=0x0206: LOAD_VAR count
  变量值: 0
PC=0x0207: LOAD_INT 2
PC=0x0208: GE
  0 >= 2 = FALSE
PC=0x0209: JZ 525
  跳转到 PC=0x020d
PC=0x020d: LOAD_BOOL FALSE
PC=0x020e: STORE_VAR result
  更新变量: result
  存储值: FALSE
PC=0x020f: LOAD_VAR result
  变量值: FALSE
PC=0x0210: STORE_VAR VOTE_2oo4
  更新变量: VOTE_2oo4
  存储值: FALSE
PC=0x0211: LOAD_INT 0
PC=0x0212: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0696
  返回值已压入栈顶
PC=0x0696: STORE_VAR vote_2oo4_output
  更新变量: vote_2oo4_output
  存储值: 0
PC=0x0697: LOAD_VAR vote_2oo4_output
  变量值: 0
PC=0x0698: LOAD_BOOL TRUE
PC=0x0699: EQ
  0 == 1 = FALSE
PC=0x069a: JZ 1696
  跳转到 PC=0x06a0
PC=0x06a0: LOAD_VAR fail_counter
  变量值: 15
PC=0x06a1: LOAD_INT 1
PC=0x06a2: ADD
  15 + 1 = 16
PC=0x06a3: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 16
PC=0x06a4: LOAD_VAR test_counter
  变量值: 36
PC=0x06a5: LOAD_INT 1
PC=0x06a6: ADD
  36 + 1 = 37
PC=0x06a7: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 37
PC=0x06a8: LOAD_REAL 10.000000
PC=0x06a9: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x06aa: LOAD_REAL 0.300000
PC=0x06ab: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.300000
PC=0x06ac: LOAD_REAL 5.000000
PC=0x06ad: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 5.000000
PC=0x06ae: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x06af: LOAD_VAR test_real2
  变量值: 0.300000
PC=0x06b0: LOAD_VAR filter_last
  变量值: 5.000000
PC=0x06b1: PUSH_ARGS 3
PC=0x06b2: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x06b3, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  创建新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x06b3
  返回值已压入栈顶
PC=0x06b3: LOAD_REAL 6.500000
PC=0x06b4: SUB
  0.000000 - 6.500000 = -6.500000
PC=0x06b5: STORE_VAR filter_output
  更新变量: filter_output
  存储值: -6.500000
PC=0x06b6: LOAD_VAR filter_output
  变量值: -6.500000
PC=0x06b7: PUSH_ARGS 1
PC=0x06b8: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x06b9, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x06b9
  返回值已压入栈顶
PC=0x06b9: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x06ba: LOAD_VAR temp1
  变量值: 0
PC=0x06bb: LOAD_REAL 0.010000
PC=0x06bc: LT
  0 < 1202590843 = TRUE
PC=0x06bd: JZ 1731
  条件为真，继续执行
PC=0x06be: LOAD_VAR pass_counter
  变量值: 20
PC=0x06bf: LOAD_INT 1
PC=0x06c0: ADD
  20 + 1 = 21
PC=0x06c1: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 21
PC=0x06c2: JMP 1735
  跳转到 PC=0x06c7
PC=0x06c7: LOAD_VAR test_counter
  变量值: 37
PC=0x06c8: LOAD_INT 1
PC=0x06c9: ADD
  37 + 1 = 38
PC=0x06ca: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 38
PC=0x06cb: LOAD_REAL 1.000000
PC=0x06cc: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x06cd: LOAD_REAL 2.000000
PC=0x06ce: STORE_VAR temp2
  更新变量: temp2
  存储值: 2.000000
PC=0x06cf: LOAD_REAL 3.000000
PC=0x06d0: STORE_VAR temp3
  更新变量: temp3
  存储值: 3.000000
PC=0x06d1: LOAD_REAL 4.000000
PC=0x06d2: STORE_VAR temp4
  更新变量: temp4
  存储值: 4.000000
PC=0x06d3: LOAD_REAL 5.000000
PC=0x06d4: STORE_VAR temp5
  更新变量: temp5
  存储值: 5.000000
PC=0x06d5: LOAD_VAR temp1
  变量值: 1.000000
PC=0x06d6: LOAD_VAR temp2
  变量值: 2.000000
PC=0x06d7: LOAD_VAR temp3
  变量值: 3.000000
PC=0x06d8: LOAD_VAR temp4
  变量值: 4.000000
PC=0x06d9: LOAD_VAR temp5
  变量值: 5.000000
PC=0x06da: PUSH_ARGS 5
PC=0x06db: CALL 0x0225
  调用函数@0x0225, 参数个数: 5
  设置函数参数 (函数名: MOVING_AVG_5):
  创建栈帧: 返回地址=0x06dc, 帧指针=-5, 参数个数=5
  跳转到函数地址: 0x0225
PC=0x0225: LOAD_VAR val1
  变量值: 0
PC=0x0226: LOAD_VAR val2
  变量值: 0
PC=0x0227: ADD
  0 + 0 = 0
PC=0x0228: STORE_VAR sum
  更新变量: sum
  存储值: 0
PC=0x0229: LOAD_VAR sum
  变量值: 0
PC=0x022a: LOAD_VAR val3
  变量值: 0.000000
PC=0x022b: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x022c: STORE_VAR sum
  更新变量: sum
  存储值: 0.000000
PC=0x022d: LOAD_VAR sum
  变量值: 0.000000
PC=0x022e: LOAD_VAR val4
  变量值: 0.000000
PC=0x022f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0230: STORE_VAR sum
  更新变量: sum
  存储值: 0.000000
PC=0x0231: LOAD_VAR sum
  变量值: 0.000000
PC=0x0232: LOAD_VAR val5
  变量值: 0.000000
PC=0x0233: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0234: STORE_VAR sum
  更新变量: sum
  存储值: 0.000000
PC=0x0235: LOAD_VAR sum
  变量值: 0.000000
PC=0x0236: LOAD_REAL 5.000000
PC=0x0237: DIV
  0.000000 / 5.000000 = 0.000000
PC=0x0238: STORE_VAR result
  更新变量: result
  存储值: 0.000000
PC=0x0239: LOAD_VAR result
  变量值: 0.000000
PC=0x023a: STORE_VAR MOVING_AVG_5
  创建新变量: MOVING_AVG_5
  存储值: 0.000000
PC=0x023b: LOAD_INT 0
PC=0x023c: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x06dc
  返回值已压入栈顶
PC=0x06dc: LOAD_REAL 3.000000
PC=0x06dd: SUB
  0.000000 - 3.000000 = -3.000000
PC=0x06de: STORE_VAR avg_output
  更新变量: avg_output
  存储值: -3.000000
PC=0x06df: LOAD_VAR avg_output
  变量值: -3.000000
PC=0x06e0: PUSH_ARGS 1
PC=0x06e1: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x06e2, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x06e2
  返回值已压入栈顶
PC=0x06e2: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0
PC=0x06e3: LOAD_VAR temp_val
  变量值: 0
PC=0x06e4: LOAD_REAL 0.010000
PC=0x06e5: LT
  0 < 1202590843 = TRUE
PC=0x06e6: JZ 1772
  条件为真，继续执行
PC=0x06e7: LOAD_VAR pass_counter
  变量值: 21
PC=0x06e8: LOAD_INT 1
PC=0x06e9: ADD
  21 + 1 = 22
PC=0x06ea: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 22
PC=0x06eb: JMP 1776
  跳转到 PC=0x06f0
PC=0x06f0: LOAD_VAR test_counter
  变量值: 38
PC=0x06f1: LOAD_INT 1
PC=0x06f2: ADD
  38 + 1 = 39
PC=0x06f3: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 39
PC=0x06f4: LOAD_REAL 10.000000
PC=0x06f5: STORE_VAR temp1
  更新变量: temp1
  存储值: 10.000000
PC=0x06f6: LOAD_REAL 20.000000
PC=0x06f7: STORE_VAR temp2
  更新变量: temp2
  存储值: 20.000000
PC=0x06f8: LOAD_REAL 30.000000
PC=0x06f9: STORE_VAR temp3
  更新变量: temp3
  存储值: 30.000000
PC=0x06fa: LOAD_REAL 40.000000
PC=0x06fb: STORE_VAR temp4
  更新变量: temp4
  存储值: 40.000000
PC=0x06fc: LOAD_REAL 50.000000
PC=0x06fd: STORE_VAR temp5
  更新变量: temp5
  存储值: 50.000000
PC=0x06fe: LOAD_VAR temp1
  变量值: 10.000000
PC=0x06ff: LOAD_VAR temp2
  变量值: 20.000000
PC=0x0700: LOAD_VAR temp3
  变量值: 30.000000
PC=0x0701: LOAD_VAR temp4
  变量值: 40.000000
PC=0x0702: LOAD_VAR temp5
  变量值: 50.000000
PC=0x0703: PUSH_ARGS 5
PC=0x0704: CALL 0x0225
  调用函数@0x0225, 参数个数: 5
  设置函数参数 (函数名: MOVING_AVG_5):
  创建栈帧: 返回地址=0x0705, 帧指针=-5, 参数个数=5
  跳转到函数地址: 0x0225
PC=0x0225: LOAD_VAR val1
  变量值: 0
PC=0x0226: LOAD_VAR val2
  变量值: 0
PC=0x0227: ADD
  0 + 0 = 0
PC=0x0228: STORE_VAR sum
  更新变量: sum
  存储值: 0
PC=0x0229: LOAD_VAR sum
  变量值: 0
PC=0x022a: LOAD_VAR val3
  变量值: 0.000000
PC=0x022b: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x022c: STORE_VAR sum
  更新变量: sum
  存储值: 0.000000
PC=0x022d: LOAD_VAR sum
  变量值: 0.000000
PC=0x022e: LOAD_VAR val4
  变量值: 0.000000
PC=0x022f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0230: STORE_VAR sum
  更新变量: sum
  存储值: 0.000000
PC=0x0231: LOAD_VAR sum
  变量值: 0.000000
PC=0x0232: LOAD_VAR val5
  变量值: 0.000000
PC=0x0233: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0234: STORE_VAR sum
  更新变量: sum
  存储值: 0.000000
PC=0x0235: LOAD_VAR sum
  变量值: 0.000000
PC=0x0236: LOAD_REAL 5.000000
PC=0x0237: DIV
  0.000000 / 5.000000 = 0.000000
PC=0x0238: STORE_VAR result
  更新变量: result
  存储值: 0.000000
PC=0x0239: LOAD_VAR result
  变量值: 0.000000
PC=0x023a: STORE_VAR MOVING_AVG_5
  更新变量: MOVING_AVG_5
  存储值: 0.000000
PC=0x023b: LOAD_INT 0
PC=0x023c: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0705
  返回值已压入栈顶
PC=0x0705: LOAD_REAL 30.000000
PC=0x0706: SUB
  0.000000 - 30.000000 = -30.000000
PC=0x0707: STORE_VAR avg_output
  更新变量: avg_output
  存储值: -30.000000
PC=0x0708: LOAD_VAR avg_output
  变量值: -30.000000
PC=0x0709: PUSH_ARGS 1
PC=0x070a: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x070b, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x070b
  返回值已压入栈顶
PC=0x070b: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0
PC=0x070c: LOAD_VAR temp_val
  变量值: 0
PC=0x070d: LOAD_REAL 0.010000
PC=0x070e: LT
  0 < 1202590843 = TRUE
PC=0x070f: JZ 1813
  条件为真，继续执行
PC=0x0710: LOAD_VAR pass_counter
  变量值: 22
PC=0x0711: LOAD_INT 1
PC=0x0712: ADD
  22 + 1 = 23
PC=0x0713: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 23
PC=0x0714: JMP 1817
  跳转到 PC=0x0719
PC=0x0719: LOAD_VAR test_counter
  变量值: 39
PC=0x071a: LOAD_INT 1
PC=0x071b: ADD
  39 + 1 = 40
PC=0x071c: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 40
PC=0x071d: LOAD_REAL 15.000000
PC=0x071e: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 15.000000
PC=0x071f: LOAD_REAL 0.000000
PC=0x0720: STORE_VAR temp1
  更新变量: temp1
  存储值: 0.000000
PC=0x0721: LOAD_REAL 10.000000
PC=0x0722: STORE_VAR temp2
  更新变量: temp2
  存储值: 10.000000
PC=0x0723: LOAD_VAR test_real1
  变量值: 15.000000
PC=0x0724: LOAD_VAR temp1
  变量值: 0.000000
PC=0x0725: LOAD_VAR temp2
  变量值: 10.000000
PC=0x0726: PUSH_ARGS 3
PC=0x0727: CALL 0x023d
  调用函数@0x023d, 参数个数: 3
  设置函数参数 (函数名: LIMITER):
  创建栈帧: 返回地址=0x0728, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x023d
PC=0x023d: LOAD_VAR input_val
  变量值: 0
PC=0x023e: LOAD_VAR min_limit
  变量值: 0.000000
PC=0x023f: LT
  0 < 0 = FALSE
PC=0x0240: JZ 580
  跳转到 PC=0x0244
PC=0x0244: LOAD_VAR input_val
  变量值: 0
PC=0x0245: STORE_VAR output
  更新变量: output
  存储值: 0
PC=0x0246: LOAD_VAR output
  变量值: 0
PC=0x0247: STORE_VAR LIMITER
  创建新变量: LIMITER
  存储值: 0
PC=0x0248: LOAD_INT 0
PC=0x0249: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0728
  返回值已压入栈顶
PC=0x0728: STORE_VAR limit_output
  更新变量: limit_output
  存储值: 0
PC=0x0729: LOAD_VAR limit_output
  变量值: 0
PC=0x072a: LOAD_REAL 10.000000
PC=0x072b: EQ
  0 == 0 = TRUE
PC=0x072c: JZ 1842
  条件为真，继续执行
PC=0x072d: LOAD_VAR pass_counter
  变量值: 23
PC=0x072e: LOAD_INT 1
PC=0x072f: ADD
  23 + 1 = 24
PC=0x0730: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 24
PC=0x0731: JMP 1846
  跳转到 PC=0x0736
PC=0x0736: LOAD_VAR test_counter
  变量值: 40
PC=0x0737: LOAD_INT 1
PC=0x0738: ADD
  40 + 1 = 41
PC=0x0739: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 41
PC=0x073a: LOAD_REAL -5.000000
PC=0x073b: STORE_VAR test_real1
  更新变量: test_real1
  存储值: -5.000000
PC=0x073c: LOAD_REAL 0.000000
PC=0x073d: STORE_VAR temp1
  更新变量: temp1
  存储值: 0.000000
PC=0x073e: LOAD_REAL 10.000000
PC=0x073f: STORE_VAR temp2
  更新变量: temp2
  存储值: 10.000000
PC=0x0740: LOAD_VAR test_real1
  变量值: -5.000000
PC=0x0741: LOAD_VAR temp1
  变量值: 0.000000
PC=0x0742: LOAD_VAR temp2
  变量值: 10.000000
PC=0x0743: PUSH_ARGS 3
PC=0x0744: CALL 0x023d
  调用函数@0x023d, 参数个数: 3
  设置函数参数 (函数名: LIMITER):
  创建栈帧: 返回地址=0x0745, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x023d
PC=0x023d: LOAD_VAR input_val
  变量值: 0
PC=0x023e: LOAD_VAR min_limit
  变量值: 0.000000
PC=0x023f: LT
  0 < 0 = FALSE
PC=0x0240: JZ 580
  跳转到 PC=0x0244
PC=0x0244: LOAD_VAR input_val
  变量值: 0
PC=0x0245: STORE_VAR output
  更新变量: output
  存储值: 0
PC=0x0246: LOAD_VAR output
  变量值: 0
PC=0x0247: STORE_VAR LIMITER
  更新变量: LIMITER
  存储值: 0
PC=0x0248: LOAD_INT 0
PC=0x0249: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0745
  返回值已压入栈顶
PC=0x0745: STORE_VAR limit_output
  更新变量: limit_output
  存储值: 0
PC=0x0746: LOAD_VAR limit_output
  变量值: 0
PC=0x0747: LOAD_REAL 0.000000
PC=0x0748: EQ
  0 == 0 = TRUE
PC=0x0749: JZ 1871
  条件为真，继续执行
PC=0x074a: LOAD_VAR pass_counter
  变量值: 24
PC=0x074b: LOAD_INT 1
PC=0x074c: ADD
  24 + 1 = 25
PC=0x074d: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 25
PC=0x074e: JMP 1875
  跳转到 PC=0x0753
PC=0x0753: LOAD_VAR test_counter
  变量值: 41
PC=0x0754: LOAD_INT 1
PC=0x0755: ADD
  41 + 1 = 42
PC=0x0756: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 42
PC=0x0757: LOAD_REAL 7.500000
PC=0x0758: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 7.500000
PC=0x0759: LOAD_REAL 0.000000
PC=0x075a: STORE_VAR temp1
  更新变量: temp1
  存储值: 0.000000
PC=0x075b: LOAD_REAL 10.000000
PC=0x075c: STORE_VAR temp2
  更新变量: temp2
  存储值: 10.000000
PC=0x075d: LOAD_VAR test_real1
  变量值: 7.500000
PC=0x075e: LOAD_VAR temp1
  变量值: 0.000000
PC=0x075f: LOAD_VAR temp2
  变量值: 10.000000
PC=0x0760: PUSH_ARGS 3
PC=0x0761: CALL 0x023d
  调用函数@0x023d, 参数个数: 3
  设置函数参数 (函数名: LIMITER):
  创建栈帧: 返回地址=0x0762, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x023d
PC=0x023d: LOAD_VAR input_val
  变量值: 0
PC=0x023e: LOAD_VAR min_limit
  变量值: 0.000000
PC=0x023f: LT
  0 < 0 = FALSE
PC=0x0240: JZ 580
  跳转到 PC=0x0244
PC=0x0244: LOAD_VAR input_val
  变量值: 0
PC=0x0245: STORE_VAR output
  更新变量: output
  存储值: 0
PC=0x0246: LOAD_VAR output
  变量值: 0
PC=0x0247: STORE_VAR LIMITER
  更新变量: LIMITER
  存储值: 0
PC=0x0248: LOAD_INT 0
PC=0x0249: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0762
  返回值已压入栈顶
PC=0x0762: STORE_VAR limit_output
  更新变量: limit_output
  存储值: 0
PC=0x0763: LOAD_VAR limit_output
  变量值: 0
PC=0x0764: LOAD_REAL 7.500000
PC=0x0765: EQ
  0 == 0 = TRUE
PC=0x0766: JZ 1900
  条件为真，继续执行
PC=0x0767: LOAD_VAR pass_counter
  变量值: 25
PC=0x0768: LOAD_INT 1
PC=0x0769: ADD
  25 + 1 = 26
PC=0x076a: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 26
PC=0x076b: JMP 1904
  跳转到 PC=0x0770
PC=0x0770: LOAD_VAR test_counter
  变量值: 42
PC=0x0771: LOAD_INT 1
PC=0x0772: ADD
  42 + 1 = 43
PC=0x0773: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 43
PC=0x0774: LOAD_REAL 5.000000
PC=0x0775: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 5.000000
PC=0x0776: LOAD_REAL 2.000000
PC=0x0777: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 2.000000
PC=0x0778: LOAD_VAR test_real1
  变量值: 5.000000
PC=0x0779: LOAD_VAR test_real2
  变量值: 2.000000
PC=0x077a: PUSH_ARGS 2
PC=0x077b: CALL 0x024a
  调用函数@0x024a, 参数个数: 2
  设置函数参数 (函数名: DEAD_ZONE):
  创建栈帧: 返回地址=0x077c, 帧指针=-2, 参数个数=2
  跳转到函数地址: 0x024a
PC=0x024a: LOAD_VAR input_val
  变量值: 0
PC=0x024b: PUSH_ARGS 1
PC=0x024c: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x024d, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x024d
  返回值已压入栈顶
PC=0x024d: STORE_VAR abs_input
  更新变量: abs_input
  存储值: 0
PC=0x024e: LOAD_VAR abs_input
  变量值: 0
PC=0x024f: LOAD_VAR dead_band
  变量值: 0.000000
PC=0x0250: LE
  0 <= 0 = TRUE
PC=0x0251: JZ 597
  条件为真，继续执行
PC=0x0252: LOAD_REAL 0.000000
PC=0x0253: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0254: JMP 610
  跳转到 PC=0x0262
PC=0x0262: LOAD_VAR output
  变量值: 0.000000
PC=0x0263: STORE_VAR DEAD_ZONE
  创建新变量: DEAD_ZONE
  存储值: 0.000000
PC=0x0264: LOAD_INT 0
PC=0x0265: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x077c
  返回值已压入栈顶
PC=0x077c: STORE_VAR dead_output
  更新变量: dead_output
  存储值: 0
PC=0x077d: LOAD_VAR dead_output
  变量值: 0
PC=0x077e: LOAD_REAL 3.000000
PC=0x077f: EQ
  0 == 0 = TRUE
PC=0x0780: JZ 1926
  条件为真，继续执行
PC=0x0781: LOAD_VAR pass_counter
  变量值: 26
PC=0x0782: LOAD_INT 1
PC=0x0783: ADD
  26 + 1 = 27
PC=0x0784: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 27
PC=0x0785: JMP 1930
  跳转到 PC=0x078a
PC=0x078a: LOAD_VAR test_counter
  变量值: 43
PC=0x078b: LOAD_INT 1
PC=0x078c: ADD
  43 + 1 = 44
PC=0x078d: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 44
PC=0x078e: LOAD_REAL -7.000000
PC=0x078f: STORE_VAR test_real1
  更新变量: test_real1
  存储值: -7.000000
PC=0x0790: LOAD_REAL 2.000000
PC=0x0791: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 2.000000
PC=0x0792: LOAD_VAR test_real1
  变量值: -7.000000
PC=0x0793: LOAD_VAR test_real2
  变量值: 2.000000
PC=0x0794: PUSH_ARGS 2
PC=0x0795: CALL 0x024a
  调用函数@0x024a, 参数个数: 2
  设置函数参数 (函数名: DEAD_ZONE):
  创建栈帧: 返回地址=0x0796, 帧指针=-2, 参数个数=2
  跳转到函数地址: 0x024a
PC=0x024a: LOAD_VAR input_val
  变量值: 0
PC=0x024b: PUSH_ARGS 1
PC=0x024c: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x024d, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x024d
  返回值已压入栈顶
PC=0x024d: STORE_VAR abs_input
  更新变量: abs_input
  存储值: 0
PC=0x024e: LOAD_VAR abs_input
  变量值: 0
PC=0x024f: LOAD_VAR dead_band
  变量值: 0.000000
PC=0x0250: LE
  0 <= 0 = TRUE
PC=0x0251: JZ 597
  条件为真，继续执行
PC=0x0252: LOAD_REAL 0.000000
PC=0x0253: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0254: JMP 610
  跳转到 PC=0x0262
PC=0x0262: LOAD_VAR output
  变量值: 0.000000
PC=0x0263: STORE_VAR DEAD_ZONE
  更新变量: DEAD_ZONE
  存储值: 0.000000
PC=0x0264: LOAD_INT 0
PC=0x0265: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0796
  返回值已压入栈顶
PC=0x0796: STORE_VAR dead_output
  更新变量: dead_output
  存储值: 0
PC=0x0797: LOAD_VAR dead_output
  变量值: 0
PC=0x0798: LOAD_REAL -5.000000
PC=0x0799: EQ
  0 == 0 = TRUE
PC=0x079a: JZ 1952
  条件为真，继续执行
PC=0x079b: LOAD_VAR pass_counter
  变量值: 27
PC=0x079c: LOAD_INT 1
PC=0x079d: ADD
  27 + 1 = 28
PC=0x079e: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 28
PC=0x079f: JMP 1956
  跳转到 PC=0x07a4
PC=0x07a4: LOAD_VAR test_counter
  变量值: 44
PC=0x07a5: LOAD_INT 1
PC=0x07a6: ADD
  44 + 1 = 45
PC=0x07a7: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 45
PC=0x07a8: LOAD_REAL 1.500000
PC=0x07a9: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 1.500000
PC=0x07aa: LOAD_REAL 2.000000
PC=0x07ab: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 2.000000
PC=0x07ac: LOAD_VAR test_real1
  变量值: 1.500000
PC=0x07ad: LOAD_VAR test_real2
  变量值: 2.000000
PC=0x07ae: PUSH_ARGS 2
PC=0x07af: CALL 0x024a
  调用函数@0x024a, 参数个数: 2
  设置函数参数 (函数名: DEAD_ZONE):
  创建栈帧: 返回地址=0x07b0, 帧指针=-2, 参数个数=2
  跳转到函数地址: 0x024a
PC=0x024a: LOAD_VAR input_val
  变量值: 0
PC=0x024b: PUSH_ARGS 1
PC=0x024c: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x024d, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x024d
  返回值已压入栈顶
PC=0x024d: STORE_VAR abs_input
  更新变量: abs_input
  存储值: 0
PC=0x024e: LOAD_VAR abs_input
  变量值: 0
PC=0x024f: LOAD_VAR dead_band
  变量值: 0.000000
PC=0x0250: LE
  0 <= 0 = TRUE
PC=0x0251: JZ 597
  条件为真，继续执行
PC=0x0252: LOAD_REAL 0.000000
PC=0x0253: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0254: JMP 610
  跳转到 PC=0x0262
PC=0x0262: LOAD_VAR output
  变量值: 0.000000
PC=0x0263: STORE_VAR DEAD_ZONE
  更新变量: DEAD_ZONE
  存储值: 0.000000
PC=0x0264: LOAD_INT 0
PC=0x0265: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x07b0
  返回值已压入栈顶
PC=0x07b0: STORE_VAR dead_output
  更新变量: dead_output
  存储值: 0
PC=0x07b1: LOAD_VAR dead_output
  变量值: 0
PC=0x07b2: LOAD_REAL 0.000000
PC=0x07b3: EQ
  0 == 0 = TRUE
PC=0x07b4: JZ 1978
  条件为真，继续执行
PC=0x07b5: LOAD_VAR pass_counter
  变量值: 28
PC=0x07b6: LOAD_INT 1
PC=0x07b7: ADD
  28 + 1 = 29
PC=0x07b8: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 29
PC=0x07b9: JMP 1982
  跳转到 PC=0x07be
PC=0x07be: LOAD_VAR test_counter
  变量值: 45
PC=0x07bf: LOAD_INT 1
PC=0x07c0: ADD
  45 + 1 = 46
PC=0x07c1: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 46
PC=0x07c2: LOAD_REAL 12.000000
PC=0x07c3: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 12.000000
PC=0x07c4: LOAD_REAL 10.000000
PC=0x07c5: STORE_VAR temp1
  更新变量: temp1
  存储值: 10.000000
PC=0x07c6: LOAD_REAL 5.000000
PC=0x07c7: STORE_VAR temp2
  更新变量: temp2
  存储值: 5.000000
PC=0x07c8: LOAD_BOOL FALSE
PC=0x07c9: STORE_VAR hyst_last
  更新变量: hyst_last
  存储值: FALSE
PC=0x07ca: LOAD_VAR test_real1
  变量值: 12.000000
PC=0x07cb: LOAD_VAR temp1
  变量值: 10.000000
PC=0x07cc: LOAD_VAR temp2
  变量值: 5.000000
PC=0x07cd: LOAD_VAR hyst_last
  变量值: FALSE
PC=0x07ce: PUSH_ARGS 4
PC=0x07cf: CALL 0x0266
  调用函数@0x0266, 参数个数: 4
  设置函数参数 (函数名: HYSTERESIS):
  创建栈帧: 返回地址=0x07d0, 帧指针=-4, 参数个数=4
  跳转到函数地址: 0x0266
PC=0x0266: LOAD_VAR last_output
  变量值: FALSE
PC=0x0267: LOAD_BOOL FALSE
PC=0x0268: EQ
  0 == 0 = TRUE
PC=0x0269: JZ 628
  条件为真，继续执行
PC=0x026a: LOAD_VAR input_val
  变量值: 0
PC=0x026b: LOAD_VAR upper_limit
  变量值: 0.000000
PC=0x026c: GE
  0 >= 0 = TRUE
PC=0x026d: JZ 625
  条件为真，继续执行
PC=0x026e: LOAD_BOOL TRUE
PC=0x026f: STORE_VAR output
  更新变量: output
  存储值: TRUE
PC=0x0270: JMP 627
  跳转到 PC=0x0273
PC=0x0273: JMP 637
  跳转到 PC=0x027d
PC=0x027d: LOAD_VAR output
  变量值: TRUE
PC=0x027e: STORE_VAR HYSTERESIS
  创建新变量: HYSTERESIS
  存储值: TRUE
PC=0x027f: LOAD_INT 0
PC=0x0280: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x07d0
  返回值已压入栈顶
PC=0x07d0: STORE_VAR hyst_output
  更新变量: hyst_output
  存储值: 0
PC=0x07d1: LOAD_VAR hyst_output
  变量值: 0
PC=0x07d2: LOAD_BOOL TRUE
PC=0x07d3: EQ
  0 == 1 = FALSE
PC=0x07d4: JZ 2010
  跳转到 PC=0x07da
PC=0x07da: LOAD_VAR fail_counter
  变量值: 16
PC=0x07db: LOAD_INT 1
PC=0x07dc: ADD
  16 + 1 = 17
PC=0x07dd: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 17
PC=0x07de: LOAD_VAR test_counter
  变量值: 46
PC=0x07df: LOAD_INT 1
PC=0x07e0: ADD
  46 + 1 = 47
PC=0x07e1: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 47
PC=0x07e2: LOAD_REAL 7.000000
PC=0x07e3: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 7.000000
PC=0x07e4: LOAD_REAL 10.000000
PC=0x07e5: STORE_VAR temp1
  更新变量: temp1
  存储值: 10.000000
PC=0x07e6: LOAD_REAL 5.000000
PC=0x07e7: STORE_VAR temp2
  更新变量: temp2
  存储值: 5.000000
PC=0x07e8: LOAD_BOOL TRUE
PC=0x07e9: STORE_VAR hyst_last
  更新变量: hyst_last
  存储值: TRUE
PC=0x07ea: LOAD_VAR test_real1
  变量值: 7.000000
PC=0x07eb: LOAD_VAR temp1
  变量值: 10.000000
PC=0x07ec: LOAD_VAR temp2
  变量值: 5.000000
PC=0x07ed: LOAD_VAR hyst_last
  变量值: TRUE
PC=0x07ee: PUSH_ARGS 4
PC=0x07ef: CALL 0x0266
  调用函数@0x0266, 参数个数: 4
  设置函数参数 (函数名: HYSTERESIS):
  创建栈帧: 返回地址=0x07f0, 帧指针=-4, 参数个数=4
  跳转到函数地址: 0x0266
PC=0x0266: LOAD_VAR last_output
  变量值: FALSE
PC=0x0267: LOAD_BOOL FALSE
PC=0x0268: EQ
  0 == 0 = TRUE
PC=0x0269: JZ 628
  条件为真，继续执行
PC=0x026a: LOAD_VAR input_val
  变量值: 0
PC=0x026b: LOAD_VAR upper_limit
  变量值: 0.000000
PC=0x026c: GE
  0 >= 0 = TRUE
PC=0x026d: JZ 625
  条件为真，继续执行
PC=0x026e: LOAD_BOOL TRUE
PC=0x026f: STORE_VAR output
  更新变量: output
  存储值: TRUE
PC=0x0270: JMP 627
  跳转到 PC=0x0273
PC=0x0273: JMP 637
  跳转到 PC=0x027d
PC=0x027d: LOAD_VAR output
  变量值: TRUE
PC=0x027e: STORE_VAR HYSTERESIS
  更新变量: HYSTERESIS
  存储值: TRUE
PC=0x027f: LOAD_INT 0
PC=0x0280: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x07f0
  返回值已压入栈顶
PC=0x07f0: STORE_VAR hyst_output
  更新变量: hyst_output
  存储值: 0
PC=0x07f1: LOAD_VAR hyst_output
  变量值: 0
PC=0x07f2: LOAD_BOOL TRUE
PC=0x07f3: EQ
  0 == 1 = FALSE
PC=0x07f4: JZ 2042
  跳转到 PC=0x07fa
PC=0x07fa: LOAD_VAR fail_counter
  变量值: 17
PC=0x07fb: LOAD_INT 1
PC=0x07fc: ADD
  17 + 1 = 18
PC=0x07fd: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 18
PC=0x07fe: LOAD_VAR test_counter
  变量值: 47
PC=0x07ff: LOAD_INT 1
PC=0x0800: ADD
  47 + 1 = 48
PC=0x0801: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 48
PC=0x0802: LOAD_REAL 3.000000
PC=0x0803: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 3.000000
PC=0x0804: LOAD_REAL 10.000000
PC=0x0805: STORE_VAR temp1
  更新变量: temp1
  存储值: 10.000000
PC=0x0806: LOAD_REAL 5.000000
PC=0x0807: STORE_VAR temp2
  更新变量: temp2
  存储值: 5.000000
PC=0x0808: LOAD_BOOL TRUE
PC=0x0809: STORE_VAR hyst_last
  更新变量: hyst_last
  存储值: TRUE
PC=0x080a: LOAD_VAR test_real1
  变量值: 3.000000
PC=0x080b: LOAD_VAR temp1
  变量值: 10.000000
PC=0x080c: LOAD_VAR temp2
  变量值: 5.000000
PC=0x080d: LOAD_VAR hyst_last
  变量值: TRUE
PC=0x080e: PUSH_ARGS 4
PC=0x080f: CALL 0x0266
  调用函数@0x0266, 参数个数: 4
  设置函数参数 (函数名: HYSTERESIS):
  创建栈帧: 返回地址=0x0810, 帧指针=-4, 参数个数=4
  跳转到函数地址: 0x0266
PC=0x0266: LOAD_VAR last_output
  变量值: FALSE
PC=0x0267: LOAD_BOOL FALSE
PC=0x0268: EQ
  0 == 0 = TRUE
PC=0x0269: JZ 628
  条件为真，继续执行
PC=0x026a: LOAD_VAR input_val
  变量值: 0
PC=0x026b: LOAD_VAR upper_limit
  变量值: 0.000000
PC=0x026c: GE
  0 >= 0 = TRUE
PC=0x026d: JZ 625
  条件为真，继续执行
PC=0x026e: LOAD_BOOL TRUE
PC=0x026f: STORE_VAR output
  更新变量: output
  存储值: TRUE
PC=0x0270: JMP 627
  跳转到 PC=0x0273
PC=0x0273: JMP 637
  跳转到 PC=0x027d
PC=0x027d: LOAD_VAR output
  变量值: TRUE
PC=0x027e: STORE_VAR HYSTERESIS
  更新变量: HYSTERESIS
  存储值: TRUE
PC=0x027f: LOAD_INT 0
PC=0x0280: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0810
  返回值已压入栈顶
PC=0x0810: STORE_VAR hyst_output
  更新变量: hyst_output
  存储值: 0
PC=0x0811: LOAD_VAR hyst_output
  变量值: 0
PC=0x0812: LOAD_BOOL FALSE
PC=0x0813: EQ
  0 == 0 = TRUE
PC=0x0814: JZ 2074
  条件为真，继续执行
PC=0x0815: LOAD_VAR pass_counter
  变量值: 29
PC=0x0816: LOAD_INT 1
PC=0x0817: ADD
  29 + 1 = 30
PC=0x0818: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 30
PC=0x0819: JMP 2078
  跳转到 PC=0x081e
PC=0x081e: LOAD_VAR test_counter
  变量值: 48
PC=0x081f: LOAD_INT 1
PC=0x0820: ADD
  48 + 1 = 49
PC=0x0821: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 49
PC=0x0822: LOAD_REAL 25.000000
PC=0x0823: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 25.000000
PC=0x0824: LOAD_REAL 0.400000
PC=0x0825: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.400000
PC=0x0826: LOAD_REAL 10.000000
PC=0x0827: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 10.000000
PC=0x0828: LOAD_VAR test_real1
  变量值: 25.000000
PC=0x0829: LOAD_VAR test_real2
  变量值: 0.400000
PC=0x082a: LOAD_VAR filter_last
  变量值: 10.000000
PC=0x082b: PUSH_ARGS 3
PC=0x082c: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x082d, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x082d
  返回值已压入栈顶
PC=0x082d: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0
PC=0x082e: LOAD_REAL 0.000000
PC=0x082f: STORE_VAR temp1
  更新变量: temp1
  存储值: 0.000000
PC=0x0830: LOAD_REAL 20.000000
PC=0x0831: STORE_VAR temp2
  更新变量: temp2
  存储值: 20.000000
PC=0x0832: LOAD_VAR temp_val
  变量值: 0
PC=0x0833: LOAD_VAR temp1
  变量值: 0.000000
PC=0x0834: LOAD_VAR temp2
  变量值: 20.000000
PC=0x0835: PUSH_ARGS 3
PC=0x0836: CALL 0x023d
  调用函数@0x023d, 参数个数: 3
  设置函数参数 (函数名: LIMITER):
  创建栈帧: 返回地址=0x0837, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x023d
PC=0x023d: LOAD_VAR input_val
  变量值: 0
PC=0x023e: LOAD_VAR min_limit
  变量值: 0.000000
PC=0x023f: LT
  0 < 0 = FALSE
PC=0x0240: JZ 580
  跳转到 PC=0x0244
PC=0x0244: LOAD_VAR input_val
  变量值: 0
PC=0x0245: STORE_VAR output
  更新变量: output
  存储值: 0
PC=0x0246: LOAD_VAR output
  变量值: 0
PC=0x0247: STORE_VAR LIMITER
  更新变量: LIMITER
  存储值: 0
PC=0x0248: LOAD_INT 0
PC=0x0249: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0837
  返回值已压入栈顶
PC=0x0837: LOAD_REAL 16.000000
PC=0x0838: SUB
  0.000000 - 16.000000 = -16.000000
PC=0x0839: STORE_VAR limit_output
  更新变量: limit_output
  存储值: -16.000000
PC=0x083a: LOAD_VAR limit_output
  变量值: -16.000000
PC=0x083b: PUSH_ARGS 1
PC=0x083c: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x083d, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x083d
  返回值已压入栈顶
PC=0x083d: STORE_VAR temp3
  更新变量: temp3
  存储值: 0
PC=0x083e: LOAD_VAR temp3
  变量值: 0
PC=0x083f: LOAD_REAL 0.100000
PC=0x0840: LT
  0 < -1717986918 = FALSE
PC=0x0841: JZ 2119
  跳转到 PC=0x0847
PC=0x0847: LOAD_VAR fail_counter
  变量值: 18
PC=0x0848: LOAD_INT 1
PC=0x0849: ADD
  18 + 1 = 19
PC=0x084a: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 19
PC=0x084b: LOAD_VAR test_counter
  变量值: 49
PC=0x084c: LOAD_INT 1
PC=0x084d: ADD
  49 + 1 = 50
PC=0x084e: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 50
PC=0x084f: LOAD_REAL 4.000000
PC=0x0850: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 4.000000
PC=0x0851: LOAD_VAR test_real1
  变量值: 4.000000
PC=0x0852: PUSH_ARGS 1
PC=0x0853: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0854, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0854
  返回值已压入栈顶
PC=0x0854: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0855: LOAD_INT 3
PC=0x0856: STORE_VAR test_int1
  更新变量: test_int1
  存储值: 3
PC=0x0857: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0858: LOAD_VAR test_int1
  变量值: 3
PC=0x0859: PUSH_ARGS 2
PC=0x085a: CALL 0x004f
  调用函数@0x004f, 参数个数: 2
  设置函数参数 (函数名: POWER_INT):
  创建栈帧: 返回地址=0x085b, 帧指针=-2, 参数个数=2
  跳转到函数地址: 0x004f
PC=0x004f: LOAD_REAL 1.000000
PC=0x0050: STORE_VAR result
  更新变量: result
  存储值: 1.000000
PC=0x0051: LOAD_VAR exponent
  变量值: 0
PC=0x0052: PUSH_ARGS 1
PC=0x0053: CALL 0x0000
  调用函数@0x0000, 参数个数: 1
  设置函数参数 (函数名: ABS_INT):
  创建栈帧: 返回地址=0x0054, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0000
PC=0x0000: LOAD_VAR input_val
  变量值: 0
PC=0x0001: LOAD_INT 0
PC=0x0002: GE
  0 >= 0 = TRUE
PC=0x0003: JZ 7
  条件为真，继续执行
PC=0x0004: LOAD_VAR input_val
  变量值: 0
PC=0x0005: STORE_VAR ABS_INT
  更新变量: ABS_INT
  存储值: 0
PC=0x0006: JMP 10
  跳转到 PC=0x000a
PC=0x000a: LOAD_INT 0
PC=0x000b: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0054
  返回值已压入栈顶
PC=0x0054: STORE_VAR temp_exp
  更新变量: temp_exp
  存储值: 0
PC=0x0055: LOAD_INT 1
PC=0x0056: STORE_VAR i
  更新变量: i
  存储值: 1
PC=0x0057: LOAD_VAR i
  变量值: 1
PC=0x0058: LOAD_VAR temp_exp
  变量值: 0
PC=0x0059: LE
  1 <= 0 = FALSE
PC=0x005a: JZ 100
  跳转到 PC=0x0064
PC=0x0064: LOAD_VAR exponent
  变量值: 0
PC=0x0065: LOAD_INT 0
PC=0x0066: LT
  0 < 0 = FALSE
PC=0x0067: JZ 108
  跳转到 PC=0x006c
PC=0x006c: LOAD_VAR result
  变量值: 1.000000
PC=0x006d: STORE_VAR POWER_INT
  更新变量: POWER_INT
  存储值: 1.000000
PC=0x006e: LOAD_INT 0
PC=0x006f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x085b
  返回值已压入栈顶
PC=0x085b: LOAD_REAL 8.000000
PC=0x085c: SUB
  0.000000 - 8.000000 = -8.000000
PC=0x085d: STORE_VAR power_result
  更新变量: power_result
  存储值: -8.000000
PC=0x085e: LOAD_VAR power_result
  变量值: -8.000000
PC=0x085f: PUSH_ARGS 1
PC=0x0860: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x0861, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0861
  返回值已压入栈顶
PC=0x0861: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x0862: LOAD_VAR temp1
  变量值: 0
PC=0x0863: LOAD_REAL 0.100000
PC=0x0864: LT
  0 < -1717986918 = FALSE
PC=0x0865: JZ 2155
  跳转到 PC=0x086b
PC=0x086b: LOAD_VAR fail_counter
  变量值: 19
PC=0x086c: LOAD_INT 1
PC=0x086d: ADD
  19 + 1 = 20
PC=0x086e: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 20
PC=0x086f: LOAD_VAR test_counter
  变量值: 50
PC=0x0870: LOAD_INT 1
PC=0x0871: ADD
  50 + 1 = 51
PC=0x0872: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 51
PC=0x0873: LOAD_BOOL TRUE
PC=0x0874: STORE_VAR test_bool1
  更新变量: test_bool1
  存储值: TRUE
PC=0x0875: LOAD_BOOL TRUE
PC=0x0876: STORE_VAR test_bool2
  更新变量: test_bool2
  存储值: TRUE
PC=0x0877: LOAD_BOOL FALSE
PC=0x0878: STORE_VAR test_bool3
  更新变量: test_bool3
  存储值: FALSE
PC=0x0879: LOAD_VAR test_bool1
  变量值: TRUE
PC=0x087a: LOAD_VAR test_bool2
  变量值: TRUE
PC=0x087b: LOAD_VAR test_bool3
  变量值: FALSE
PC=0x087c: PUSH_ARGS 3
PC=0x087d: CALL 0x01bd
  调用函数@0x01bd, 参数个数: 3
  设置函数参数 (函数名: VOTE_2oo3):
  创建栈帧: 返回地址=0x087e, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x01bd
PC=0x01bd: LOAD_INT 0
PC=0x01be: STORE_VAR count
  更新变量: count
  存储值: 0
PC=0x01bf: LOAD_VAR input1
  变量值: FALSE
PC=0x01c0: LOAD_BOOL TRUE
PC=0x01c1: EQ
  0 == 1 = FALSE
PC=0x01c2: JZ 455
  跳转到 PC=0x01c7
PC=0x01c7: LOAD_VAR input2
  变量值: FALSE
PC=0x01c8: LOAD_BOOL TRUE
PC=0x01c9: EQ
  0 == 1 = FALSE
PC=0x01ca: JZ 463
  跳转到 PC=0x01cf
PC=0x01cf: LOAD_VAR input3
  变量值: FALSE
PC=0x01d0: LOAD_BOOL TRUE
PC=0x01d1: EQ
  0 == 1 = FALSE
PC=0x01d2: JZ 471
  跳转到 PC=0x01d7
PC=0x01d7: LOAD_VAR count
  变量值: 0
PC=0x01d8: LOAD_INT 2
PC=0x01d9: GE
  0 >= 2 = FALSE
PC=0x01da: JZ 478
  跳转到 PC=0x01de
PC=0x01de: LOAD_BOOL FALSE
PC=0x01df: STORE_VAR result
  更新变量: result
  存储值: FALSE
PC=0x01e0: LOAD_VAR result
  变量值: FALSE
PC=0x01e1: STORE_VAR VOTE_2oo3
  更新变量: VOTE_2oo3
  存储值: FALSE
PC=0x01e2: LOAD_INT 0
PC=0x01e3: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x087e
  返回值已压入栈顶
PC=0x087e: STORE_VAR vote_2oo3_output
  更新变量: vote_2oo3_output
  存储值: 0
PC=0x087f: LOAD_VAR vote_2oo3_output
  变量值: 0
PC=0x0880: LOAD_BOOL TRUE
PC=0x0881: EQ
  0 == 1 = FALSE
PC=0x0882: JZ 2182
  跳转到 PC=0x0886
PC=0x0886: LOAD_REAL 0.000000
PC=0x0887: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x0888: LOAD_REAL 5.000000
PC=0x0889: STORE_VAR temp1
  更新变量: temp1
  存储值: 5.000000
PC=0x088a: LOAD_REAL 0.500000
PC=0x088b: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.500000
PC=0x088c: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x088d: LOAD_VAR temp2
  变量值: 0.500000
PC=0x088e: LOAD_VAR temp1
  变量值: 5.000000
PC=0x088f: PUSH_ARGS 3
PC=0x0890: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x0891, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0891
  返回值已压入栈顶
PC=0x0891: LOAD_REAL 7.500000
PC=0x0892: SUB
  0.000000 - 7.500000 = -7.500000
PC=0x0893: STORE_VAR filter_output
  更新变量: filter_output
  存储值: -7.500000
PC=0x0894: LOAD_VAR filter_output
  变量值: -7.500000
PC=0x0895: PUSH_ARGS 1
PC=0x0896: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x0897, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0897
  返回值已压入栈顶
PC=0x0897: STORE_VAR temp3
  更新变量: temp3
  存储值: 0
PC=0x0898: LOAD_VAR temp3
  变量值: 0
PC=0x0899: LOAD_REAL 0.100000
PC=0x089a: LT
  0 < -1717986918 = FALSE
PC=0x089b: JZ 2209
  跳转到 PC=0x08a1
PC=0x08a1: LOAD_VAR fail_counter
  变量值: 20
PC=0x08a2: LOAD_INT 1
PC=0x08a3: ADD
  20 + 1 = 21
PC=0x08a4: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 21
PC=0x08a5: LOAD_VAR test_counter
  变量值: 51
PC=0x08a6: LOAD_INT 1
PC=0x08a7: ADD
  51 + 1 = 52
PC=0x08a8: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 52
PC=0x08a9: LOAD_REAL 0.000000
PC=0x08aa: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x08ab: LOAD_INT 1
PC=0x08ac: STORE_VAR i
  更新变量: i
  存储值: 1
PC=0x08ad: LOAD_VAR i
  变量值: 1
PC=0x08ae: LOAD_INT 10
PC=0x08af: LE
  1 <= 10 = TRUE
PC=0x08b0: JZ 2234
  条件为真，继续执行
PC=0x08b1: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x08b2: LOAD_VAR i
  变量值: 1
PC=0x08b3: ADD
  0.000000 + 1.000000 = 1.000000
PC=0x08b4: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 1.000000
PC=0x08b5: LOAD_VAR i
  变量值: 1
PC=0x08b6: LOAD_INT 1
PC=0x08b7: ADD
  1 + 1 = 2
PC=0x08b8: STORE_VAR i
  更新变量: i
  存储值: 2
PC=0x08b9: JMP 2221
  跳转到 PC=0x08ad
PC=0x08ad: LOAD_VAR i
  变量值: 2
PC=0x08ae: LOAD_INT 10
PC=0x08af: LE
  2 <= 10 = TRUE
PC=0x08b0: JZ 2234
  条件为真，继续执行
PC=0x08b1: LOAD_VAR temp_val
  变量值: 1.000000
PC=0x08b2: LOAD_VAR i
  变量值: 2
PC=0x08b3: ADD
  1.000000 + 2.000000 = 3.000000
PC=0x08b4: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 3.000000
PC=0x08b5: LOAD_VAR i
  变量值: 2
PC=0x08b6: LOAD_INT 1
PC=0x08b7: ADD
  2 + 1 = 3
PC=0x08b8: STORE_VAR i
  更新变量: i
  存储值: 3
PC=0x08b9: JMP 2221
  跳转到 PC=0x08ad
PC=0x08ad: LOAD_VAR i
  变量值: 3
PC=0x08ae: LOAD_INT 10
PC=0x08af: LE
  3 <= 10 = TRUE
PC=0x08b0: JZ 2234
  条件为真，继续执行
PC=0x08b1: LOAD_VAR temp_val
  变量值: 3.000000
PC=0x08b2: LOAD_VAR i
  变量值: 3
PC=0x08b3: ADD
  3.000000 + 3.000000 = 6.000000
PC=0x08b4: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 6.000000
PC=0x08b5: LOAD_VAR i
  变量值: 3
PC=0x08b6: LOAD_INT 1
PC=0x08b7: ADD
  3 + 1 = 4
PC=0x08b8: STORE_VAR i
  更新变量: i
  存储值: 4
PC=0x08b9: JMP 2221
  跳转到 PC=0x08ad
PC=0x08ad: LOAD_VAR i
  变量值: 4
PC=0x08ae: LOAD_INT 10
PC=0x08af: LE
  4 <= 10 = TRUE
PC=0x08b0: JZ 2234
  条件为真，继续执行
PC=0x08b1: LOAD_VAR temp_val
  变量值: 6.000000
PC=0x08b2: LOAD_VAR i
  变量值: 4
PC=0x08b3: ADD
  6.000000 + 4.000000 = 10.000000
PC=0x08b4: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 10.000000
PC=0x08b5: LOAD_VAR i
  变量值: 4
PC=0x08b6: LOAD_INT 1
PC=0x08b7: ADD
  4 + 1 = 5
PC=0x08b8: STORE_VAR i
  更新变量: i
  存储值: 5
PC=0x08b9: JMP 2221
  跳转到 PC=0x08ad
PC=0x08ad: LOAD_VAR i
  变量值: 5
PC=0x08ae: LOAD_INT 10
PC=0x08af: LE
  5 <= 10 = TRUE
PC=0x08b0: JZ 2234
  条件为真，继续执行
PC=0x08b1: LOAD_VAR temp_val
  变量值: 10.000000
PC=0x08b2: LOAD_VAR i
  变量值: 5
PC=0x08b3: ADD
  10.000000 + 5.000000 = 15.000000
PC=0x08b4: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 15.000000
PC=0x08b5: LOAD_VAR i
  变量值: 5
PC=0x08b6: LOAD_INT 1
PC=0x08b7: ADD
  5 + 1 = 6
PC=0x08b8: STORE_VAR i
  更新变量: i
  存储值: 6
PC=0x08b9: JMP 2221
  跳转到 PC=0x08ad
PC=0x08ad: LOAD_VAR i
  变量值: 6
PC=0x08ae: LOAD_INT 10
PC=0x08af: LE
  6 <= 10 = TRUE
PC=0x08b0: JZ 2234
  条件为真，继续执行
PC=0x08b1: LOAD_VAR temp_val
  变量值: 15.000000
PC=0x08b2: LOAD_VAR i
  变量值: 6
PC=0x08b3: ADD
  15.000000 + 6.000000 = 21.000000
PC=0x08b4: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 21.000000
PC=0x08b5: LOAD_VAR i
  变量值: 6
PC=0x08b6: LOAD_INT 1
PC=0x08b7: ADD
  6 + 1 = 7
PC=0x08b8: STORE_VAR i
  更新变量: i
  存储值: 7
PC=0x08b9: JMP 2221
  跳转到 PC=0x08ad
PC=0x08ad: LOAD_VAR i
  变量值: 7
PC=0x08ae: LOAD_INT 10
PC=0x08af: LE
  7 <= 10 = TRUE
PC=0x08b0: JZ 2234
  条件为真，继续执行
PC=0x08b1: LOAD_VAR temp_val
  变量值: 21.000000
PC=0x08b2: LOAD_VAR i
  变量值: 7
PC=0x08b3: ADD
  21.000000 + 7.000000 = 28.000000
PC=0x08b4: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 28.000000
PC=0x08b5: LOAD_VAR i
  变量值: 7
PC=0x08b6: LOAD_INT 1
PC=0x08b7: ADD
  7 + 1 = 8
PC=0x08b8: STORE_VAR i
  更新变量: i
  存储值: 8
PC=0x08b9: JMP 2221
  跳转到 PC=0x08ad
PC=0x08ad: LOAD_VAR i
  变量值: 8
PC=0x08ae: LOAD_INT 10
PC=0x08af: LE
  8 <= 10 = TRUE
PC=0x08b0: JZ 2234
  条件为真，继续执行
PC=0x08b1: LOAD_VAR temp_val
  变量值: 28.000000
PC=0x08b2: LOAD_VAR i
  变量值: 8
PC=0x08b3: ADD
  28.000000 + 8.000000 = 36.000000
PC=0x08b4: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 36.000000
PC=0x08b5: LOAD_VAR i
  变量值: 8
PC=0x08b6: LOAD_INT 1
PC=0x08b7: ADD
  8 + 1 = 9
PC=0x08b8: STORE_VAR i
  更新变量: i
  存储值: 9
PC=0x08b9: JMP 2221
  跳转到 PC=0x08ad
PC=0x08ad: LOAD_VAR i
  变量值: 9
PC=0x08ae: LOAD_INT 10
PC=0x08af: LE
  9 <= 10 = TRUE
PC=0x08b0: JZ 2234
  条件为真，继续执行
PC=0x08b1: LOAD_VAR temp_val
  变量值: 36.000000
PC=0x08b2: LOAD_VAR i
  变量值: 9
PC=0x08b3: ADD
  36.000000 + 9.000000 = 45.000000
PC=0x08b4: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 45.000000
PC=0x08b5: LOAD_VAR i
  变量值: 9
PC=0x08b6: LOAD_INT 1
PC=0x08b7: ADD
  9 + 1 = 10
PC=0x08b8: STORE_VAR i
  更新变量: i
  存储值: 10
PC=0x08b9: JMP 2221
  跳转到 PC=0x08ad
PC=0x08ad: LOAD_VAR i
  变量值: 10
PC=0x08ae: LOAD_INT 10
PC=0x08af: LE
  10 <= 10 = TRUE
PC=0x08b0: JZ 2234
  条件为真，继续执行
PC=0x08b1: LOAD_VAR temp_val
  变量值: 45.000000
PC=0x08b2: LOAD_VAR i
  变量值: 10
PC=0x08b3: ADD
  45.000000 + 10.000000 = 55.000000
PC=0x08b4: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 55.000000
PC=0x08b5: LOAD_VAR i
  变量值: 10
PC=0x08b6: LOAD_INT 1
PC=0x08b7: ADD
  10 + 1 = 11
PC=0x08b8: STORE_VAR i
  更新变量: i
  存储值: 11
PC=0x08b9: JMP 2221
  跳转到 PC=0x08ad
PC=0x08ad: LOAD_VAR i
  变量值: 11
PC=0x08ae: LOAD_INT 10
PC=0x08af: LE
  11 <= 10 = FALSE
PC=0x08b0: JZ 2234
  跳转到 PC=0x08ba
PC=0x08ba: LOAD_VAR temp_val
  变量值: 55.000000
PC=0x08bb: LOAD_REAL 55.000000
PC=0x08bc: EQ
  0 == 0 = TRUE
PC=0x08bd: JZ 2243
  条件为真，继续执行
PC=0x08be: LOAD_VAR pass_counter
  变量值: 30
PC=0x08bf: LOAD_INT 1
PC=0x08c0: ADD
  30 + 1 = 31
PC=0x08c1: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 31
PC=0x08c2: JMP 2247
  跳转到 PC=0x08c7
PC=0x08c7: LOAD_VAR test_counter
  变量值: 52
PC=0x08c8: LOAD_INT 1
PC=0x08c9: ADD
  52 + 1 = 53
PC=0x08ca: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 53
PC=0x08cb: LOAD_INT 1
PC=0x08cc: STORE_VAR temp_int
  更新变量: temp_int
  存储值: 1
PC=0x08cd: LOAD_REAL 1.000000
PC=0x08ce: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 1.000000
PC=0x08cf: LOAD_VAR temp_int
  变量值: 1
PC=0x08d0: LOAD_INT 5
PC=0x08d1: LE
  1 <= 5 = TRUE
PC=0x08d2: JZ 2268
  条件为真，继续执行
PC=0x08d3: LOAD_VAR temp_val
  变量值: 1.000000
PC=0x08d4: LOAD_VAR temp_int
  变量值: 1
PC=0x08d5: MUL
  1.000000 * 1.000000 = 1.000000
PC=0x08d6: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 1.000000
PC=0x08d7: LOAD_VAR temp_int
  变量值: 1
PC=0x08d8: LOAD_INT 1
PC=0x08d9: ADD
  1 + 1 = 2
PC=0x08da: STORE_VAR temp_int
  更新变量: temp_int
  存储值: 2
PC=0x08db: JMP 2255
  跳转到 PC=0x08cf
PC=0x08cf: LOAD_VAR temp_int
  变量值: 2
PC=0x08d0: LOAD_INT 5
PC=0x08d1: LE
  2 <= 5 = TRUE
PC=0x08d2: JZ 2268
  条件为真，继续执行
PC=0x08d3: LOAD_VAR temp_val
  变量值: 1.000000
PC=0x08d4: LOAD_VAR temp_int
  变量值: 2
PC=0x08d5: MUL
  1.000000 * 2.000000 = 2.000000
PC=0x08d6: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 2.000000
PC=0x08d7: LOAD_VAR temp_int
  变量值: 2
PC=0x08d8: LOAD_INT 1
PC=0x08d9: ADD
  2 + 1 = 3
PC=0x08da: STORE_VAR temp_int
  更新变量: temp_int
  存储值: 3
PC=0x08db: JMP 2255
  跳转到 PC=0x08cf
PC=0x08cf: LOAD_VAR temp_int
  变量值: 3
PC=0x08d0: LOAD_INT 5
PC=0x08d1: LE
  3 <= 5 = TRUE
PC=0x08d2: JZ 2268
  条件为真，继续执行
PC=0x08d3: LOAD_VAR temp_val
  变量值: 2.000000
PC=0x08d4: LOAD_VAR temp_int
  变量值: 3
PC=0x08d5: MUL
  2.000000 * 3.000000 = 6.000000
PC=0x08d6: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 6.000000
PC=0x08d7: LOAD_VAR temp_int
  变量值: 3
PC=0x08d8: LOAD_INT 1
PC=0x08d9: ADD
  3 + 1 = 4
PC=0x08da: STORE_VAR temp_int
  更新变量: temp_int
  存储值: 4
PC=0x08db: JMP 2255
  跳转到 PC=0x08cf
PC=0x08cf: LOAD_VAR temp_int
  变量值: 4
PC=0x08d0: LOAD_INT 5
PC=0x08d1: LE
  4 <= 5 = TRUE
PC=0x08d2: JZ 2268
  条件为真，继续执行
PC=0x08d3: LOAD_VAR temp_val
  变量值: 6.000000
PC=0x08d4: LOAD_VAR temp_int
  变量值: 4
PC=0x08d5: MUL
  6.000000 * 4.000000 = 24.000000
PC=0x08d6: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 24.000000
PC=0x08d7: LOAD_VAR temp_int
  变量值: 4
PC=0x08d8: LOAD_INT 1
PC=0x08d9: ADD
  4 + 1 = 5
PC=0x08da: STORE_VAR temp_int
  更新变量: temp_int
  存储值: 5
PC=0x08db: JMP 2255
  跳转到 PC=0x08cf
PC=0x08cf: LOAD_VAR temp_int
  变量值: 5
PC=0x08d0: LOAD_INT 5
PC=0x08d1: LE
  5 <= 5 = TRUE
PC=0x08d2: JZ 2268
  条件为真，继续执行
PC=0x08d3: LOAD_VAR temp_val
  变量值: 24.000000
PC=0x08d4: LOAD_VAR temp_int
  变量值: 5
PC=0x08d5: MUL
  24.000000 * 5.000000 = 120.000000
PC=0x08d6: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 120.000000
PC=0x08d7: LOAD_VAR temp_int
  变量值: 5
PC=0x08d8: LOAD_INT 1
PC=0x08d9: ADD
  5 + 1 = 6
PC=0x08da: STORE_VAR temp_int
  更新变量: temp_int
  存储值: 6
PC=0x08db: JMP 2255
  跳转到 PC=0x08cf
PC=0x08cf: LOAD_VAR temp_int
  变量值: 6
PC=0x08d0: LOAD_INT 5
PC=0x08d1: LE
  6 <= 5 = FALSE
PC=0x08d2: JZ 2268
  跳转到 PC=0x08dc
PC=0x08dc: LOAD_VAR temp_val
  变量值: 120.000000
PC=0x08dd: LOAD_REAL 120.000000
PC=0x08de: EQ
  0 == 0 = TRUE
PC=0x08df: JZ 2277
  条件为真，继续执行
PC=0x08e0: LOAD_VAR pass_counter
  变量值: 31
PC=0x08e1: LOAD_INT 1
PC=0x08e2: ADD
  31 + 1 = 32
PC=0x08e3: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 32
PC=0x08e4: JMP 2281
  跳转到 PC=0x08e9
PC=0x08e9: LOAD_VAR test_counter
  变量值: 53
PC=0x08ea: LOAD_INT 1
PC=0x08eb: ADD
  53 + 1 = 54
PC=0x08ec: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 54
PC=0x08ed: LOAD_REAL 0.000000
PC=0x08ee: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x08ef: LOAD_INT 1
PC=0x08f0: STORE_VAR i
  更新变量: i
  存储值: 1
PC=0x08f1: LOAD_VAR i
  变量值: 1
PC=0x08f2: LOAD_INT 5
PC=0x08f3: LE
  1 <= 5 = TRUE
PC=0x08f4: JZ 2313
  条件为真，继续执行
PC=0x08f5: LOAD_INT 1
PC=0x08f6: STORE_VAR j
  更新变量: j
  存储值: 1
PC=0x08f7: LOAD_VAR j
  变量值: 1
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  1 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  0.000000 + 1.000000 = 1.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 1.000000
PC=0x08ff: LOAD_VAR j
  变量值: 1
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  1 + 1 = 2
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 2
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 2
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  2 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 1.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  1.000000 + 1.000000 = 2.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 2.000000
PC=0x08ff: LOAD_VAR j
  变量值: 2
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  2 + 1 = 3
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 3
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 3
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  3 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 2.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  2.000000 + 1.000000 = 3.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 3.000000
PC=0x08ff: LOAD_VAR j
  变量值: 3
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  3 + 1 = 4
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 4
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 4
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  4 <= 3 = FALSE
PC=0x08fa: JZ 2308
  跳转到 PC=0x0904
PC=0x0904: LOAD_VAR i
  变量值: 1
PC=0x0905: LOAD_INT 1
PC=0x0906: ADD
  1 + 1 = 2
PC=0x0907: STORE_VAR i
  更新变量: i
  存储值: 2
PC=0x0908: JMP 2289
  跳转到 PC=0x08f1
PC=0x08f1: LOAD_VAR i
  变量值: 2
PC=0x08f2: LOAD_INT 5
PC=0x08f3: LE
  2 <= 5 = TRUE
PC=0x08f4: JZ 2313
  条件为真，继续执行
PC=0x08f5: LOAD_INT 1
PC=0x08f6: STORE_VAR j
  更新变量: j
  存储值: 1
PC=0x08f7: LOAD_VAR j
  变量值: 1
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  1 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 3.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  3.000000 + 1.000000 = 4.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 4.000000
PC=0x08ff: LOAD_VAR j
  变量值: 1
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  1 + 1 = 2
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 2
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 2
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  2 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 4.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  4.000000 + 1.000000 = 5.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 5.000000
PC=0x08ff: LOAD_VAR j
  变量值: 2
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  2 + 1 = 3
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 3
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 3
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  3 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 5.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  5.000000 + 1.000000 = 6.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 6.000000
PC=0x08ff: LOAD_VAR j
  变量值: 3
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  3 + 1 = 4
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 4
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 4
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  4 <= 3 = FALSE
PC=0x08fa: JZ 2308
  跳转到 PC=0x0904
PC=0x0904: LOAD_VAR i
  变量值: 2
PC=0x0905: LOAD_INT 1
PC=0x0906: ADD
  2 + 1 = 3
PC=0x0907: STORE_VAR i
  更新变量: i
  存储值: 3
PC=0x0908: JMP 2289
  跳转到 PC=0x08f1
PC=0x08f1: LOAD_VAR i
  变量值: 3
PC=0x08f2: LOAD_INT 5
PC=0x08f3: LE
  3 <= 5 = TRUE
PC=0x08f4: JZ 2313
  条件为真，继续执行
PC=0x08f5: LOAD_INT 1
PC=0x08f6: STORE_VAR j
  更新变量: j
  存储值: 1
PC=0x08f7: LOAD_VAR j
  变量值: 1
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  1 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 6.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  6.000000 + 1.000000 = 7.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 7.000000
PC=0x08ff: LOAD_VAR j
  变量值: 1
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  1 + 1 = 2
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 2
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 2
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  2 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 7.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  7.000000 + 1.000000 = 8.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 8.000000
PC=0x08ff: LOAD_VAR j
  变量值: 2
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  2 + 1 = 3
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 3
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 3
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  3 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 8.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  8.000000 + 1.000000 = 9.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 9.000000
PC=0x08ff: LOAD_VAR j
  变量值: 3
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  3 + 1 = 4
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 4
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 4
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  4 <= 3 = FALSE
PC=0x08fa: JZ 2308
  跳转到 PC=0x0904
PC=0x0904: LOAD_VAR i
  变量值: 3
PC=0x0905: LOAD_INT 1
PC=0x0906: ADD
  3 + 1 = 4
PC=0x0907: STORE_VAR i
  更新变量: i
  存储值: 4
PC=0x0908: JMP 2289
  跳转到 PC=0x08f1
PC=0x08f1: LOAD_VAR i
  变量值: 4
PC=0x08f2: LOAD_INT 5
PC=0x08f3: LE
  4 <= 5 = TRUE
PC=0x08f4: JZ 2313
  条件为真，继续执行
PC=0x08f5: LOAD_INT 1
PC=0x08f6: STORE_VAR j
  更新变量: j
  存储值: 1
PC=0x08f7: LOAD_VAR j
  变量值: 1
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  1 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 9.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  9.000000 + 1.000000 = 10.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 10.000000
PC=0x08ff: LOAD_VAR j
  变量值: 1
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  1 + 1 = 2
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 2
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 2
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  2 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 10.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  10.000000 + 1.000000 = 11.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 11.000000
PC=0x08ff: LOAD_VAR j
  变量值: 2
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  2 + 1 = 3
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 3
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 3
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  3 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 11.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  11.000000 + 1.000000 = 12.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 12.000000
PC=0x08ff: LOAD_VAR j
  变量值: 3
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  3 + 1 = 4
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 4
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 4
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  4 <= 3 = FALSE
PC=0x08fa: JZ 2308
  跳转到 PC=0x0904
PC=0x0904: LOAD_VAR i
  变量值: 4
PC=0x0905: LOAD_INT 1
PC=0x0906: ADD
  4 + 1 = 5
PC=0x0907: STORE_VAR i
  更新变量: i
  存储值: 5
PC=0x0908: JMP 2289
  跳转到 PC=0x08f1
PC=0x08f1: LOAD_VAR i
  变量值: 5
PC=0x08f2: LOAD_INT 5
PC=0x08f3: LE
  5 <= 5 = TRUE
PC=0x08f4: JZ 2313
  条件为真，继续执行
PC=0x08f5: LOAD_INT 1
PC=0x08f6: STORE_VAR j
  更新变量: j
  存储值: 1
PC=0x08f7: LOAD_VAR j
  变量值: 1
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  1 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 12.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  12.000000 + 1.000000 = 13.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 13.000000
PC=0x08ff: LOAD_VAR j
  变量值: 1
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  1 + 1 = 2
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 2
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 2
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  2 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 13.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  13.000000 + 1.000000 = 14.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 14.000000
PC=0x08ff: LOAD_VAR j
  变量值: 2
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  2 + 1 = 3
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 3
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 3
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  3 <= 3 = TRUE
PC=0x08fa: JZ 2308
  条件为真，继续执行
PC=0x08fb: LOAD_VAR temp_val
  变量值: 14.000000
PC=0x08fc: LOAD_REAL 1.000000
PC=0x08fd: ADD
  14.000000 + 1.000000 = 15.000000
PC=0x08fe: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 15.000000
PC=0x08ff: LOAD_VAR j
  变量值: 3
PC=0x0900: LOAD_INT 1
PC=0x0901: ADD
  3 + 1 = 4
PC=0x0902: STORE_VAR j
  更新变量: j
  存储值: 4
PC=0x0903: JMP 2295
  跳转到 PC=0x08f7
PC=0x08f7: LOAD_VAR j
  变量值: 4
PC=0x08f8: LOAD_INT 3
PC=0x08f9: LE
  4 <= 3 = FALSE
PC=0x08fa: JZ 2308
  跳转到 PC=0x0904
PC=0x0904: LOAD_VAR i
  变量值: 5
PC=0x0905: LOAD_INT 1
PC=0x0906: ADD
  5 + 1 = 6
PC=0x0907: STORE_VAR i
  更新变量: i
  存储值: 6
PC=0x0908: JMP 2289
  跳转到 PC=0x08f1
PC=0x08f1: LOAD_VAR i
  变量值: 6
PC=0x08f2: LOAD_INT 5
PC=0x08f3: LE
  6 <= 5 = FALSE
PC=0x08f4: JZ 2313
  跳转到 PC=0x0909
PC=0x0909: LOAD_VAR temp_val
  变量值: 15.000000
PC=0x090a: LOAD_REAL 15.000000
PC=0x090b: EQ
  0 == 0 = TRUE
PC=0x090c: JZ 2322
  条件为真，继续执行
PC=0x090d: LOAD_VAR pass_counter
  变量值: 32
PC=0x090e: LOAD_INT 1
PC=0x090f: ADD
  32 + 1 = 33
PC=0x0910: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 33
PC=0x0911: JMP 2326
  跳转到 PC=0x0916
PC=0x0916: LOAD_VAR test_counter
  变量值: 54
PC=0x0917: LOAD_INT 1
PC=0x0918: ADD
  54 + 1 = 55
PC=0x0919: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 55
PC=0x091a: LOAD_REAL 0.000000
PC=0x091b: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 0.000000
PC=0x091c: LOAD_VAR test_real1
  变量值: 0.000000
PC=0x091d: PUSH_ARGS 1
PC=0x091e: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x091f, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x091f
  返回值已压入栈顶
PC=0x091f: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0920: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0921: LOAD_REAL 0.000000
PC=0x0922: EQ
  0 == 0 = TRUE
PC=0x0923: JZ 2345
  条件为真，继续执行
PC=0x0924: LOAD_VAR pass_counter
  变量值: 33
PC=0x0925: LOAD_INT 1
PC=0x0926: ADD
  33 + 1 = 34
PC=0x0927: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 34
PC=0x0928: JMP 2349
  跳转到 PC=0x092d
PC=0x092d: LOAD_VAR test_counter
  变量值: 55
PC=0x092e: LOAD_INT 1
PC=0x092f: ADD
  55 + 1 = 56
PC=0x0930: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 56
PC=0x0931: LOAD_REAL 0.000000
PC=0x0932: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 0.000000
PC=0x0933: LOAD_VAR test_real1
  变量值: 0.000000
PC=0x0934: PUSH_ARGS 1
PC=0x0935: CALL 0x00b1
  调用函数@0x00b1, 参数个数: 1
  设置函数参数 (函数名: CBRT):
  创建栈帧: 返回地址=0x0936, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x00b1
PC=0x00b1: LOAD_VAR input_val
  变量值: 0
PC=0x00b2: PUSH_ARGS 1
PC=0x00b3: CALL 0x0044
  调用函数@0x0044, 参数个数: 1
  设置函数参数 (函数名: SIGN):
  创建栈帧: 返回地址=0x00b4, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0044
PC=0x0044: LOAD_VAR input_val
  变量值: 0
PC=0x0045: LOAD_REAL 0.000000
PC=0x0046: GT
  0 > 0 = FALSE
PC=0x0047: JZ 75
  跳转到 PC=0x004b
PC=0x004b: LOAD_INT 0
PC=0x004c: STORE_VAR SIGN
  更新变量: SIGN
  存储值: 0
PC=0x004d: LOAD_INT 0
PC=0x004e: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x00b4
  返回值已压入栈顶
PC=0x00b4: STORE_VAR sign_val
  更新变量: sign_val
  存储值: 0
PC=0x00b5: LOAD_VAR input_val
  变量值: 0
PC=0x00b6: PUSH_ARGS 1
PC=0x00b7: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x00b8, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x00b8
  返回值已压入栈顶
PC=0x00b8: STORE_VAR abs_input
  更新变量: abs_input
  存储值: 0
PC=0x00b9: LOAD_VAR abs_input
  变量值: 0
PC=0x00ba: LOAD_REAL 0.000000
PC=0x00bb: EQ
  0 == 0 = TRUE
PC=0x00bc: JZ 193
  条件为真，继续执行
PC=0x00bd: LOAD_REAL 0.000000
PC=0x00be: STORE_VAR CBRT
  更新变量: CBRT
  存储值: 0.000000
PC=0x00bf: LOAD_INT 0
PC=0x00c0: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0936
  返回值已压入栈顶
PC=0x0936: STORE_VAR cbrt_result
  更新变量: cbrt_result
  存储值: 0
PC=0x0937: LOAD_VAR cbrt_result
  变量值: 0
PC=0x0938: LOAD_REAL 0.000000
PC=0x0939: EQ
  0 == 0 = TRUE
PC=0x093a: JZ 2368
  条件为真，继续执行
PC=0x093b: LOAD_VAR pass_counter
  变量值: 34
PC=0x093c: LOAD_INT 1
PC=0x093d: ADD
  34 + 1 = 35
PC=0x093e: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 35
PC=0x093f: JMP 2372
  跳转到 PC=0x0944
PC=0x0944: LOAD_VAR test_counter
  变量值: 56
PC=0x0945: LOAD_INT 1
PC=0x0946: ADD
  56 + 1 = 57
PC=0x0947: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 57
PC=0x0948: LOAD_REAL 1000.000000
PC=0x0949: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 1000.000000
PC=0x094a: LOAD_REAL 10.000000
PC=0x094b: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 10.000000
PC=0x094c: LOAD_VAR test_real1
  变量值: 1000.000000
PC=0x094d: LOAD_VAR test_real2
  变量值: 10.000000
PC=0x094e: PUSH_ARGS 2
PC=0x094f: CALL 0x002e
  调用函数@0x002e, 参数个数: 2
  设置函数参数 (函数名: MAX_REAL):
  创建栈帧: 返回地址=0x0950, 帧指针=-2, 参数个数=2
  跳转到函数地址: 0x002e
PC=0x002e: LOAD_VAR val1
  变量值: 0
PC=0x002f: LOAD_VAR val2
  变量值: 0
PC=0x0030: GT
  0 > 0 = FALSE
PC=0x0031: JZ 53
  跳转到 PC=0x0035
PC=0x0035: LOAD_VAR val2
  变量值: 0
PC=0x0036: STORE_VAR MAX_REAL
  更新变量: MAX_REAL
  存储值: 0
PC=0x0037: LOAD_INT 0
PC=0x0038: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0950
  返回值已压入栈顶
PC=0x0950: STORE_VAR max_result
  更新变量: max_result
  存储值: 0
PC=0x0951: LOAD_VAR max_result
  变量值: 0
PC=0x0952: LOAD_REAL 1000.000000
PC=0x0953: EQ
  0 == 0 = TRUE
PC=0x0954: JZ 2394
  条件为真，继续执行
PC=0x0955: LOAD_VAR pass_counter
  变量值: 35
PC=0x0956: LOAD_INT 1
PC=0x0957: ADD
  35 + 1 = 36
PC=0x0958: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 36
PC=0x0959: JMP 2398
  跳转到 PC=0x095e
PC=0x095e: LOAD_VAR test_counter
  变量值: 57
PC=0x095f: LOAD_INT 1
PC=0x0960: ADD
  57 + 1 = 58
PC=0x0961: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 58
PC=0x0962: LOAD_REAL -100.000000
PC=0x0963: STORE_VAR test_real1
  更新变量: test_real1
  存储值: -100.000000
PC=0x0964: LOAD_VAR test_real1
  变量值: -100.000000
PC=0x0965: PUSH_ARGS 1
PC=0x0966: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x0967, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0967
  返回值已压入栈顶
PC=0x0967: STORE_VAR abs_result
  更新变量: abs_result
  存储值: 0
PC=0x0968: LOAD_VAR abs_result
  变量值: 0
PC=0x0969: LOAD_REAL 100.000000
PC=0x096a: EQ
  0 == 0 = TRUE
PC=0x096b: JZ 2417
  条件为真，继续执行
PC=0x096c: LOAD_VAR pass_counter
  变量值: 36
PC=0x096d: LOAD_INT 1
PC=0x096e: ADD
  36 + 1 = 37
PC=0x096f: STORE_VAR pass_counter
  更新变量: pass_counter
  存储值: 37
PC=0x0970: JMP 2421
  跳转到 PC=0x0975
PC=0x0975: LOAD_VAR test_counter
  变量值: 58
PC=0x0976: LOAD_INT 1
PC=0x0977: ADD
  58 + 1 = 59
PC=0x0978: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 59
PC=0x0979: LOAD_REAL 0.000000
PC=0x097a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x097b: LOAD_INT 1
PC=0x097c: STORE_VAR i
  更新变量: i
  存储值: 1
PC=0x097d: LOAD_VAR i
  变量值: 1
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  1 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 1
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 1
PC=0x0983: LOAD_VAR test_real1
  变量值: 1
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 1
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  1 + 1 = 2
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 2
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 2
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  2 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 2
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 2
PC=0x0983: LOAD_VAR test_real1
  变量值: 2
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 2
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  2 + 1 = 3
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 3
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 3
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  3 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 3
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 3
PC=0x0983: LOAD_VAR test_real1
  变量值: 3
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 3
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  3 + 1 = 4
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 4
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 4
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  4 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 4
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 4
PC=0x0983: LOAD_VAR test_real1
  变量值: 4
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 4
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  4 + 1 = 5
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 5
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 5
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  5 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 5
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 5
PC=0x0983: LOAD_VAR test_real1
  变量值: 5
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 5
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  5 + 1 = 6
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 6
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 6
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  6 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 6
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 6
PC=0x0983: LOAD_VAR test_real1
  变量值: 6
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 6
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  6 + 1 = 7
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 7
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 7
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  7 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 7
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 7
PC=0x0983: LOAD_VAR test_real1
  变量值: 7
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 7
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  7 + 1 = 8
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 8
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 8
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  8 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 8
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 8
PC=0x0983: LOAD_VAR test_real1
  变量值: 8
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 8
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  8 + 1 = 9
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 9
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 9
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  9 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 9
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 9
PC=0x0983: LOAD_VAR test_real1
  变量值: 9
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 9
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  9 + 1 = 10
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 10
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 10
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  10 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 10
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10
PC=0x0983: LOAD_VAR test_real1
  变量值: 10
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 10
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  10 + 1 = 11
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 11
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 11
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  11 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 11
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 11
PC=0x0983: LOAD_VAR test_real1
  变量值: 11
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 11
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  11 + 1 = 12
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 12
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 12
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  12 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 12
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 12
PC=0x0983: LOAD_VAR test_real1
  变量值: 12
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 12
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  12 + 1 = 13
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 13
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 13
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  13 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 13
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 13
PC=0x0983: LOAD_VAR test_real1
  变量值: 13
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 13
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  13 + 1 = 14
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 14
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 14
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  14 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 14
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 14
PC=0x0983: LOAD_VAR test_real1
  变量值: 14
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 14
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  14 + 1 = 15
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 15
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 15
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  15 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 15
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 15
PC=0x0983: LOAD_VAR test_real1
  变量值: 15
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 15
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  15 + 1 = 16
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 16
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 16
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  16 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 16
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 16
PC=0x0983: LOAD_VAR test_real1
  变量值: 16
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 16
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  16 + 1 = 17
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 17
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 17
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  17 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 17
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 17
PC=0x0983: LOAD_VAR test_real1
  变量值: 17
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 17
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  17 + 1 = 18
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 18
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 18
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  18 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 18
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 18
PC=0x0983: LOAD_VAR test_real1
  变量值: 18
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 18
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  18 + 1 = 19
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 19
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 19
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  19 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 19
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 19
PC=0x0983: LOAD_VAR test_real1
  变量值: 19
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 19
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  19 + 1 = 20
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 20
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 20
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  20 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 20
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 20
PC=0x0983: LOAD_VAR test_real1
  变量值: 20
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 20
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  20 + 1 = 21
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 21
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 21
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  21 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 21
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 21
PC=0x0983: LOAD_VAR test_real1
  变量值: 21
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 21
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  21 + 1 = 22
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 22
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 22
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  22 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 22
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 22
PC=0x0983: LOAD_VAR test_real1
  变量值: 22
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 22
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  22 + 1 = 23
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 23
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 23
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  23 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 23
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 23
PC=0x0983: LOAD_VAR test_real1
  变量值: 23
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 23
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  23 + 1 = 24
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 24
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 24
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  24 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 24
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 24
PC=0x0983: LOAD_VAR test_real1
  变量值: 24
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 24
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  24 + 1 = 25
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 25
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 25
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  25 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 25
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 25
PC=0x0983: LOAD_VAR test_real1
  变量值: 25
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 25
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  25 + 1 = 26
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 26
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 26
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  26 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 26
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 26
PC=0x0983: LOAD_VAR test_real1
  变量值: 26
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 26
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  26 + 1 = 27
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 27
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 27
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  27 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 27
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 27
PC=0x0983: LOAD_VAR test_real1
  变量值: 27
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 27
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  27 + 1 = 28
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 28
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 28
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  28 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 28
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 28
PC=0x0983: LOAD_VAR test_real1
  变量值: 28
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 28
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  28 + 1 = 29
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 29
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 29
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  29 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 29
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 29
PC=0x0983: LOAD_VAR test_real1
  变量值: 29
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 29
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  29 + 1 = 30
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 30
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 30
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  30 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 30
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 30
PC=0x0983: LOAD_VAR test_real1
  变量值: 30
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 30
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  30 + 1 = 31
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 31
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 31
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  31 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 31
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 31
PC=0x0983: LOAD_VAR test_real1
  变量值: 31
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 31
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  31 + 1 = 32
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 32
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 32
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  32 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 32
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 32
PC=0x0983: LOAD_VAR test_real1
  变量值: 32
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 32
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  32 + 1 = 33
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 33
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 33
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  33 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 33
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 33
PC=0x0983: LOAD_VAR test_real1
  变量值: 33
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 33
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  33 + 1 = 34
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 34
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 34
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  34 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 34
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 34
PC=0x0983: LOAD_VAR test_real1
  变量值: 34
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 34
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  34 + 1 = 35
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 35
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 35
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  35 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 35
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 35
PC=0x0983: LOAD_VAR test_real1
  变量值: 35
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 35
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  35 + 1 = 36
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 36
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 36
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  36 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 36
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 36
PC=0x0983: LOAD_VAR test_real1
  变量值: 36
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 36
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  36 + 1 = 37
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 37
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 37
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  37 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 37
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 37
PC=0x0983: LOAD_VAR test_real1
  变量值: 37
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 37
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  37 + 1 = 38
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 38
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 38
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  38 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 38
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 38
PC=0x0983: LOAD_VAR test_real1
  变量值: 38
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 38
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  38 + 1 = 39
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 39
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 39
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  39 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 39
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 39
PC=0x0983: LOAD_VAR test_real1
  变量值: 39
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 39
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  39 + 1 = 40
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 40
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 40
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  40 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 40
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 40
PC=0x0983: LOAD_VAR test_real1
  变量值: 40
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 40
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  40 + 1 = 41
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 41
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 41
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  41 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 41
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 41
PC=0x0983: LOAD_VAR test_real1
  变量值: 41
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 41
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  41 + 1 = 42
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 42
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 42
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  42 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 42
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 42
PC=0x0983: LOAD_VAR test_real1
  变量值: 42
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 42
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  42 + 1 = 43
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 43
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 43
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  43 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 43
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 43
PC=0x0983: LOAD_VAR test_real1
  变量值: 43
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 43
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  43 + 1 = 44
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 44
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 44
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  44 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 44
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 44
PC=0x0983: LOAD_VAR test_real1
  变量值: 44
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 44
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  44 + 1 = 45
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 45
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 45
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  45 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 45
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 45
PC=0x0983: LOAD_VAR test_real1
  变量值: 45
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 45
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  45 + 1 = 46
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 46
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 46
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  46 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 46
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 46
PC=0x0983: LOAD_VAR test_real1
  变量值: 46
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 46
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  46 + 1 = 47
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 47
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 47
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  47 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 47
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 47
PC=0x0983: LOAD_VAR test_real1
  变量值: 47
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 47
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  47 + 1 = 48
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 48
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 48
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  48 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 48
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 48
PC=0x0983: LOAD_VAR test_real1
  变量值: 48
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 48
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  48 + 1 = 49
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 49
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 49
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  49 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 49
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 49
PC=0x0983: LOAD_VAR test_real1
  变量值: 49
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 49
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  49 + 1 = 50
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 50
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 50
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  50 <= 50 = TRUE
PC=0x0980: JZ 2448
  条件为真，继续执行
PC=0x0981: LOAD_VAR i
  变量值: 50
PC=0x0982: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 50
PC=0x0983: LOAD_VAR test_real1
  变量值: 50
PC=0x0984: PUSH_ARGS 1
PC=0x0985: CALL 0x0070
  调用函数@0x0070, 参数个数: 1
  设置函数参数 (函数名: SQRT):
  创建栈帧: 返回地址=0x0986, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x0070
PC=0x0070: LOAD_VAR input_val
  变量值: 0
PC=0x0071: LOAD_REAL 0.000000
PC=0x0072: LT
  0 < 0 = FALSE
PC=0x0073: JZ 120
  跳转到 PC=0x0078
PC=0x0078: LOAD_VAR input_val
  变量值: 0
PC=0x0079: LOAD_REAL 0.000000
PC=0x007a: EQ
  0 == 0 = TRUE
PC=0x007b: JZ 128
  条件为真，继续执行
PC=0x007c: LOAD_REAL 0.000000
PC=0x007d: STORE_VAR SQRT
  更新变量: SQRT
  存储值: 0.000000
PC=0x007e: LOAD_INT 0
PC=0x007f: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x0986
  返回值已压入栈顶
PC=0x0986: STORE_VAR sqrt_result
  更新变量: sqrt_result
  存储值: 0
PC=0x0987: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0988: LOAD_VAR sqrt_result
  变量值: 0
PC=0x0989: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x098a: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x098b: LOAD_VAR i
  变量值: 50
PC=0x098c: LOAD_INT 1
PC=0x098d: ADD
  50 + 1 = 51
PC=0x098e: STORE_VAR i
  更新变量: i
  存储值: 51
PC=0x098f: JMP 2429
  跳转到 PC=0x097d
PC=0x097d: LOAD_VAR i
  变量值: 51
PC=0x097e: LOAD_INT 50
PC=0x097f: LE
  51 <= 50 = FALSE
PC=0x0980: JZ 2448
  跳转到 PC=0x0990
PC=0x0990: LOAD_VAR temp_val
  变量值: 0.000000
PC=0x0991: LOAD_REAL 200.000000
PC=0x0992: GT
  0 > 0 = FALSE
PC=0x0993: JZ 2457
  跳转到 PC=0x0999
PC=0x0999: LOAD_VAR fail_counter
  变量值: 21
PC=0x099a: LOAD_INT 1
PC=0x099b: ADD
  21 + 1 = 22
PC=0x099c: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 22
PC=0x099d: LOAD_VAR test_counter
  变量值: 59
PC=0x099e: LOAD_INT 1
PC=0x099f: ADD
  59 + 1 = 60
PC=0x09a0: STORE_VAR test_counter
  更新变量: test_counter
  存储值: 60
PC=0x09a1: LOAD_REAL 0.000000
PC=0x09a2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0.000000
PC=0x09a3: LOAD_INT 1
PC=0x09a4: STORE_VAR i
  更新变量: i
  存储值: 1
PC=0x09a5: LOAD_VAR i
  变量值: 1
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  1 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0.000000
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 1
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  1 + 1 = 2
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 2
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 2
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  2 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 2
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  2 + 1 = 3
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 3
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 3
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  3 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 3
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  3 + 1 = 4
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 4
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 4
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  4 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 4
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  4 + 1 = 5
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 5
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 5
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  5 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 5
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  5 + 1 = 6
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 6
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 6
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  6 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 6
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  6 + 1 = 7
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 7
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 7
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  7 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 7
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  7 + 1 = 8
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 8
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 8
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  8 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 8
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  8 + 1 = 9
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 9
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 9
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  9 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 9
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  9 + 1 = 10
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 10
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 10
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  10 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 10
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  10 + 1 = 11
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 11
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 11
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  11 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 11
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  11 + 1 = 12
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 12
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 12
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  12 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 12
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  12 + 1 = 13
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 13
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 13
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  13 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 13
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  13 + 1 = 14
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 14
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 14
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  14 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 14
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  14 + 1 = 15
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 15
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 15
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  15 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 15
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  15 + 1 = 16
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 16
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 16
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  16 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 16
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  16 + 1 = 17
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 17
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 17
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  17 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 17
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  17 + 1 = 18
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 18
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 18
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  18 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 18
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  18 + 1 = 19
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 19
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 19
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  19 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 19
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  19 + 1 = 20
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 20
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 20
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  20 <= 20 = TRUE
PC=0x09a8: JZ 2488
  条件为真，继续执行
PC=0x09a9: LOAD_REAL 10.000000
PC=0x09aa: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 10.000000
PC=0x09ab: LOAD_REAL 0.100000
PC=0x09ac: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 0.100000
PC=0x09ad: LOAD_VAR test_real1
  变量值: 10.000000
PC=0x09ae: LOAD_VAR test_real2
  变量值: 0.100000
PC=0x09af: LOAD_VAR filter_last
  变量值: 0
PC=0x09b0: PUSH_ARGS 3
PC=0x09b1: CALL 0x0213
  调用函数@0x0213, 参数个数: 3
  设置函数参数 (函数名: LOW_PASS_FILTER):
  创建栈帧: 返回地址=0x09b2, 帧指针=-3, 参数个数=3
  跳转到函数地址: 0x0213
PC=0x0213: LOAD_REAL 1.000000
PC=0x0214: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x0215: SUB
  1.000000 - 0.000000 = 1.000000
PC=0x0216: STORE_VAR temp1
  更新变量: temp1
  存储值: 1.000000
PC=0x0217: LOAD_VAR temp1
  变量值: 1.000000
PC=0x0218: LOAD_VAR last_output
  变量值: FALSE
PC=0x0219: MUL
  1.000000 * 0.000000 = 0.000000
PC=0x021a: STORE_VAR temp2
  更新变量: temp2
  存储值: 0.000000
PC=0x021b: LOAD_VAR filter_const
  变量值: 0.000000
PC=0x021c: LOAD_VAR input_val
  变量值: 0
PC=0x021d: MUL
  0.000000 * 0.000000 = 0.000000
PC=0x021e: LOAD_VAR temp2
  变量值: 0.000000
PC=0x021f: ADD
  0.000000 + 0.000000 = 0.000000
PC=0x0220: STORE_VAR output
  更新变量: output
  存储值: 0.000000
PC=0x0221: LOAD_VAR output
  变量值: 0.000000
PC=0x0222: STORE_VAR LOW_PASS_FILTER
  更新变量: LOW_PASS_FILTER
  存储值: 0.000000
PC=0x0223: LOAD_INT 0
PC=0x0224: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09b2
  返回值已压入栈顶
PC=0x09b2: STORE_VAR filter_last
  更新变量: filter_last
  存储值: 0
PC=0x09b3: LOAD_VAR i
  变量值: 20
PC=0x09b4: LOAD_INT 1
PC=0x09b5: ADD
  20 + 1 = 21
PC=0x09b6: STORE_VAR i
  更新变量: i
  存储值: 21
PC=0x09b7: JMP 2469
  跳转到 PC=0x09a5
PC=0x09a5: LOAD_VAR i
  变量值: 21
PC=0x09a6: LOAD_INT 20
PC=0x09a7: LE
  21 <= 20 = FALSE
PC=0x09a8: JZ 2488
  跳转到 PC=0x09b8
PC=0x09b8: LOAD_VAR filter_last
  变量值: 0
PC=0x09b9: LOAD_REAL 10.000000
PC=0x09ba: SUB
  0.000000 - 10.000000 = -10.000000
PC=0x09bb: STORE_VAR filter_last
  更新变量: filter_last
  存储值: -10.000000
PC=0x09bc: LOAD_VAR filter_last
  变量值: -10.000000
PC=0x09bd: PUSH_ARGS 1
PC=0x09be: CALL 0x000c
  调用函数@0x000c, 参数个数: 1
  设置函数参数 (函数名: ABS_REAL):
  创建栈帧: 返回地址=0x09bf, 帧指针=-1, 参数个数=1
  跳转到函数地址: 0x000c
PC=0x000c: LOAD_VAR input_val
  变量值: 0
PC=0x000d: LOAD_REAL 0.000000
PC=0x000e: GE
  0 >= 0 = TRUE
PC=0x000f: JZ 19
  条件为真，继续执行
PC=0x0010: LOAD_VAR input_val
  变量值: 0
PC=0x0011: STORE_VAR ABS_REAL
  更新变量: ABS_REAL
  存储值: 0
PC=0x0012: JMP 22
  跳转到 PC=0x0016
PC=0x0016: LOAD_INT 0
PC=0x0017: RET
  返回值: 0
  清理函数参数变量
  清理参数, 恢复栈指针到: 0
  销毁栈帧: 返回地址=0x09bf
  返回值已压入栈顶
PC=0x09bf: STORE_VAR temp1
  更新变量: temp1
  存储值: 0
PC=0x09c0: LOAD_VAR temp1
  变量值: 0
PC=0x09c1: LOAD_REAL 1.000000
PC=0x09c2: LT
  0 < 0 = FALSE
PC=0x09c3: JZ 2505
  跳转到 PC=0x09c9
PC=0x09c9: LOAD_VAR fail_counter
  变量值: 22
PC=0x09ca: LOAD_INT 1
PC=0x09cb: ADD
  22 + 1 = 23
PC=0x09cc: STORE_VAR fail_counter
  更新变量: fail_counter
  存储值: 23
PC=0x09cd: LOAD_VAR pass_counter
  变量值: 37
PC=0x09ce: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 37
PC=0x09cf: LOAD_VAR test_counter
  变量值: 60
PC=0x09d0: STORE_VAR temp1
  更新变量: temp1
  存储值: 60
PC=0x09d1: LOAD_VAR temp_val
  变量值: 37
PC=0x09d2: LOAD_VAR temp1
  变量值: 60
PC=0x09d3: DIV
  37 / 60 = 0
PC=0x09d4: LOAD_REAL 100.000000
PC=0x09d5: MUL
  0.000000 * 100.000000 = 0.000000
PC=0x09d6: STORE_VAR success_rate
  更新变量: success_rate
  存储值: 0.000000
PC=0x09d7: LOAD_VAR pass_counter
  变量值: 37
PC=0x09d8: STORE_VAR test_real1
  更新变量: test_real1
  存储值: 37
PC=0x09d9: LOAD_VAR fail_counter
  变量值: 23
PC=0x09da: STORE_VAR test_real2
  更新变量: test_real2
  存储值: 23
PC=0x09db: LOAD_VAR success_rate
  变量值: 0.000000
PC=0x09dc: STORE_VAR temp_val
  更新变量: temp_val
  存储值: 0.000000
PC=0x09dd: HALT
  程序正常结束
=== 执行完成 ===

=== 变量状态 ===
0x0001 HYSTERESIS = TRUE (BOOL)
0x0002 DEAD_ZONE = 0.000000 (REAL)
0x0003 LIMITER = 0 (INT)
0x0004 MOVING_AVG_5 = 0.000000 (REAL)
0x0005 LOW_PASS_FILTER = 0.000000 (REAL)
0x0006 VOTE_2oo4 = FALSE (BOOL)
0x0007 VOTE_2oo3 = FALSE (BOOL)
0x0008 SR_FLIP_FLOP = FALSE (BOOL)
0x0009 RS_FLIP_FLOP = FALSE (BOOL)
0x000a POWER = 0.000000 (REAL)
0x000b LOG2 = 0.000000 (REAL)
0x000c LOG10 = 0.000000 (REAL)
0x000d LN = 0.000000 (REAL)
0x000e EXP = 1.000000 (REAL)
0x000f CBRT = 0.000000 (REAL)
0x0010 SQRT = 0.000000 (REAL)
0x0011 POWER_INT = 1.000000 (REAL)
0x0012 SIGN = 0 (INT)
0x0013 MIN_REAL = 0 (INT)
0x0014 MAX_REAL = 0 (INT)
0x0015 MIN_INT = 0 (INT)
0x0016 MAX_INT = 0 (INT)
0x0017 ABS_REAL = 0 (INT)
0x0018 ABS_INT = 0 (INT)
0x0019 success_rate = 0.000000 (REAL)
0x001a pid_integral = 0.000000 (REAL)
0x001b pid_error_last = 0.000000 (REAL)
0x001c hyst_last = TRUE (BOOL)
0x001d filter_last = -10.000000 (REAL)
0x001e log2_result = -4.000000 (REAL)
0x001f log10_result = -2.000000 (REAL)
0x0020 ln_result = -1.000000 (REAL)
0x0021 exp_result = 0.000000 (REAL)
0x0022 cbrt_result = 0 (INT)
0x0023 sqrt_result = 0 (INT)
0x0024 power_result = -8.000000 (REAL)
0x0025 sign_result = 0 (INT)
0x0026 min_result = 0 (INT)
0x0027 max_result = 0 (INT)
0x0028 abs_result = 0 (INT)
0x0029 pid_output = 0.000000 (REAL)
0x002a hyst_output = 0 (INT)
0x002b dead_output = 0 (INT)
0x002c limit_output = -16.000000 (REAL)
0x002d avg_output = -30.000000 (REAL)
0x002e filter_output = -7.500000 (REAL)
0x002f vote_2oo4_output = 0 (INT)
0x0030 vote_2oo3_output = 0 (INT)
0x0031 sr_output = 0 (INT)
0x0032 rs_output = 0 (INT)
0x0033 temp5 = 50.000000 (REAL)
0x0034 temp4 = 40.000000 (REAL)
0x0035 temp3 = 0 (INT)
0x0036 temp_bool = TRUE (BOOL)
0x0037 temp_int = 6 (INT)
0x0038 temp_val = 0.000000 (REAL)
0x0039 j = 4 (INT)
0x003a fail_counter = 23 (INT)
0x003b pass_counter = 37 (INT)
0x003c test_counter = 60 (INT)
0x003d E_CONST = 0.000000 (REAL)
0x003e PI_CONST = 0.000000 (REAL)
0x003f test_result_bool = FALSE (BOOL)
0x0040 test_result_real = 0.000000 (REAL)
0x0041 test_result_int = 0 (INT)
0x0042 test_bool4 = TRUE (BOOL)
0x0043 test_bool3 = FALSE (BOOL)
0x0044 test_bool2 = TRUE (BOOL)
0x0045 test_bool1 = TRUE (BOOL)
0x0046 test_real2 = 23 (INT)
0x0047 test_real1 = 37 (INT)
0x0048 test_int2 = 37 (INT)
0x0049 der_term = 0.000000 (REAL)
0x004a int_term = 0.000000 (REAL)
0x004b prop_term = 0.000000 (REAL)
0x004c derivative = 0.000000 (REAL)
0x004d error = 0.000000 (REAL)
0x004e dt = 0.000000 (REAL)
0x004f integral = 0.000000 (REAL)
0x0050 last_error = 0.000000 (REAL)
0x0051 kd = 0.000000 (REAL)
0x0052 ki = 0.000000 (REAL)
0x0053 kp = 0.000000 (REAL)
0x0054 process_var = 0.000000 (REAL)
0x0055 lower_limit = 0.000000 (REAL)
0x0056 max_limit = 0.000000 (REAL)
0x0057 sum = 0.000000 (REAL)
0x0058 val5 = 0.000000 (REAL)
0x0059 val4 = 0.000000 (REAL)
0x005a count = 0 (INT)
0x005b input3 = FALSE (BOOL)
0x005c input2 = FALSE (BOOL)
0x005d output = 0.000000 (REAL)
0x005e last_output = FALSE (BOOL)
0x005f reset_input = FALSE (BOOL)
0x0060 exp_val = 0.000000 (REAL)
0x0061 ln_x = 0 (INT)
0x0062 power = 0.000000 (REAL)
0x0063 factorial_val = 2432902008176640000.000000 (REAL)
0x0064 term = 0.000000 (REAL)
0x0065 temp2 = 0.000000 (REAL)
0x0066 temp1 = 60 (INT)
0x0067 abs_input = 0 (INT)
0x0068 diff_val = 0.000000 (REAL)
0x0069 iteration_count = 0 (INT)
0x006a old_result = 0.000000 (REAL)
0x006b i = 21 (INT)
0x006c temp_exp = 0 (INT)
0x006d result = FALSE (BOOL)
0x006e exponent = 0 (INT)
0x006f val2 = 0 (INT)
0x0070 input_val = 0 (INT)
0x0071 val1 = 0 (INT)
0x0072 base = 0.000000 (REAL)
0x0073 precision = 0.000000 (REAL)
0x0074 sign_val = 0 (INT)
0x0075 x = 0.000000 (REAL)
0x0076 y = 0.000000 (REAL)
0x0077 ln_10 = 2.302585 (REAL)
0x0078 ln_2 = 0.693147 (REAL)
0x0079 ln_base = 0.000000 (REAL)
0x007a set_input = FALSE (BOOL)
0x007b input1 = FALSE (BOOL)
0x007c input4 = FALSE (BOOL)
0x007d filter_const = 0.000000 (REAL)
0x007e val3 = 0.000000 (REAL)
0x007f min_limit = 0.000000 (REAL)
0x0080 dead_band = 0.000000 (REAL)
0x0081 upper_limit = 0.000000 (REAL)
0x0082 setpoint = 0.000000 (REAL)
0x0083 test_int1 = 3 (INT)
总共 131 个变量
================
=== 函数列表 ===
0x0281 __func_PID_SIMPLE__ (参数: 0)
0x0266 __func_HYSTERESIS__ (参数: 0)
0x024a __func_DEAD_ZONE__ (参数: 0)
0x023d __func_LIMITER__ (参数: 0)
0x0225 __func_MOVING_AVG_5__ (参数: 0)
0x0213 __func_LOW_PASS_FILTER__ (参数: 0)
0x01e4 __func_VOTE_2oo4__ (参数: 0)
0x01bd __func_VOTE_2oo3__ (参数: 0)
0x01a9 __func_SR_FLIP_FLOP__ (参数: 0)
0x0195 __func_RS_FLIP_FLOP__ (参数: 0)
0x0180 __func_POWER__ (参数: 0)
0x0174 __func_LOG2__ (参数: 0)
0x0168 __func_LOG10__ (参数: 0)
0x0121 __func_LN__ (参数: 0)
0x00fe __func_EXP__ (参数: 0)
0x00b1 __func_CBRT__ (参数: 0)
0x0070 __func_SQRT__ (参数: 0)
0x004f __func_POWER_INT__ (参数: 0)
0x0044 __func_SIGN__ (参数: 0)
0x0039 __func_MIN_REAL__ (参数: 0)
0x002e __func_MAX_REAL__ (参数: 0)
0x0023 __func_MIN_INT__ (参数: 0)
0x0018 __func_MAX_INT__ (参数: 0)
0x000c __func_ABS_REAL__ (参数: 0)
0x0000 __func_ABS_INT__ (参数: 0)
总共 25 个函数
================
